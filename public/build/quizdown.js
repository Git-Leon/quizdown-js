
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.quizdown = {}));
}(this, (function (exports) { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn) {
	  var module = { exports: {} };
		return fn(module, module.exports), module.exports;
	}

	/**
	 * marked - a markdown parser
	 * Copyright (c) 2011-2021, Christopher Jeffrey. (MIT Licensed)
	 * https://github.com/markedjs/marked
	 */

	var marked = createCommonjsModule(function (module, exports) {
	/**
	 * DO NOT EDIT THIS FILE
	 * The code in this file is generated from files in ./src/
	 */

	(function (global, factory) {
	  module.exports = factory() ;
	}(commonjsGlobal, (function () {
	  function _defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }

	  function _createClass(Constructor, protoProps, staticProps) {
	    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) _defineProperties(Constructor, staticProps);
	    return Constructor;
	  }

	  function _unsupportedIterableToArray(o, minLen) {
	    if (!o) return;
	    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	    var n = Object.prototype.toString.call(o).slice(8, -1);
	    if (n === "Object" && o.constructor) n = o.constructor.name;
	    if (n === "Map" || n === "Set") return Array.from(o);
	    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	  }

	  function _arrayLikeToArray(arr, len) {
	    if (len == null || len > arr.length) len = arr.length;

	    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

	    return arr2;
	  }

	  function _createForOfIteratorHelperLoose(o, allowArrayLike) {
	    var it;

	    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
	      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
	        if (it) o = it;
	        var i = 0;
	        return function () {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        };
	      }

	      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	    }

	    it = o[Symbol.iterator]();
	    return it.next.bind(it);
	  }

	  function createCommonjsModule(fn) {
	    var module = { exports: {} };
	  	return fn(module, module.exports), module.exports;
	  }

	  var defaults = createCommonjsModule(function (module) {
	    function getDefaults() {
	      return {
	        baseUrl: null,
	        breaks: false,
	        gfm: true,
	        headerIds: true,
	        headerPrefix: '',
	        highlight: null,
	        langPrefix: 'language-',
	        mangle: true,
	        pedantic: false,
	        renderer: null,
	        sanitize: false,
	        sanitizer: null,
	        silent: false,
	        smartLists: false,
	        smartypants: false,
	        tokenizer: null,
	        walkTokens: null,
	        xhtml: false
	      };
	    }

	    function changeDefaults(newDefaults) {
	      module.exports.defaults = newDefaults;
	    }

	    module.exports = {
	      defaults: getDefaults(),
	      getDefaults: getDefaults,
	      changeDefaults: changeDefaults
	    };
	  });

	  /**
	   * Helpers
	   */
	  var escapeTest = /[&<>"']/;
	  var escapeReplace = /[&<>"']/g;
	  var escapeTestNoEncode = /[<>"']|&(?!#?\w+;)/;
	  var escapeReplaceNoEncode = /[<>"']|&(?!#?\w+;)/g;
	  var escapeReplacements = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;'
	  };

	  var getEscapeReplacement = function getEscapeReplacement(ch) {
	    return escapeReplacements[ch];
	  };

	  function escape(html, encode) {
	    if (encode) {
	      if (escapeTest.test(html)) {
	        return html.replace(escapeReplace, getEscapeReplacement);
	      }
	    } else {
	      if (escapeTestNoEncode.test(html)) {
	        return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
	      }
	    }

	    return html;
	  }

	  var unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;

	  function unescape(html) {
	    // explicitly match decimal, hex, and named HTML entities
	    return html.replace(unescapeTest, function (_, n) {
	      n = n.toLowerCase();
	      if (n === 'colon') return ':';

	      if (n.charAt(0) === '#') {
	        return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
	      }

	      return '';
	    });
	  }

	  var caret = /(^|[^\[])\^/g;

	  function edit(regex, opt) {
	    regex = regex.source || regex;
	    opt = opt || '';
	    var obj = {
	      replace: function replace(name, val) {
	        val = val.source || val;
	        val = val.replace(caret, '$1');
	        regex = regex.replace(name, val);
	        return obj;
	      },
	      getRegex: function getRegex() {
	        return new RegExp(regex, opt);
	      }
	    };
	    return obj;
	  }

	  var nonWordAndColonTest = /[^\w:]/g;
	  var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;

	  function cleanUrl(sanitize, base, href) {
	    if (sanitize) {
	      var prot;

	      try {
	        prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, '').toLowerCase();
	      } catch (e) {
	        return null;
	      }

	      if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {
	        return null;
	      }
	    }

	    if (base && !originIndependentUrl.test(href)) {
	      href = resolveUrl(base, href);
	    }

	    try {
	      href = encodeURI(href).replace(/%25/g, '%');
	    } catch (e) {
	      return null;
	    }

	    return href;
	  }

	  var baseUrls = {};
	  var justDomain = /^[^:]+:\/*[^/]*$/;
	  var protocol = /^([^:]+:)[\s\S]*$/;
	  var domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;

	  function resolveUrl(base, href) {
	    if (!baseUrls[' ' + base]) {
	      // we can ignore everything in base after the last slash of its path component,
	      // but we might need to add _that_
	      // https://tools.ietf.org/html/rfc3986#section-3
	      if (justDomain.test(base)) {
	        baseUrls[' ' + base] = base + '/';
	      } else {
	        baseUrls[' ' + base] = rtrim(base, '/', true);
	      }
	    }

	    base = baseUrls[' ' + base];
	    var relativeBase = base.indexOf(':') === -1;

	    if (href.substring(0, 2) === '//') {
	      if (relativeBase) {
	        return href;
	      }

	      return base.replace(protocol, '$1') + href;
	    } else if (href.charAt(0) === '/') {
	      if (relativeBase) {
	        return href;
	      }

	      return base.replace(domain, '$1') + href;
	    } else {
	      return base + href;
	    }
	  }

	  var noopTest = {
	    exec: function noopTest() {}
	  };

	  function merge(obj) {
	    var i = 1,
	        target,
	        key;

	    for (; i < arguments.length; i++) {
	      target = arguments[i];

	      for (key in target) {
	        if (Object.prototype.hasOwnProperty.call(target, key)) {
	          obj[key] = target[key];
	        }
	      }
	    }

	    return obj;
	  }

	  function splitCells(tableRow, count) {
	    // ensure that every cell-delimiting pipe has a space
	    // before it to distinguish it from an escaped pipe
	    var row = tableRow.replace(/\|/g, function (match, offset, str) {
	      var escaped = false,
	          curr = offset;

	      while (--curr >= 0 && str[curr] === '\\') {
	        escaped = !escaped;
	      }

	      if (escaped) {
	        // odd number of slashes means | is escaped
	        // so we leave it alone
	        return '|';
	      } else {
	        // add space before unescaped |
	        return ' |';
	      }
	    }),
	        cells = row.split(/ \|/);
	    var i = 0;

	    if (cells.length > count) {
	      cells.splice(count);
	    } else {
	      while (cells.length < count) {
	        cells.push('');
	      }
	    }

	    for (; i < cells.length; i++) {
	      // leading or trailing whitespace is ignored per the gfm spec
	      cells[i] = cells[i].trim().replace(/\\\|/g, '|');
	    }

	    return cells;
	  } // Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').
	  // /c*$/ is vulnerable to REDOS.
	  // invert: Remove suffix of non-c chars instead. Default falsey.


	  function rtrim(str, c, invert) {
	    var l = str.length;

	    if (l === 0) {
	      return '';
	    } // Length of suffix matching the invert condition.


	    var suffLen = 0; // Step left until we fail to match the invert condition.

	    while (suffLen < l) {
	      var currChar = str.charAt(l - suffLen - 1);

	      if (currChar === c && !invert) {
	        suffLen++;
	      } else if (currChar !== c && invert) {
	        suffLen++;
	      } else {
	        break;
	      }
	    }

	    return str.substr(0, l - suffLen);
	  }

	  function findClosingBracket(str, b) {
	    if (str.indexOf(b[1]) === -1) {
	      return -1;
	    }

	    var l = str.length;
	    var level = 0,
	        i = 0;

	    for (; i < l; i++) {
	      if (str[i] === '\\') {
	        i++;
	      } else if (str[i] === b[0]) {
	        level++;
	      } else if (str[i] === b[1]) {
	        level--;

	        if (level < 0) {
	          return i;
	        }
	      }
	    }

	    return -1;
	  }

	  function checkSanitizeDeprecation(opt) {
	    if (opt && opt.sanitize && !opt.silent) {
	      console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');
	    }
	  } // copied from https://stackoverflow.com/a/5450113/806777


	  function repeatString(pattern, count) {
	    if (count < 1) {
	      return '';
	    }

	    var result = '';

	    while (count > 1) {
	      if (count & 1) {
	        result += pattern;
	      }

	      count >>= 1;
	      pattern += pattern;
	    }

	    return result + pattern;
	  }

	  var helpers = {
	    escape: escape,
	    unescape: unescape,
	    edit: edit,
	    cleanUrl: cleanUrl,
	    resolveUrl: resolveUrl,
	    noopTest: noopTest,
	    merge: merge,
	    splitCells: splitCells,
	    rtrim: rtrim,
	    findClosingBracket: findClosingBracket,
	    checkSanitizeDeprecation: checkSanitizeDeprecation,
	    repeatString: repeatString
	  };

	  var defaults$1 = defaults.defaults;
	  var rtrim$1 = helpers.rtrim,
	      splitCells$1 = helpers.splitCells,
	      _escape = helpers.escape,
	      findClosingBracket$1 = helpers.findClosingBracket;

	  function outputLink(cap, link, raw) {
	    var href = link.href;
	    var title = link.title ? _escape(link.title) : null;
	    var text = cap[1].replace(/\\([\[\]])/g, '$1');

	    if (cap[0].charAt(0) !== '!') {
	      return {
	        type: 'link',
	        raw: raw,
	        href: href,
	        title: title,
	        text: text
	      };
	    } else {
	      return {
	        type: 'image',
	        raw: raw,
	        href: href,
	        title: title,
	        text: _escape(text)
	      };
	    }
	  }

	  function indentCodeCompensation(raw, text) {
	    var matchIndentToCode = raw.match(/^(\s+)(?:```)/);

	    if (matchIndentToCode === null) {
	      return text;
	    }

	    var indentToCode = matchIndentToCode[1];
	    return text.split('\n').map(function (node) {
	      var matchIndentInNode = node.match(/^\s+/);

	      if (matchIndentInNode === null) {
	        return node;
	      }

	      var indentInNode = matchIndentInNode[0];

	      if (indentInNode.length >= indentToCode.length) {
	        return node.slice(indentToCode.length);
	      }

	      return node;
	    }).join('\n');
	  }
	  /**
	   * Tokenizer
	   */


	  var Tokenizer_1 = /*#__PURE__*/function () {
	    function Tokenizer(options) {
	      this.options = options || defaults$1;
	    }

	    var _proto = Tokenizer.prototype;

	    _proto.space = function space(src) {
	      var cap = this.rules.block.newline.exec(src);

	      if (cap) {
	        if (cap[0].length > 1) {
	          return {
	            type: 'space',
	            raw: cap[0]
	          };
	        }

	        return {
	          raw: '\n'
	        };
	      }
	    };

	    _proto.code = function code(src) {
	      var cap = this.rules.block.code.exec(src);

	      if (cap) {
	        var text = cap[0].replace(/^ {1,4}/gm, '');
	        return {
	          type: 'code',
	          raw: cap[0],
	          codeBlockStyle: 'indented',
	          text: !this.options.pedantic ? rtrim$1(text, '\n') : text
	        };
	      }
	    };

	    _proto.fences = function fences(src) {
	      var cap = this.rules.block.fences.exec(src);

	      if (cap) {
	        var raw = cap[0];
	        var text = indentCodeCompensation(raw, cap[3] || '');
	        return {
	          type: 'code',
	          raw: raw,
	          lang: cap[2] ? cap[2].trim() : cap[2],
	          text: text
	        };
	      }
	    };

	    _proto.heading = function heading(src) {
	      var cap = this.rules.block.heading.exec(src);

	      if (cap) {
	        var text = cap[2].trim(); // remove trailing #s

	        if (/#$/.test(text)) {
	          var trimmed = rtrim$1(text, '#');

	          if (this.options.pedantic) {
	            text = trimmed.trim();
	          } else if (!trimmed || / $/.test(trimmed)) {
	            // CommonMark requires space before trailing #s
	            text = trimmed.trim();
	          }
	        }

	        return {
	          type: 'heading',
	          raw: cap[0],
	          depth: cap[1].length,
	          text: text
	        };
	      }
	    };

	    _proto.nptable = function nptable(src) {
	      var cap = this.rules.block.nptable.exec(src);

	      if (cap) {
	        var item = {
	          type: 'table',
	          header: splitCells$1(cap[1].replace(/^ *| *\| *$/g, '')),
	          align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
	          cells: cap[3] ? cap[3].replace(/\n$/, '').split('\n') : [],
	          raw: cap[0]
	        };

	        if (item.header.length === item.align.length) {
	          var l = item.align.length;
	          var i;

	          for (i = 0; i < l; i++) {
	            if (/^ *-+: *$/.test(item.align[i])) {
	              item.align[i] = 'right';
	            } else if (/^ *:-+: *$/.test(item.align[i])) {
	              item.align[i] = 'center';
	            } else if (/^ *:-+ *$/.test(item.align[i])) {
	              item.align[i] = 'left';
	            } else {
	              item.align[i] = null;
	            }
	          }

	          l = item.cells.length;

	          for (i = 0; i < l; i++) {
	            item.cells[i] = splitCells$1(item.cells[i], item.header.length);
	          }

	          return item;
	        }
	      }
	    };

	    _proto.hr = function hr(src) {
	      var cap = this.rules.block.hr.exec(src);

	      if (cap) {
	        return {
	          type: 'hr',
	          raw: cap[0]
	        };
	      }
	    };

	    _proto.blockquote = function blockquote(src) {
	      var cap = this.rules.block.blockquote.exec(src);

	      if (cap) {
	        var text = cap[0].replace(/^ *> ?/gm, '');
	        return {
	          type: 'blockquote',
	          raw: cap[0],
	          text: text
	        };
	      }
	    };

	    _proto.list = function list(src) {
	      var cap = this.rules.block.list.exec(src);

	      if (cap) {
	        var raw = cap[0];
	        var bull = cap[2];
	        var isordered = bull.length > 1;
	        var list = {
	          type: 'list',
	          raw: raw,
	          ordered: isordered,
	          start: isordered ? +bull.slice(0, -1) : '',
	          loose: false,
	          items: []
	        }; // Get each top-level item.

	        var itemMatch = cap[0].match(this.rules.block.item);
	        var next = false,
	            item,
	            space,
	            bcurr,
	            bnext,
	            addBack,
	            loose,
	            istask,
	            ischecked;
	        var l = itemMatch.length;
	        bcurr = this.rules.block.listItemStart.exec(itemMatch[0]);

	        for (var i = 0; i < l; i++) {
	          item = itemMatch[i];
	          raw = item; // Determine whether the next list item belongs here.
	          // Backpedal if it does not belong in this list.

	          if (i !== l - 1) {
	            bnext = this.rules.block.listItemStart.exec(itemMatch[i + 1]);

	            if (!this.options.pedantic ? bnext[1].length > bcurr[0].length || bnext[1].length > 3 : bnext[1].length > bcurr[1].length) {
	              // nested list
	              itemMatch.splice(i, 2, itemMatch[i] + '\n' + itemMatch[i + 1]);
	              i--;
	              l--;
	              continue;
	            } else {
	              if ( // different bullet style
	              !this.options.pedantic || this.options.smartLists ? bnext[2][bnext[2].length - 1] !== bull[bull.length - 1] : isordered === (bnext[2].length === 1)) {
	                addBack = itemMatch.slice(i + 1).join('\n');
	                list.raw = list.raw.substring(0, list.raw.length - addBack.length);
	                i = l - 1;
	              }
	            }

	            bcurr = bnext;
	          } // Remove the list item's bullet
	          // so it is seen as the next token.


	          space = item.length;
	          item = item.replace(/^ *([*+-]|\d+[.)]) ?/, ''); // Outdent whatever the
	          // list item contains. Hacky.

	          if (~item.indexOf('\n ')) {
	            space -= item.length;
	            item = !this.options.pedantic ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '') : item.replace(/^ {1,4}/gm, '');
	          } // Determine whether item is loose or not.
	          // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
	          // for discount behavior.


	          loose = next || /\n\n(?!\s*$)/.test(item);

	          if (i !== l - 1) {
	            next = item.charAt(item.length - 1) === '\n';
	            if (!loose) loose = next;
	          }

	          if (loose) {
	            list.loose = true;
	          } // Check for task list items


	          if (this.options.gfm) {
	            istask = /^\[[ xX]\] /.test(item);
	            ischecked = undefined;

	            if (istask) {
	              ischecked = item[1] !== ' ';
	              item = item.replace(/^\[[ xX]\] +/, '');
	            }
	          }

	          list.items.push({
	            type: 'list_item',
	            raw: raw,
	            task: istask,
	            checked: ischecked,
	            loose: loose,
	            text: item
	          });
	        }

	        return list;
	      }
	    };

	    _proto.html = function html(src) {
	      var cap = this.rules.block.html.exec(src);

	      if (cap) {
	        return {
	          type: this.options.sanitize ? 'paragraph' : 'html',
	          raw: cap[0],
	          pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
	          text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]
	        };
	      }
	    };

	    _proto.def = function def(src) {
	      var cap = this.rules.block.def.exec(src);

	      if (cap) {
	        if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);
	        var tag = cap[1].toLowerCase().replace(/\s+/g, ' ');
	        return {
	          tag: tag,
	          raw: cap[0],
	          href: cap[2],
	          title: cap[3]
	        };
	      }
	    };

	    _proto.table = function table(src) {
	      var cap = this.rules.block.table.exec(src);

	      if (cap) {
	        var item = {
	          type: 'table',
	          header: splitCells$1(cap[1].replace(/^ *| *\| *$/g, '')),
	          align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
	          cells: cap[3] ? cap[3].replace(/\n$/, '').split('\n') : []
	        };

	        if (item.header.length === item.align.length) {
	          item.raw = cap[0];
	          var l = item.align.length;
	          var i;

	          for (i = 0; i < l; i++) {
	            if (/^ *-+: *$/.test(item.align[i])) {
	              item.align[i] = 'right';
	            } else if (/^ *:-+: *$/.test(item.align[i])) {
	              item.align[i] = 'center';
	            } else if (/^ *:-+ *$/.test(item.align[i])) {
	              item.align[i] = 'left';
	            } else {
	              item.align[i] = null;
	            }
	          }

	          l = item.cells.length;

	          for (i = 0; i < l; i++) {
	            item.cells[i] = splitCells$1(item.cells[i].replace(/^ *\| *| *\| *$/g, ''), item.header.length);
	          }

	          return item;
	        }
	      }
	    };

	    _proto.lheading = function lheading(src) {
	      var cap = this.rules.block.lheading.exec(src);

	      if (cap) {
	        return {
	          type: 'heading',
	          raw: cap[0],
	          depth: cap[2].charAt(0) === '=' ? 1 : 2,
	          text: cap[1]
	        };
	      }
	    };

	    _proto.paragraph = function paragraph(src) {
	      var cap = this.rules.block.paragraph.exec(src);

	      if (cap) {
	        return {
	          type: 'paragraph',
	          raw: cap[0],
	          text: cap[1].charAt(cap[1].length - 1) === '\n' ? cap[1].slice(0, -1) : cap[1]
	        };
	      }
	    };

	    _proto.text = function text(src) {
	      var cap = this.rules.block.text.exec(src);

	      if (cap) {
	        return {
	          type: 'text',
	          raw: cap[0],
	          text: cap[0]
	        };
	      }
	    };

	    _proto.escape = function escape(src) {
	      var cap = this.rules.inline.escape.exec(src);

	      if (cap) {
	        return {
	          type: 'escape',
	          raw: cap[0],
	          text: _escape(cap[1])
	        };
	      }
	    };

	    _proto.tag = function tag(src, inLink, inRawBlock) {
	      var cap = this.rules.inline.tag.exec(src);

	      if (cap) {
	        if (!inLink && /^<a /i.test(cap[0])) {
	          inLink = true;
	        } else if (inLink && /^<\/a>/i.test(cap[0])) {
	          inLink = false;
	        }

	        if (!inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
	          inRawBlock = true;
	        } else if (inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
	          inRawBlock = false;
	        }

	        return {
	          type: this.options.sanitize ? 'text' : 'html',
	          raw: cap[0],
	          inLink: inLink,
	          inRawBlock: inRawBlock,
	          text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]
	        };
	      }
	    };

	    _proto.link = function link(src) {
	      var cap = this.rules.inline.link.exec(src);

	      if (cap) {
	        var trimmedUrl = cap[2].trim();

	        if (!this.options.pedantic && /^</.test(trimmedUrl)) {
	          // commonmark requires matching angle brackets
	          if (!/>$/.test(trimmedUrl)) {
	            return;
	          } // ending angle bracket cannot be escaped


	          var rtrimSlash = rtrim$1(trimmedUrl.slice(0, -1), '\\');

	          if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
	            return;
	          }
	        } else {
	          // find closing parenthesis
	          var lastParenIndex = findClosingBracket$1(cap[2], '()');

	          if (lastParenIndex > -1) {
	            var start = cap[0].indexOf('!') === 0 ? 5 : 4;
	            var linkLen = start + cap[1].length + lastParenIndex;
	            cap[2] = cap[2].substring(0, lastParenIndex);
	            cap[0] = cap[0].substring(0, linkLen).trim();
	            cap[3] = '';
	          }
	        }

	        var href = cap[2];
	        var title = '';

	        if (this.options.pedantic) {
	          // split pedantic href and title
	          var link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);

	          if (link) {
	            href = link[1];
	            title = link[3];
	          }
	        } else {
	          title = cap[3] ? cap[3].slice(1, -1) : '';
	        }

	        href = href.trim();

	        if (/^</.test(href)) {
	          if (this.options.pedantic && !/>$/.test(trimmedUrl)) {
	            // pedantic allows starting angle bracket without ending angle bracket
	            href = href.slice(1);
	          } else {
	            href = href.slice(1, -1);
	          }
	        }

	        return outputLink(cap, {
	          href: href ? href.replace(this.rules.inline._escapes, '$1') : href,
	          title: title ? title.replace(this.rules.inline._escapes, '$1') : title
	        }, cap[0]);
	      }
	    };

	    _proto.reflink = function reflink(src, links) {
	      var cap;

	      if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
	        var link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
	        link = links[link.toLowerCase()];

	        if (!link || !link.href) {
	          var text = cap[0].charAt(0);
	          return {
	            type: 'text',
	            raw: text,
	            text: text
	          };
	        }

	        return outputLink(cap, link, cap[0]);
	      }
	    };

	    _proto.emStrong = function emStrong(src, maskedSrc, prevChar) {
	      if (prevChar === void 0) {
	        prevChar = '';
	      }

	      var match = this.rules.inline.emStrong.lDelim.exec(src);
	      if (!match) return;
	      if (match[3] && prevChar.match(/(?:[0-9A-Za-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u0660-\u0669\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0966-\u096F\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AE6-\u0AEF\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B6F\u0B71-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0BE6-\u0BF2\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C66-\u0C6F\u0C78-\u0C7E\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D58-\u0D61\u0D66-\u0D78\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DE6-\u0DEF\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F-\u1049\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1090-\u1099\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A20-\u1A54\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B50-\u1B59\u1B83-\u1BA0\u1BAE-\u1BE5\u1C00-\u1C23\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2150-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA830-\uA835\uA840-\uA873\uA882-\uA8B3\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA900-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF-\uA9D9\uA9E0-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD23\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC52-\uDC6F\uDC83-\uDCAF\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD03-\uDD26\uDD36-\uDD3F\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDD0-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDEF0-\uDEF9\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE50-\uDE59\uDE80-\uDEAA\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF30-\uDF3B]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF2\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])/)) return; // _ can't be between two alphanumerics. \p{L}\p{N} includes non-english alphabet/numbers as well

	      var nextChar = match[1] || match[2] || '';

	      if (!nextChar || nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))) {
	        var lLength = match[0].length - 1;
	        var rDelim,
	            rLength,
	            delimTotal = lLength,
	            midDelimTotal = 0;
	        var endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
	        endReg.lastIndex = 0;
	        maskedSrc = maskedSrc.slice(-1 * src.length + lLength); // Bump maskedSrc to same section of string as src (move to lexer?)

	        while ((match = endReg.exec(maskedSrc)) != null) {
	          rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
	          if (!rDelim) continue; // matched the first alternative in rules.js (skip the * in __abc*abc__)

	          rLength = rDelim.length;

	          if (match[3] || match[4]) {
	            // found another Left Delim
	            delimTotal += rLength;
	            continue;
	          } else if (match[5] || match[6]) {
	            // either Left or Right Delim
	            if (lLength % 3 && !((lLength + rLength) % 3)) {
	              midDelimTotal += rLength;
	              continue; // CommonMark Emphasis Rules 9-10
	            }
	          }

	          delimTotal -= rLength;
	          if (delimTotal > 0) continue; // Haven't found enough closing delimiters
	          // If this is the last rDelimiter, remove extra characters. *a*** -> *a*

	          if (delimTotal + midDelimTotal - rLength <= 0 && !maskedSrc.slice(endReg.lastIndex).match(endReg)) {
	            rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
	          }

	          if (Math.min(lLength, rLength) % 2) {
	            return {
	              type: 'em',
	              raw: src.slice(0, lLength + match.index + rLength + 1),
	              text: src.slice(1, lLength + match.index + rLength)
	            };
	          }

	          if (Math.min(lLength, rLength) % 2 === 0) {
	            return {
	              type: 'strong',
	              raw: src.slice(0, lLength + match.index + rLength + 1),
	              text: src.slice(2, lLength + match.index + rLength - 1)
	            };
	          }
	        }
	      }
	    };

	    _proto.codespan = function codespan(src) {
	      var cap = this.rules.inline.code.exec(src);

	      if (cap) {
	        var text = cap[2].replace(/\n/g, ' ');
	        var hasNonSpaceChars = /[^ ]/.test(text);
	        var hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);

	        if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
	          text = text.substring(1, text.length - 1);
	        }

	        text = _escape(text, true);
	        return {
	          type: 'codespan',
	          raw: cap[0],
	          text: text
	        };
	      }
	    };

	    _proto.br = function br(src) {
	      var cap = this.rules.inline.br.exec(src);

	      if (cap) {
	        return {
	          type: 'br',
	          raw: cap[0]
	        };
	      }
	    };

	    _proto.del = function del(src) {
	      var cap = this.rules.inline.del.exec(src);

	      if (cap) {
	        return {
	          type: 'del',
	          raw: cap[0],
	          text: cap[2]
	        };
	      }
	    };

	    _proto.autolink = function autolink(src, mangle) {
	      var cap = this.rules.inline.autolink.exec(src);

	      if (cap) {
	        var text, href;

	        if (cap[2] === '@') {
	          text = _escape(this.options.mangle ? mangle(cap[1]) : cap[1]);
	          href = 'mailto:' + text;
	        } else {
	          text = _escape(cap[1]);
	          href = text;
	        }

	        return {
	          type: 'link',
	          raw: cap[0],
	          text: text,
	          href: href,
	          tokens: [{
	            type: 'text',
	            raw: text,
	            text: text
	          }]
	        };
	      }
	    };

	    _proto.url = function url(src, mangle) {
	      var cap;

	      if (cap = this.rules.inline.url.exec(src)) {
	        var text, href;

	        if (cap[2] === '@') {
	          text = _escape(this.options.mangle ? mangle(cap[0]) : cap[0]);
	          href = 'mailto:' + text;
	        } else {
	          // do extended autolink path validation
	          var prevCapZero;

	          do {
	            prevCapZero = cap[0];
	            cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
	          } while (prevCapZero !== cap[0]);

	          text = _escape(cap[0]);

	          if (cap[1] === 'www.') {
	            href = 'http://' + text;
	          } else {
	            href = text;
	          }
	        }

	        return {
	          type: 'link',
	          raw: cap[0],
	          text: text,
	          href: href,
	          tokens: [{
	            type: 'text',
	            raw: text,
	            text: text
	          }]
	        };
	      }
	    };

	    _proto.inlineText = function inlineText(src, inRawBlock, smartypants) {
	      var cap = this.rules.inline.text.exec(src);

	      if (cap) {
	        var text;

	        if (inRawBlock) {
	          text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0];
	        } else {
	          text = _escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);
	        }

	        return {
	          type: 'text',
	          raw: cap[0],
	          text: text
	        };
	      }
	    };

	    return Tokenizer;
	  }();

	  var noopTest$1 = helpers.noopTest,
	      edit$1 = helpers.edit,
	      merge$1 = helpers.merge;
	  /**
	   * Block-Level Grammar
	   */

	  var block = {
	    newline: /^(?: *(?:\n|$))+/,
	    code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
	    fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?:\n+|$)|$)/,
	    hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,
	    heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
	    blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
	    list: /^( {0,3})(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?! {0,3}bull )\n*|\s*$)/,
	    html: '^ {0,3}(?:' // optional indentation
	    + '<(script|pre|style)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)' // (1)
	    + '|comment[^\\n]*(\\n+|$)' // (2)
	    + '|<\\?[\\s\\S]*?(?:\\?>\\n*|$)' // (3)
	    + '|<![A-Z][\\s\\S]*?(?:>\\n*|$)' // (4)
	    + '|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)' // (5)
	    + '|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:\\n{2,}|$)' // (6)
	    + '|<(?!script|pre|style)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)' // (7) open tag
	    + '|</(?!script|pre|style)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)' // (7) closing tag
	    + ')',
	    def: /^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,
	    nptable: noopTest$1,
	    table: noopTest$1,
	    lheading: /^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,
	    // regex template, placeholders will be replaced according to different paragraph
	    // interruption rules of commonmark and the original markdown spec:
	    _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html| +\n)[^\n]+)*)/,
	    text: /^[^\n]+/
	  };
	  block._label = /(?!\s*\])(?:\\[\[\]]|[^\[\]])+/;
	  block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
	  block.def = edit$1(block.def).replace('label', block._label).replace('title', block._title).getRegex();
	  block.bullet = /(?:[*+-]|\d{1,9}[.)])/;
	  block.item = /^( *)(bull) ?[^\n]*(?:\n(?! *bull ?)[^\n]*)*/;
	  block.item = edit$1(block.item, 'gm').replace(/bull/g, block.bullet).getRegex();
	  block.listItemStart = edit$1(/^( *)(bull)/).replace('bull', block.bullet).getRegex();
	  block.list = edit$1(block.list).replace(/bull/g, block.bullet).replace('hr', '\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))').replace('def', '\\n+(?=' + block.def.source + ')').getRegex();
	  block._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';
	  block._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
	  block.html = edit$1(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
	  block.paragraph = edit$1(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs
	  .replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
	  .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks
	  .getRegex();
	  block.blockquote = edit$1(block.blockquote).replace('paragraph', block.paragraph).getRegex();
	  /**
	   * Normal Block Grammar
	   */

	  block.normal = merge$1({}, block);
	  /**
	   * GFM Block Grammar
	   */

	  block.gfm = merge$1({}, block.normal, {
	    nptable: '^ *([^|\\n ].*\\|.*)\\n' // Header
	    + ' {0,3}([-:]+ *\\|[-| :]*)' // Align
	    + '(?:\\n((?:(?!\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)',
	    // Cells
	    table: '^ *\\|(.+)\\n' // Header
	    + ' {0,3}\\|?( *[-:]+[-| :]*)' // Align
	    + '(?:\\n *((?:(?!\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)' // Cells

	  });
	  block.gfm.nptable = edit$1(block.gfm.nptable).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
	  .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks
	  .getRegex();
	  block.gfm.table = edit$1(block.gfm.table).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
	  .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks
	  .getRegex();
	  /**
	   * Pedantic grammar (original John Gruber's loose markdown specification)
	   */

	  block.pedantic = merge$1({}, block.normal, {
	    html: edit$1('^ *(?:comment *(?:\\n|\\s*$)' + '|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)' // closed tag
	    + '|<tag(?:"[^"]*"|\'[^\']*\'|\\s[^\'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\b)\\w+(?!:|[^\\w\\s@]*@)\\b').getRegex(),
	    def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
	    heading: /^(#{1,6})(.*)(?:\n+|$)/,
	    fences: noopTest$1,
	    // fences not supported
	    paragraph: edit$1(block.normal._paragraph).replace('hr', block.hr).replace('heading', ' *#{1,6} *[^\n]').replace('lheading', block.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()
	  });
	  /**
	   * Inline-Level Grammar
	   */

	  var inline = {
	    escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
	    autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
	    url: noopTest$1,
	    tag: '^comment' + '|^</[a-zA-Z][\\w:-]*\\s*>' // self-closing tag
	    + '|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>' // open tag
	    + '|^<\\?[\\s\\S]*?\\?>' // processing instruction, e.g. <?php ?>
	    + '|^<![a-zA-Z]+\\s[\\s\\S]*?>' // declaration, e.g. <!DOCTYPE html>
	    + '|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>',
	    // CDATA section
	    link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
	    reflink: /^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,
	    nolink: /^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,
	    reflinkSearch: 'reflink|nolink(?!\\()',
	    emStrong: {
	      lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,
	      //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.
	      //        () Skip other delimiter (1) #***                (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a
	      rDelimAst: /\_\_[^_]*?\*[^_]*?\_\_|[punct_](\*+)(?=[\s]|$)|[^punct*_\s](\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|[^punct*_\s](\*+)(?=[^punct*_\s])/,
	      rDelimUnd: /\*\*[^*]*?\_[^*]*?\*\*|[punct*](\_+)(?=[\s]|$)|[^punct*_\s](\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/ // ^- Not allowed for _

	    },
	    code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
	    br: /^( {2,}|\\)\n(?!\s*$)/,
	    del: noopTest$1,
	    text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
	    punctuation: /^([\spunctuation])/
	  }; // list of punctuation marks from CommonMark spec
	  // without * and _ to handle the different emphasis markers * and _

	  inline._punctuation = '!"#$%&\'()+\\-.,/:;<=>?@\\[\\]`^{|}~';
	  inline.punctuation = edit$1(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex(); // sequences em should skip over [title](link), `code`, <html>

	  inline.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
	  inline.escapedEmSt = /\\\*|\\_/g;
	  inline._comment = edit$1(block._comment).replace('(?:-->|$)', '-->').getRegex();
	  inline.emStrong.lDelim = edit$1(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();
	  inline.emStrong.rDelimAst = edit$1(inline.emStrong.rDelimAst, 'g').replace(/punct/g, inline._punctuation).getRegex();
	  inline.emStrong.rDelimUnd = edit$1(inline.emStrong.rDelimUnd, 'g').replace(/punct/g, inline._punctuation).getRegex();
	  inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
	  inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
	  inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
	  inline.autolink = edit$1(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();
	  inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
	  inline.tag = edit$1(inline.tag).replace('comment', inline._comment).replace('attribute', inline._attribute).getRegex();
	  inline._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
	  inline._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
	  inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
	  inline.link = edit$1(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();
	  inline.reflink = edit$1(inline.reflink).replace('label', inline._label).getRegex();
	  inline.reflinkSearch = edit$1(inline.reflinkSearch, 'g').replace('reflink', inline.reflink).replace('nolink', inline.nolink).getRegex();
	  /**
	   * Normal Inline Grammar
	   */

	  inline.normal = merge$1({}, inline);
	  /**
	   * Pedantic Inline Grammar
	   */

	  inline.pedantic = merge$1({}, inline.normal, {
	    strong: {
	      start: /^__|\*\*/,
	      middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
	      endAst: /\*\*(?!\*)/g,
	      endUnd: /__(?!_)/g
	    },
	    em: {
	      start: /^_|\*/,
	      middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
	      endAst: /\*(?!\*)/g,
	      endUnd: /_(?!_)/g
	    },
	    link: edit$1(/^!?\[(label)\]\((.*?)\)/).replace('label', inline._label).getRegex(),
	    reflink: edit$1(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace('label', inline._label).getRegex()
	  });
	  /**
	   * GFM Inline Grammar
	   */

	  inline.gfm = merge$1({}, inline.normal, {
	    escape: edit$1(inline.escape).replace('])', '~|])').getRegex(),
	    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
	    url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
	    _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
	    del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
	    text: /^([`~]+|[^`~])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))/
	  });
	  inline.gfm.url = edit$1(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();
	  /**
	   * GFM + Line Breaks Inline Grammar
	   */

	  inline.breaks = merge$1({}, inline.gfm, {
	    br: edit$1(inline.br).replace('{2,}', '*').getRegex(),
	    text: edit$1(inline.gfm.text).replace('\\b_', '\\b_| {2,}\\n').replace(/\{2,\}/g, '*').getRegex()
	  });
	  var rules = {
	    block: block,
	    inline: inline
	  };

	  var defaults$2 = defaults.defaults;
	  var block$1 = rules.block,
	      inline$1 = rules.inline;
	  var repeatString$1 = helpers.repeatString;
	  /**
	   * smartypants text replacement
	   */

	  function smartypants(text) {
	    return text // em-dashes
	    .replace(/---/g, "\u2014") // en-dashes
	    .replace(/--/g, "\u2013") // opening singles
	    .replace(/(^|[-\u2014/(\[{"\s])'/g, "$1\u2018") // closing singles & apostrophes
	    .replace(/'/g, "\u2019") // opening doubles
	    .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1\u201C") // closing doubles
	    .replace(/"/g, "\u201D") // ellipses
	    .replace(/\.{3}/g, "\u2026");
	  }
	  /**
	   * mangle email addresses
	   */


	  function mangle(text) {
	    var out = '',
	        i,
	        ch;
	    var l = text.length;

	    for (i = 0; i < l; i++) {
	      ch = text.charCodeAt(i);

	      if (Math.random() > 0.5) {
	        ch = 'x' + ch.toString(16);
	      }

	      out += '&#' + ch + ';';
	    }

	    return out;
	  }
	  /**
	   * Block Lexer
	   */


	  var Lexer_1 = /*#__PURE__*/function () {
	    function Lexer(options) {
	      this.tokens = [];
	      this.tokens.links = Object.create(null);
	      this.options = options || defaults$2;
	      this.options.tokenizer = this.options.tokenizer || new Tokenizer_1();
	      this.tokenizer = this.options.tokenizer;
	      this.tokenizer.options = this.options;
	      var rules = {
	        block: block$1.normal,
	        inline: inline$1.normal
	      };

	      if (this.options.pedantic) {
	        rules.block = block$1.pedantic;
	        rules.inline = inline$1.pedantic;
	      } else if (this.options.gfm) {
	        rules.block = block$1.gfm;

	        if (this.options.breaks) {
	          rules.inline = inline$1.breaks;
	        } else {
	          rules.inline = inline$1.gfm;
	        }
	      }

	      this.tokenizer.rules = rules;
	    }
	    /**
	     * Expose Rules
	     */


	    /**
	     * Static Lex Method
	     */
	    Lexer.lex = function lex(src, options) {
	      var lexer = new Lexer(options);
	      return lexer.lex(src);
	    }
	    /**
	     * Static Lex Inline Method
	     */
	    ;

	    Lexer.lexInline = function lexInline(src, options) {
	      var lexer = new Lexer(options);
	      return lexer.inlineTokens(src);
	    }
	    /**
	     * Preprocessing
	     */
	    ;

	    var _proto = Lexer.prototype;

	    _proto.lex = function lex(src) {
	      src = src.replace(/\r\n|\r/g, '\n').replace(/\t/g, '    ');
	      this.blockTokens(src, this.tokens, true);
	      this.inline(this.tokens);
	      return this.tokens;
	    }
	    /**
	     * Lexing
	     */
	    ;

	    _proto.blockTokens = function blockTokens(src, tokens, top) {
	      if (tokens === void 0) {
	        tokens = [];
	      }

	      if (top === void 0) {
	        top = true;
	      }

	      if (this.options.pedantic) {
	        src = src.replace(/^ +$/gm, '');
	      }

	      var token, i, l, lastToken;

	      while (src) {
	        // newline
	        if (token = this.tokenizer.space(src)) {
	          src = src.substring(token.raw.length);

	          if (token.type) {
	            tokens.push(token);
	          }

	          continue;
	        } // code


	        if (token = this.tokenizer.code(src)) {
	          src = src.substring(token.raw.length);
	          lastToken = tokens[tokens.length - 1]; // An indented code block cannot interrupt a paragraph.

	          if (lastToken && lastToken.type === 'paragraph') {
	            lastToken.raw += '\n' + token.raw;
	            lastToken.text += '\n' + token.text;
	          } else {
	            tokens.push(token);
	          }

	          continue;
	        } // fences


	        if (token = this.tokenizer.fences(src)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // heading


	        if (token = this.tokenizer.heading(src)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // table no leading pipe (gfm)


	        if (token = this.tokenizer.nptable(src)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // hr


	        if (token = this.tokenizer.hr(src)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // blockquote


	        if (token = this.tokenizer.blockquote(src)) {
	          src = src.substring(token.raw.length);
	          token.tokens = this.blockTokens(token.text, [], top);
	          tokens.push(token);
	          continue;
	        } // list


	        if (token = this.tokenizer.list(src)) {
	          src = src.substring(token.raw.length);
	          l = token.items.length;

	          for (i = 0; i < l; i++) {
	            token.items[i].tokens = this.blockTokens(token.items[i].text, [], false);
	          }

	          tokens.push(token);
	          continue;
	        } // html


	        if (token = this.tokenizer.html(src)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // def


	        if (top && (token = this.tokenizer.def(src))) {
	          src = src.substring(token.raw.length);

	          if (!this.tokens.links[token.tag]) {
	            this.tokens.links[token.tag] = {
	              href: token.href,
	              title: token.title
	            };
	          }

	          continue;
	        } // table (gfm)


	        if (token = this.tokenizer.table(src)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // lheading


	        if (token = this.tokenizer.lheading(src)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // top-level paragraph


	        if (top && (token = this.tokenizer.paragraph(src))) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // text


	        if (token = this.tokenizer.text(src)) {
	          src = src.substring(token.raw.length);
	          lastToken = tokens[tokens.length - 1];

	          if (lastToken && lastToken.type === 'text') {
	            lastToken.raw += '\n' + token.raw;
	            lastToken.text += '\n' + token.text;
	          } else {
	            tokens.push(token);
	          }

	          continue;
	        }

	        if (src) {
	          var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);

	          if (this.options.silent) {
	            console.error(errMsg);
	            break;
	          } else {
	            throw new Error(errMsg);
	          }
	        }
	      }

	      return tokens;
	    };

	    _proto.inline = function inline(tokens) {
	      var i, j, k, l2, row, token;
	      var l = tokens.length;

	      for (i = 0; i < l; i++) {
	        token = tokens[i];

	        switch (token.type) {
	          case 'paragraph':
	          case 'text':
	          case 'heading':
	            {
	              token.tokens = [];
	              this.inlineTokens(token.text, token.tokens);
	              break;
	            }

	          case 'table':
	            {
	              token.tokens = {
	                header: [],
	                cells: []
	              }; // header

	              l2 = token.header.length;

	              for (j = 0; j < l2; j++) {
	                token.tokens.header[j] = [];
	                this.inlineTokens(token.header[j], token.tokens.header[j]);
	              } // cells


	              l2 = token.cells.length;

	              for (j = 0; j < l2; j++) {
	                row = token.cells[j];
	                token.tokens.cells[j] = [];

	                for (k = 0; k < row.length; k++) {
	                  token.tokens.cells[j][k] = [];
	                  this.inlineTokens(row[k], token.tokens.cells[j][k]);
	                }
	              }

	              break;
	            }

	          case 'blockquote':
	            {
	              this.inline(token.tokens);
	              break;
	            }

	          case 'list':
	            {
	              l2 = token.items.length;

	              for (j = 0; j < l2; j++) {
	                this.inline(token.items[j].tokens);
	              }

	              break;
	            }
	        }
	      }

	      return tokens;
	    }
	    /**
	     * Lexing/Compiling
	     */
	    ;

	    _proto.inlineTokens = function inlineTokens(src, tokens, inLink, inRawBlock) {
	      if (tokens === void 0) {
	        tokens = [];
	      }

	      if (inLink === void 0) {
	        inLink = false;
	      }

	      if (inRawBlock === void 0) {
	        inRawBlock = false;
	      }

	      var token, lastToken; // String with links masked to avoid interference with em and strong

	      var maskedSrc = src;
	      var match;
	      var keepPrevChar, prevChar; // Mask out reflinks

	      if (this.tokens.links) {
	        var links = Object.keys(this.tokens.links);

	        if (links.length > 0) {
	          while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
	            if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {
	              maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString$1('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
	            }
	          }
	        }
	      } // Mask out other blocks


	      while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
	        maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString$1('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
	      } // Mask out escaped em & strong delimiters


	      while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {
	        maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);
	      }

	      while (src) {
	        if (!keepPrevChar) {
	          prevChar = '';
	        }

	        keepPrevChar = false; // escape

	        if (token = this.tokenizer.escape(src)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // tag


	        if (token = this.tokenizer.tag(src, inLink, inRawBlock)) {
	          src = src.substring(token.raw.length);
	          inLink = token.inLink;
	          inRawBlock = token.inRawBlock;
	          var _lastToken = tokens[tokens.length - 1];

	          if (_lastToken && token.type === 'text' && _lastToken.type === 'text') {
	            _lastToken.raw += token.raw;
	            _lastToken.text += token.text;
	          } else {
	            tokens.push(token);
	          }

	          continue;
	        } // link


	        if (token = this.tokenizer.link(src)) {
	          src = src.substring(token.raw.length);

	          if (token.type === 'link') {
	            token.tokens = this.inlineTokens(token.text, [], true, inRawBlock);
	          }

	          tokens.push(token);
	          continue;
	        } // reflink, nolink


	        if (token = this.tokenizer.reflink(src, this.tokens.links)) {
	          src = src.substring(token.raw.length);
	          var _lastToken2 = tokens[tokens.length - 1];

	          if (token.type === 'link') {
	            token.tokens = this.inlineTokens(token.text, [], true, inRawBlock);
	            tokens.push(token);
	          } else if (_lastToken2 && token.type === 'text' && _lastToken2.type === 'text') {
	            _lastToken2.raw += token.raw;
	            _lastToken2.text += token.text;
	          } else {
	            tokens.push(token);
	          }

	          continue;
	        } // em & strong


	        if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
	          src = src.substring(token.raw.length);
	          token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);
	          tokens.push(token);
	          continue;
	        } // code


	        if (token = this.tokenizer.codespan(src)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // br


	        if (token = this.tokenizer.br(src)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // del (gfm)


	        if (token = this.tokenizer.del(src)) {
	          src = src.substring(token.raw.length);
	          token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);
	          tokens.push(token);
	          continue;
	        } // autolink


	        if (token = this.tokenizer.autolink(src, mangle)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // url (gfm)


	        if (!inLink && (token = this.tokenizer.url(src, mangle))) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // text


	        if (token = this.tokenizer.inlineText(src, inRawBlock, smartypants)) {
	          src = src.substring(token.raw.length);

	          if (token.raw.slice(-1) !== '_') {
	            // Track prevChar before string of ____ started
	            prevChar = token.raw.slice(-1);
	          }

	          keepPrevChar = true;
	          lastToken = tokens[tokens.length - 1];

	          if (lastToken && lastToken.type === 'text') {
	            lastToken.raw += token.raw;
	            lastToken.text += token.text;
	          } else {
	            tokens.push(token);
	          }

	          continue;
	        }

	        if (src) {
	          var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);

	          if (this.options.silent) {
	            console.error(errMsg);
	            break;
	          } else {
	            throw new Error(errMsg);
	          }
	        }
	      }

	      return tokens;
	    };

	    _createClass(Lexer, null, [{
	      key: "rules",
	      get: function get() {
	        return {
	          block: block$1,
	          inline: inline$1
	        };
	      }
	    }]);

	    return Lexer;
	  }();

	  var defaults$3 = defaults.defaults;
	  var cleanUrl$1 = helpers.cleanUrl,
	      escape$1 = helpers.escape;
	  /**
	   * Renderer
	   */

	  var Renderer_1 = /*#__PURE__*/function () {
	    function Renderer(options) {
	      this.options = options || defaults$3;
	    }

	    var _proto = Renderer.prototype;

	    _proto.code = function code(_code, infostring, escaped) {
	      var lang = (infostring || '').match(/\S*/)[0];

	      if (this.options.highlight) {
	        var out = this.options.highlight(_code, lang);

	        if (out != null && out !== _code) {
	          escaped = true;
	          _code = out;
	        }
	      }

	      _code = _code.replace(/\n$/, '') + '\n';

	      if (!lang) {
	        return '<pre><code>' + (escaped ? _code : escape$1(_code, true)) + '</code></pre>\n';
	      }

	      return '<pre><code class="' + this.options.langPrefix + escape$1(lang, true) + '">' + (escaped ? _code : escape$1(_code, true)) + '</code></pre>\n';
	    };

	    _proto.blockquote = function blockquote(quote) {
	      return '<blockquote>\n' + quote + '</blockquote>\n';
	    };

	    _proto.html = function html(_html) {
	      return _html;
	    };

	    _proto.heading = function heading(text, level, raw, slugger) {
	      if (this.options.headerIds) {
	        return '<h' + level + ' id="' + this.options.headerPrefix + slugger.slug(raw) + '">' + text + '</h' + level + '>\n';
	      } // ignore IDs


	      return '<h' + level + '>' + text + '</h' + level + '>\n';
	    };

	    _proto.hr = function hr() {
	      return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
	    };

	    _proto.list = function list(body, ordered, start) {
	      var type = ordered ? 'ol' : 'ul',
	          startatt = ordered && start !== 1 ? ' start="' + start + '"' : '';
	      return '<' + type + startatt + '>\n' + body + '</' + type + '>\n';
	    };

	    _proto.listitem = function listitem(text) {
	      return '<li>' + text + '</li>\n';
	    };

	    _proto.checkbox = function checkbox(checked) {
	      return '<input ' + (checked ? 'checked="" ' : '') + 'disabled="" type="checkbox"' + (this.options.xhtml ? ' /' : '') + '> ';
	    };

	    _proto.paragraph = function paragraph(text) {
	      return '<p>' + text + '</p>\n';
	    };

	    _proto.table = function table(header, body) {
	      if (body) body = '<tbody>' + body + '</tbody>';
	      return '<table>\n' + '<thead>\n' + header + '</thead>\n' + body + '</table>\n';
	    };

	    _proto.tablerow = function tablerow(content) {
	      return '<tr>\n' + content + '</tr>\n';
	    };

	    _proto.tablecell = function tablecell(content, flags) {
	      var type = flags.header ? 'th' : 'td';
	      var tag = flags.align ? '<' + type + ' align="' + flags.align + '">' : '<' + type + '>';
	      return tag + content + '</' + type + '>\n';
	    } // span level renderer
	    ;

	    _proto.strong = function strong(text) {
	      return '<strong>' + text + '</strong>';
	    };

	    _proto.em = function em(text) {
	      return '<em>' + text + '</em>';
	    };

	    _proto.codespan = function codespan(text) {
	      return '<code>' + text + '</code>';
	    };

	    _proto.br = function br() {
	      return this.options.xhtml ? '<br/>' : '<br>';
	    };

	    _proto.del = function del(text) {
	      return '<del>' + text + '</del>';
	    };

	    _proto.link = function link(href, title, text) {
	      href = cleanUrl$1(this.options.sanitize, this.options.baseUrl, href);

	      if (href === null) {
	        return text;
	      }

	      var out = '<a href="' + escape$1(href) + '"';

	      if (title) {
	        out += ' title="' + title + '"';
	      }

	      out += '>' + text + '</a>';
	      return out;
	    };

	    _proto.image = function image(href, title, text) {
	      href = cleanUrl$1(this.options.sanitize, this.options.baseUrl, href);

	      if (href === null) {
	        return text;
	      }

	      var out = '<img src="' + href + '" alt="' + text + '"';

	      if (title) {
	        out += ' title="' + title + '"';
	      }

	      out += this.options.xhtml ? '/>' : '>';
	      return out;
	    };

	    _proto.text = function text(_text) {
	      return _text;
	    };

	    return Renderer;
	  }();

	  /**
	   * TextRenderer
	   * returns only the textual part of the token
	   */
	  var TextRenderer_1 = /*#__PURE__*/function () {
	    function TextRenderer() {}

	    var _proto = TextRenderer.prototype;

	    // no need for block level renderers
	    _proto.strong = function strong(text) {
	      return text;
	    };

	    _proto.em = function em(text) {
	      return text;
	    };

	    _proto.codespan = function codespan(text) {
	      return text;
	    };

	    _proto.del = function del(text) {
	      return text;
	    };

	    _proto.html = function html(text) {
	      return text;
	    };

	    _proto.text = function text(_text) {
	      return _text;
	    };

	    _proto.link = function link(href, title, text) {
	      return '' + text;
	    };

	    _proto.image = function image(href, title, text) {
	      return '' + text;
	    };

	    _proto.br = function br() {
	      return '';
	    };

	    return TextRenderer;
	  }();

	  /**
	   * Slugger generates header id
	   */
	  var Slugger_1 = /*#__PURE__*/function () {
	    function Slugger() {
	      this.seen = {};
	    }

	    var _proto = Slugger.prototype;

	    _proto.serialize = function serialize(value) {
	      return value.toLowerCase().trim() // remove html tags
	      .replace(/<[!\/a-z].*?>/ig, '') // remove unwanted chars
	      .replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, '').replace(/\s/g, '-');
	    }
	    /**
	     * Finds the next safe (unique) slug to use
	     */
	    ;

	    _proto.getNextSafeSlug = function getNextSafeSlug(originalSlug, isDryRun) {
	      var slug = originalSlug;
	      var occurenceAccumulator = 0;

	      if (this.seen.hasOwnProperty(slug)) {
	        occurenceAccumulator = this.seen[originalSlug];

	        do {
	          occurenceAccumulator++;
	          slug = originalSlug + '-' + occurenceAccumulator;
	        } while (this.seen.hasOwnProperty(slug));
	      }

	      if (!isDryRun) {
	        this.seen[originalSlug] = occurenceAccumulator;
	        this.seen[slug] = 0;
	      }

	      return slug;
	    }
	    /**
	     * Convert string to unique id
	     * @param {object} options
	     * @param {boolean} options.dryrun Generates the next unique slug without updating the internal accumulator.
	     */
	    ;

	    _proto.slug = function slug(value, options) {
	      if (options === void 0) {
	        options = {};
	      }

	      var slug = this.serialize(value);
	      return this.getNextSafeSlug(slug, options.dryrun);
	    };

	    return Slugger;
	  }();

	  var defaults$4 = defaults.defaults;
	  var unescape$1 = helpers.unescape;
	  /**
	   * Parsing & Compiling
	   */

	  var Parser_1 = /*#__PURE__*/function () {
	    function Parser(options) {
	      this.options = options || defaults$4;
	      this.options.renderer = this.options.renderer || new Renderer_1();
	      this.renderer = this.options.renderer;
	      this.renderer.options = this.options;
	      this.textRenderer = new TextRenderer_1();
	      this.slugger = new Slugger_1();
	    }
	    /**
	     * Static Parse Method
	     */


	    Parser.parse = function parse(tokens, options) {
	      var parser = new Parser(options);
	      return parser.parse(tokens);
	    }
	    /**
	     * Static Parse Inline Method
	     */
	    ;

	    Parser.parseInline = function parseInline(tokens, options) {
	      var parser = new Parser(options);
	      return parser.parseInline(tokens);
	    }
	    /**
	     * Parse Loop
	     */
	    ;

	    var _proto = Parser.prototype;

	    _proto.parse = function parse(tokens, top) {
	      if (top === void 0) {
	        top = true;
	      }

	      var out = '',
	          i,
	          j,
	          k,
	          l2,
	          l3,
	          row,
	          cell,
	          header,
	          body,
	          token,
	          ordered,
	          start,
	          loose,
	          itemBody,
	          item,
	          checked,
	          task,
	          checkbox;
	      var l = tokens.length;

	      for (i = 0; i < l; i++) {
	        token = tokens[i];

	        switch (token.type) {
	          case 'space':
	            {
	              continue;
	            }

	          case 'hr':
	            {
	              out += this.renderer.hr();
	              continue;
	            }

	          case 'heading':
	            {
	              out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape$1(this.parseInline(token.tokens, this.textRenderer)), this.slugger);
	              continue;
	            }

	          case 'code':
	            {
	              out += this.renderer.code(token.text, token.lang, token.escaped);
	              continue;
	            }

	          case 'table':
	            {
	              header = ''; // header

	              cell = '';
	              l2 = token.header.length;

	              for (j = 0; j < l2; j++) {
	                cell += this.renderer.tablecell(this.parseInline(token.tokens.header[j]), {
	                  header: true,
	                  align: token.align[j]
	                });
	              }

	              header += this.renderer.tablerow(cell);
	              body = '';
	              l2 = token.cells.length;

	              for (j = 0; j < l2; j++) {
	                row = token.tokens.cells[j];
	                cell = '';
	                l3 = row.length;

	                for (k = 0; k < l3; k++) {
	                  cell += this.renderer.tablecell(this.parseInline(row[k]), {
	                    header: false,
	                    align: token.align[k]
	                  });
	                }

	                body += this.renderer.tablerow(cell);
	              }

	              out += this.renderer.table(header, body);
	              continue;
	            }

	          case 'blockquote':
	            {
	              body = this.parse(token.tokens);
	              out += this.renderer.blockquote(body);
	              continue;
	            }

	          case 'list':
	            {
	              ordered = token.ordered;
	              start = token.start;
	              loose = token.loose;
	              l2 = token.items.length;
	              body = '';

	              for (j = 0; j < l2; j++) {
	                item = token.items[j];
	                checked = item.checked;
	                task = item.task;
	                itemBody = '';

	                if (item.task) {
	                  checkbox = this.renderer.checkbox(checked);

	                  if (loose) {
	                    if (item.tokens.length > 0 && item.tokens[0].type === 'text') {
	                      item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;

	                      if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {
	                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;
	                      }
	                    } else {
	                      item.tokens.unshift({
	                        type: 'text',
	                        text: checkbox
	                      });
	                    }
	                  } else {
	                    itemBody += checkbox;
	                  }
	                }

	                itemBody += this.parse(item.tokens, loose);
	                body += this.renderer.listitem(itemBody, task, checked);
	              }

	              out += this.renderer.list(body, ordered, start);
	              continue;
	            }

	          case 'html':
	            {
	              // TODO parse inline content if parameter markdown=1
	              out += this.renderer.html(token.text);
	              continue;
	            }

	          case 'paragraph':
	            {
	              out += this.renderer.paragraph(this.parseInline(token.tokens));
	              continue;
	            }

	          case 'text':
	            {
	              body = token.tokens ? this.parseInline(token.tokens) : token.text;

	              while (i + 1 < l && tokens[i + 1].type === 'text') {
	                token = tokens[++i];
	                body += '\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);
	              }

	              out += top ? this.renderer.paragraph(body) : body;
	              continue;
	            }

	          default:
	            {
	              var errMsg = 'Token with "' + token.type + '" type was not found.';

	              if (this.options.silent) {
	                console.error(errMsg);
	                return;
	              } else {
	                throw new Error(errMsg);
	              }
	            }
	        }
	      }

	      return out;
	    }
	    /**
	     * Parse Inline Tokens
	     */
	    ;

	    _proto.parseInline = function parseInline(tokens, renderer) {
	      renderer = renderer || this.renderer;
	      var out = '',
	          i,
	          token;
	      var l = tokens.length;

	      for (i = 0; i < l; i++) {
	        token = tokens[i];

	        switch (token.type) {
	          case 'escape':
	            {
	              out += renderer.text(token.text);
	              break;
	            }

	          case 'html':
	            {
	              out += renderer.html(token.text);
	              break;
	            }

	          case 'link':
	            {
	              out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));
	              break;
	            }

	          case 'image':
	            {
	              out += renderer.image(token.href, token.title, token.text);
	              break;
	            }

	          case 'strong':
	            {
	              out += renderer.strong(this.parseInline(token.tokens, renderer));
	              break;
	            }

	          case 'em':
	            {
	              out += renderer.em(this.parseInline(token.tokens, renderer));
	              break;
	            }

	          case 'codespan':
	            {
	              out += renderer.codespan(token.text);
	              break;
	            }

	          case 'br':
	            {
	              out += renderer.br();
	              break;
	            }

	          case 'del':
	            {
	              out += renderer.del(this.parseInline(token.tokens, renderer));
	              break;
	            }

	          case 'text':
	            {
	              out += renderer.text(token.text);
	              break;
	            }

	          default:
	            {
	              var errMsg = 'Token with "' + token.type + '" type was not found.';

	              if (this.options.silent) {
	                console.error(errMsg);
	                return;
	              } else {
	                throw new Error(errMsg);
	              }
	            }
	        }
	      }

	      return out;
	    };

	    return Parser;
	  }();

	  var merge$2 = helpers.merge,
	      checkSanitizeDeprecation$1 = helpers.checkSanitizeDeprecation,
	      escape$2 = helpers.escape;
	  var getDefaults = defaults.getDefaults,
	      changeDefaults = defaults.changeDefaults,
	      defaults$5 = defaults.defaults;
	  /**
	   * Marked
	   */

	  function marked(src, opt, callback) {
	    // throw error in case of non string input
	    if (typeof src === 'undefined' || src === null) {
	      throw new Error('marked(): input parameter is undefined or null');
	    }

	    if (typeof src !== 'string') {
	      throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');
	    }

	    if (typeof opt === 'function') {
	      callback = opt;
	      opt = null;
	    }

	    opt = merge$2({}, marked.defaults, opt || {});
	    checkSanitizeDeprecation$1(opt);

	    if (callback) {
	      var highlight = opt.highlight;
	      var tokens;

	      try {
	        tokens = Lexer_1.lex(src, opt);
	      } catch (e) {
	        return callback(e);
	      }

	      var done = function done(err) {
	        var out;

	        if (!err) {
	          try {
	            out = Parser_1.parse(tokens, opt);
	          } catch (e) {
	            err = e;
	          }
	        }

	        opt.highlight = highlight;
	        return err ? callback(err) : callback(null, out);
	      };

	      if (!highlight || highlight.length < 3) {
	        return done();
	      }

	      delete opt.highlight;
	      if (!tokens.length) return done();
	      var pending = 0;
	      marked.walkTokens(tokens, function (token) {
	        if (token.type === 'code') {
	          pending++;
	          setTimeout(function () {
	            highlight(token.text, token.lang, function (err, code) {
	              if (err) {
	                return done(err);
	              }

	              if (code != null && code !== token.text) {
	                token.text = code;
	                token.escaped = true;
	              }

	              pending--;

	              if (pending === 0) {
	                done();
	              }
	            });
	          }, 0);
	        }
	      });

	      if (pending === 0) {
	        done();
	      }

	      return;
	    }

	    try {
	      var _tokens = Lexer_1.lex(src, opt);

	      if (opt.walkTokens) {
	        marked.walkTokens(_tokens, opt.walkTokens);
	      }

	      return Parser_1.parse(_tokens, opt);
	    } catch (e) {
	      e.message += '\nPlease report this to https://github.com/markedjs/marked.';

	      if (opt.silent) {
	        return '<p>An error occurred:</p><pre>' + escape$2(e.message + '', true) + '</pre>';
	      }

	      throw e;
	    }
	  }
	  /**
	   * Options
	   */


	  marked.options = marked.setOptions = function (opt) {
	    merge$2(marked.defaults, opt);
	    changeDefaults(marked.defaults);
	    return marked;
	  };

	  marked.getDefaults = getDefaults;
	  marked.defaults = defaults$5;
	  /**
	   * Use Extension
	   */

	  marked.use = function (extension) {
	    var opts = merge$2({}, extension);

	    if (extension.renderer) {
	      (function () {
	        var renderer = marked.defaults.renderer || new Renderer_1();

	        var _loop = function _loop(prop) {
	          var prevRenderer = renderer[prop];

	          renderer[prop] = function () {
	            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	              args[_key] = arguments[_key];
	            }

	            var ret = extension.renderer[prop].apply(renderer, args);

	            if (ret === false) {
	              ret = prevRenderer.apply(renderer, args);
	            }

	            return ret;
	          };
	        };

	        for (var prop in extension.renderer) {
	          _loop(prop);
	        }

	        opts.renderer = renderer;
	      })();
	    }

	    if (extension.tokenizer) {
	      (function () {
	        var tokenizer = marked.defaults.tokenizer || new Tokenizer_1();

	        var _loop2 = function _loop2(prop) {
	          var prevTokenizer = tokenizer[prop];

	          tokenizer[prop] = function () {
	            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	              args[_key2] = arguments[_key2];
	            }

	            var ret = extension.tokenizer[prop].apply(tokenizer, args);

	            if (ret === false) {
	              ret = prevTokenizer.apply(tokenizer, args);
	            }

	            return ret;
	          };
	        };

	        for (var prop in extension.tokenizer) {
	          _loop2(prop);
	        }

	        opts.tokenizer = tokenizer;
	      })();
	    }

	    if (extension.walkTokens) {
	      var walkTokens = marked.defaults.walkTokens;

	      opts.walkTokens = function (token) {
	        extension.walkTokens(token);

	        if (walkTokens) {
	          walkTokens(token);
	        }
	      };
	    }

	    marked.setOptions(opts);
	  };
	  /**
	   * Run callback for every token
	   */


	  marked.walkTokens = function (tokens, callback) {
	    for (var _iterator = _createForOfIteratorHelperLoose(tokens), _step; !(_step = _iterator()).done;) {
	      var token = _step.value;
	      callback(token);

	      switch (token.type) {
	        case 'table':
	          {
	            for (var _iterator2 = _createForOfIteratorHelperLoose(token.tokens.header), _step2; !(_step2 = _iterator2()).done;) {
	              var cell = _step2.value;
	              marked.walkTokens(cell, callback);
	            }

	            for (var _iterator3 = _createForOfIteratorHelperLoose(token.tokens.cells), _step3; !(_step3 = _iterator3()).done;) {
	              var row = _step3.value;

	              for (var _iterator4 = _createForOfIteratorHelperLoose(row), _step4; !(_step4 = _iterator4()).done;) {
	                var _cell = _step4.value;
	                marked.walkTokens(_cell, callback);
	              }
	            }

	            break;
	          }

	        case 'list':
	          {
	            marked.walkTokens(token.items, callback);
	            break;
	          }

	        default:
	          {
	            if (token.tokens) {
	              marked.walkTokens(token.tokens, callback);
	            }
	          }
	      }
	    }
	  };
	  /**
	   * Parse Inline
	   */


	  marked.parseInline = function (src, opt) {
	    // throw error in case of non string input
	    if (typeof src === 'undefined' || src === null) {
	      throw new Error('marked.parseInline(): input parameter is undefined or null');
	    }

	    if (typeof src !== 'string') {
	      throw new Error('marked.parseInline(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');
	    }

	    opt = merge$2({}, marked.defaults, opt || {});
	    checkSanitizeDeprecation$1(opt);

	    try {
	      var tokens = Lexer_1.lexInline(src, opt);

	      if (opt.walkTokens) {
	        marked.walkTokens(tokens, opt.walkTokens);
	      }

	      return Parser_1.parseInline(tokens, opt);
	    } catch (e) {
	      e.message += '\nPlease report this to https://github.com/markedjs/marked.';

	      if (opt.silent) {
	        return '<p>An error occurred:</p><pre>' + escape$2(e.message + '', true) + '</pre>';
	      }

	      throw e;
	    }
	  };
	  /**
	   * Expose
	   */


	  marked.Parser = Parser_1;
	  marked.parser = Parser_1.parse;
	  marked.Renderer = Renderer_1;
	  marked.TextRenderer = TextRenderer_1;
	  marked.Lexer = Lexer_1;
	  marked.lexer = Lexer_1.lex;
	  marked.Tokenizer = Tokenizer_1;
	  marked.Slugger = Slugger_1;
	  marked.parse = marked;
	  var marked_1 = marked;

	  return marked_1;

	})));
	});

	function noop() { }
	const identity = x => x;
	function assign(tar, src) {
	    // @ts-ignore
	    for (const k in src)
	        tar[k] = src[k];
	    return tar;
	}
	function add_location(element, file, line, column, char) {
	    element.__svelte_meta = {
	        loc: { file, line, column, char }
	    };
	}
	function run(fn) {
	    return fn();
	}
	function blank_object() {
	    return Object.create(null);
	}
	function run_all(fns) {
	    fns.forEach(run);
	}
	function is_function(thing) {
	    return typeof thing === 'function';
	}
	function safe_not_equal(a, b) {
	    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}
	function is_empty(obj) {
	    return Object.keys(obj).length === 0;
	}
	function validate_store(store, name) {
	    if (store != null && typeof store.subscribe !== 'function') {
	        throw new Error(`'${name}' is not a store with a 'subscribe' method`);
	    }
	}
	function subscribe(store, ...callbacks) {
	    if (store == null) {
	        return noop;
	    }
	    const unsub = store.subscribe(...callbacks);
	    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
	}
	function get_store_value(store) {
	    let value;
	    subscribe(store, _ => value = _)();
	    return value;
	}
	function component_subscribe(component, store, callback) {
	    component.$$.on_destroy.push(subscribe(store, callback));
	}
	function create_slot(definition, ctx, $$scope, fn) {
	    if (definition) {
	        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
	        return definition[0](slot_ctx);
	    }
	}
	function get_slot_context(definition, ctx, $$scope, fn) {
	    return definition[1] && fn
	        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
	        : $$scope.ctx;
	}
	function get_slot_changes(definition, $$scope, dirty, fn) {
	    if (definition[2] && fn) {
	        const lets = definition[2](fn(dirty));
	        if ($$scope.dirty === undefined) {
	            return lets;
	        }
	        if (typeof lets === 'object') {
	            const merged = [];
	            const len = Math.max($$scope.dirty.length, lets.length);
	            for (let i = 0; i < len; i += 1) {
	                merged[i] = $$scope.dirty[i] | lets[i];
	            }
	            return merged;
	        }
	        return $$scope.dirty | lets;
	    }
	    return $$scope.dirty;
	}
	function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
	    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
	    if (slot_changes) {
	        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
	        slot.p(slot_context, slot_changes);
	    }
	}
	function null_to_empty(value) {
	    return value == null ? '' : value;
	}
	function action_destroyer(action_result) {
	    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
	}

	const is_client = typeof window !== 'undefined';
	let now = is_client
	    ? () => window.performance.now()
	    : () => Date.now();
	let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

	const tasks = new Set();
	function run_tasks(now) {
	    tasks.forEach(task => {
	        if (!task.c(now)) {
	            tasks.delete(task);
	            task.f();
	        }
	    });
	    if (tasks.size !== 0)
	        raf(run_tasks);
	}
	/**
	 * Creates a new task that runs on each raf frame
	 * until it returns a falsy value or is aborted
	 */
	function loop(callback) {
	    let task;
	    if (tasks.size === 0)
	        raf(run_tasks);
	    return {
	        promise: new Promise(fulfill => {
	            tasks.add(task = { c: callback, f: fulfill });
	        }),
	        abort() {
	            tasks.delete(task);
	        }
	    };
	}

	function append(target, node) {
	    target.appendChild(node);
	}
	function insert(target, node, anchor) {
	    target.insertBefore(node, anchor || null);
	}
	function detach(node) {
	    node.parentNode.removeChild(node);
	}
	function destroy_each(iterations, detaching) {
	    for (let i = 0; i < iterations.length; i += 1) {
	        if (iterations[i])
	            iterations[i].d(detaching);
	    }
	}
	function element(name) {
	    return document.createElement(name);
	}
	function svg_element(name) {
	    return document.createElementNS('http://www.w3.org/2000/svg', name);
	}
	function text(data) {
	    return document.createTextNode(data);
	}
	function space() {
	    return text(' ');
	}
	function empty() {
	    return text('');
	}
	function listen(node, event, handler, options) {
	    node.addEventListener(event, handler, options);
	    return () => node.removeEventListener(event, handler, options);
	}
	function attr(node, attribute, value) {
	    if (value == null)
	        node.removeAttribute(attribute);
	    else if (node.getAttribute(attribute) !== value)
	        node.setAttribute(attribute, value);
	}
	function get_binding_group_value(group, __value, checked) {
	    const value = new Set();
	    for (let i = 0; i < group.length; i += 1) {
	        if (group[i].checked)
	            value.add(group[i].__value);
	    }
	    if (!checked) {
	        value.delete(__value);
	    }
	    return Array.from(value);
	}
	function children(element) {
	    return Array.from(element.childNodes);
	}
	function set_style(node, key, value, important) {
	    node.style.setProperty(key, value, important ? 'important' : '');
	}
	function custom_event(type, detail) {
	    const e = document.createEvent('CustomEvent');
	    e.initCustomEvent(type, false, false, detail);
	    return e;
	}
	class HtmlTag {
	    constructor(anchor = null) {
	        this.a = anchor;
	        this.e = this.n = null;
	    }
	    m(html, target, anchor = null) {
	        if (!this.e) {
	            this.e = element(target.nodeName);
	            this.t = target;
	            this.h(html);
	        }
	        this.i(anchor);
	    }
	    h(html) {
	        this.e.innerHTML = html;
	        this.n = Array.from(this.e.childNodes);
	    }
	    i(anchor) {
	        for (let i = 0; i < this.n.length; i += 1) {
	            insert(this.t, this.n[i], anchor);
	        }
	    }
	    p(html) {
	        this.d();
	        this.h(html);
	        this.i(this.a);
	    }
	    d() {
	        this.n.forEach(detach);
	    }
	}

	const active_docs = new Set();
	let active = 0;
	// https://github.com/darkskyapp/string-hash/blob/master/index.js
	function hash(str) {
	    let hash = 5381;
	    let i = str.length;
	    while (i--)
	        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
	    return hash >>> 0;
	}
	function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
	    const step = 16.666 / duration;
	    let keyframes = '{\n';
	    for (let p = 0; p <= 1; p += step) {
	        const t = a + (b - a) * ease(p);
	        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
	    }
	    const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
	    const name = `__svelte_${hash(rule)}_${uid}`;
	    const doc = node.ownerDocument;
	    active_docs.add(doc);
	    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);
	    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
	    if (!current_rules[name]) {
	        current_rules[name] = true;
	        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
	    }
	    const animation = node.style.animation || '';
	    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
	    active += 1;
	    return name;
	}
	function delete_rule(node, name) {
	    const previous = (node.style.animation || '').split(', ');
	    const next = previous.filter(name
	        ? anim => anim.indexOf(name) < 0 // remove specific animation
	        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
	    );
	    const deleted = previous.length - next.length;
	    if (deleted) {
	        node.style.animation = next.join(', ');
	        active -= deleted;
	        if (!active)
	            clear_rules();
	    }
	}
	function clear_rules() {
	    raf(() => {
	        if (active)
	            return;
	        active_docs.forEach(doc => {
	            const stylesheet = doc.__svelte_stylesheet;
	            let i = stylesheet.cssRules.length;
	            while (i--)
	                stylesheet.deleteRule(i);
	            doc.__svelte_rules = {};
	        });
	        active_docs.clear();
	    });
	}

	function create_animation(node, from, fn, params) {
	    if (!from)
	        return noop;
	    const to = node.getBoundingClientRect();
	    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
	        return noop;
	    const { delay = 0, duration = 300, easing = identity, 
	    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?
	    start: start_time = now() + delay, 
	    // @ts-ignore todo:
	    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);
	    let running = true;
	    let started = false;
	    let name;
	    function start() {
	        if (css) {
	            name = create_rule(node, 0, 1, duration, delay, easing, css);
	        }
	        if (!delay) {
	            started = true;
	        }
	    }
	    function stop() {
	        if (css)
	            delete_rule(node, name);
	        running = false;
	    }
	    loop(now => {
	        if (!started && now >= start_time) {
	            started = true;
	        }
	        if (started && now >= end) {
	            tick(1, 0);
	            stop();
	        }
	        if (!running) {
	            return false;
	        }
	        if (started) {
	            const p = now - start_time;
	            const t = 0 + 1 * easing(p / duration);
	            tick(t, 1 - t);
	        }
	        return true;
	    });
	    start();
	    tick(0, 1);
	    return stop;
	}
	function fix_position(node) {
	    const style = getComputedStyle(node);
	    if (style.position !== 'absolute' && style.position !== 'fixed') {
	        const { width, height } = style;
	        const a = node.getBoundingClientRect();
	        node.style.position = 'absolute';
	        node.style.width = width;
	        node.style.height = height;
	        add_transform(node, a);
	    }
	}
	function add_transform(node, a) {
	    const b = node.getBoundingClientRect();
	    if (a.left !== b.left || a.top !== b.top) {
	        const style = getComputedStyle(node);
	        const transform = style.transform === 'none' ? '' : style.transform;
	        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
	    }
	}

	let current_component;
	function set_current_component(component) {
	    current_component = component;
	}
	function get_current_component() {
	    if (!current_component)
	        throw new Error('Function called outside component initialization');
	    return current_component;
	}

	const dirty_components = [];
	const binding_callbacks = [];
	const render_callbacks = [];
	const flush_callbacks = [];
	const resolved_promise = Promise.resolve();
	let update_scheduled = false;
	function schedule_update() {
	    if (!update_scheduled) {
	        update_scheduled = true;
	        resolved_promise.then(flush);
	    }
	}
	function add_render_callback(fn) {
	    render_callbacks.push(fn);
	}
	function add_flush_callback(fn) {
	    flush_callbacks.push(fn);
	}
	let flushing = false;
	const seen_callbacks = new Set();
	function flush() {
	    if (flushing)
	        return;
	    flushing = true;
	    do {
	        // first, call beforeUpdate functions
	        // and update components
	        for (let i = 0; i < dirty_components.length; i += 1) {
	            const component = dirty_components[i];
	            set_current_component(component);
	            update(component.$$);
	        }
	        set_current_component(null);
	        dirty_components.length = 0;
	        while (binding_callbacks.length)
	            binding_callbacks.pop()();
	        // then, once components are updated, call
	        // afterUpdate functions. This may cause
	        // subsequent updates...
	        for (let i = 0; i < render_callbacks.length; i += 1) {
	            const callback = render_callbacks[i];
	            if (!seen_callbacks.has(callback)) {
	                // ...so guard against infinite loops
	                seen_callbacks.add(callback);
	                callback();
	            }
	        }
	        render_callbacks.length = 0;
	    } while (dirty_components.length);
	    while (flush_callbacks.length) {
	        flush_callbacks.pop()();
	    }
	    update_scheduled = false;
	    flushing = false;
	    seen_callbacks.clear();
	}
	function update($$) {
	    if ($$.fragment !== null) {
	        $$.update();
	        run_all($$.before_update);
	        const dirty = $$.dirty;
	        $$.dirty = [-1];
	        $$.fragment && $$.fragment.p($$.ctx, dirty);
	        $$.after_update.forEach(add_render_callback);
	    }
	}

	let promise;
	function wait() {
	    if (!promise) {
	        promise = Promise.resolve();
	        promise.then(() => {
	            promise = null;
	        });
	    }
	    return promise;
	}
	function dispatch(node, direction, kind) {
	    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
	}
	const outroing = new Set();
	let outros;
	function group_outros() {
	    outros = {
	        r: 0,
	        c: [],
	        p: outros // parent group
	    };
	}
	function check_outros() {
	    if (!outros.r) {
	        run_all(outros.c);
	    }
	    outros = outros.p;
	}
	function transition_in(block, local) {
	    if (block && block.i) {
	        outroing.delete(block);
	        block.i(local);
	    }
	}
	function transition_out(block, local, detach, callback) {
	    if (block && block.o) {
	        if (outroing.has(block))
	            return;
	        outroing.add(block);
	        outros.c.push(() => {
	            outroing.delete(block);
	            if (callback) {
	                if (detach)
	                    block.d(1);
	                callback();
	            }
	        });
	        block.o(local);
	    }
	}
	const null_transition = { duration: 0 };
	function create_in_transition(node, fn, params) {
	    let config = fn(node, params);
	    let running = false;
	    let animation_name;
	    let task;
	    let uid = 0;
	    function cleanup() {
	        if (animation_name)
	            delete_rule(node, animation_name);
	    }
	    function go() {
	        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
	        if (css)
	            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
	        tick(0, 1);
	        const start_time = now() + delay;
	        const end_time = start_time + duration;
	        if (task)
	            task.abort();
	        running = true;
	        add_render_callback(() => dispatch(node, true, 'start'));
	        task = loop(now => {
	            if (running) {
	                if (now >= end_time) {
	                    tick(1, 0);
	                    dispatch(node, true, 'end');
	                    cleanup();
	                    return running = false;
	                }
	                if (now >= start_time) {
	                    const t = easing((now - start_time) / duration);
	                    tick(t, 1 - t);
	                }
	            }
	            return running;
	        });
	    }
	    let started = false;
	    return {
	        start() {
	            if (started)
	                return;
	            delete_rule(node);
	            if (is_function(config)) {
	                config = config();
	                wait().then(go);
	            }
	            else {
	                go();
	            }
	        },
	        invalidate() {
	            started = false;
	        },
	        end() {
	            if (running) {
	                cleanup();
	                running = false;
	            }
	        }
	    };
	}
	function create_out_transition(node, fn, params) {
	    let config = fn(node, params);
	    let running = true;
	    let animation_name;
	    const group = outros;
	    group.r += 1;
	    function go() {
	        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
	        if (css)
	            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
	        const start_time = now() + delay;
	        const end_time = start_time + duration;
	        add_render_callback(() => dispatch(node, false, 'start'));
	        loop(now => {
	            if (running) {
	                if (now >= end_time) {
	                    tick(0, 1);
	                    dispatch(node, false, 'end');
	                    if (!--group.r) {
	                        // this will result in `end()` being called,
	                        // so we don't need to clean up here
	                        run_all(group.c);
	                    }
	                    return false;
	                }
	                if (now >= start_time) {
	                    const t = easing((now - start_time) / duration);
	                    tick(1 - t, t);
	                }
	            }
	            return running;
	        });
	    }
	    if (is_function(config)) {
	        wait().then(() => {
	            // @ts-ignore
	            config = config();
	            go();
	        });
	    }
	    else {
	        go();
	    }
	    return {
	        end(reset) {
	            if (reset && config.tick) {
	                config.tick(1, 0);
	            }
	            if (running) {
	                if (animation_name)
	                    delete_rule(node, animation_name);
	                running = false;
	            }
	        }
	    };
	}

	const globals = (typeof window !== 'undefined'
	    ? window
	    : typeof globalThis !== 'undefined'
	        ? globalThis
	        : global);

	function destroy_block(block, lookup) {
	    block.d(1);
	    lookup.delete(block.key);
	}
	function outro_and_destroy_block(block, lookup) {
	    transition_out(block, 1, 1, () => {
	        lookup.delete(block.key);
	    });
	}
	function fix_and_destroy_block(block, lookup) {
	    block.f();
	    destroy_block(block, lookup);
	}
	function fix_and_outro_and_destroy_block(block, lookup) {
	    block.f();
	    outro_and_destroy_block(block, lookup);
	}
	function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
	    let o = old_blocks.length;
	    let n = list.length;
	    let i = o;
	    const old_indexes = {};
	    while (i--)
	        old_indexes[old_blocks[i].key] = i;
	    const new_blocks = [];
	    const new_lookup = new Map();
	    const deltas = new Map();
	    i = n;
	    while (i--) {
	        const child_ctx = get_context(ctx, list, i);
	        const key = get_key(child_ctx);
	        let block = lookup.get(key);
	        if (!block) {
	            block = create_each_block(key, child_ctx);
	            block.c();
	        }
	        else if (dynamic) {
	            block.p(child_ctx, dirty);
	        }
	        new_lookup.set(key, new_blocks[i] = block);
	        if (key in old_indexes)
	            deltas.set(key, Math.abs(i - old_indexes[key]));
	    }
	    const will_move = new Set();
	    const did_move = new Set();
	    function insert(block) {
	        transition_in(block, 1);
	        block.m(node, next);
	        lookup.set(block.key, block);
	        next = block.first;
	        n--;
	    }
	    while (o && n) {
	        const new_block = new_blocks[n - 1];
	        const old_block = old_blocks[o - 1];
	        const new_key = new_block.key;
	        const old_key = old_block.key;
	        if (new_block === old_block) {
	            // do nothing
	            next = new_block.first;
	            o--;
	            n--;
	        }
	        else if (!new_lookup.has(old_key)) {
	            // remove old block
	            destroy(old_block, lookup);
	            o--;
	        }
	        else if (!lookup.has(new_key) || will_move.has(new_key)) {
	            insert(new_block);
	        }
	        else if (did_move.has(old_key)) {
	            o--;
	        }
	        else if (deltas.get(new_key) > deltas.get(old_key)) {
	            did_move.add(new_key);
	            insert(new_block);
	        }
	        else {
	            will_move.add(old_key);
	            o--;
	        }
	    }
	    while (o--) {
	        const old_block = old_blocks[o];
	        if (!new_lookup.has(old_block.key))
	            destroy(old_block, lookup);
	    }
	    while (n)
	        insert(new_blocks[n - 1]);
	    return new_blocks;
	}
	function validate_each_keys(ctx, list, get_context, get_key) {
	    const keys = new Set();
	    for (let i = 0; i < list.length; i++) {
	        const key = get_key(get_context(ctx, list, i));
	        if (keys.has(key)) {
	            throw new Error('Cannot have duplicate keys in a keyed each');
	        }
	        keys.add(key);
	    }
	}

	function bind(component, name, callback) {
	    const index = component.$$.props[name];
	    if (index !== undefined) {
	        component.$$.bound[index] = callback;
	        callback(component.$$.ctx[index]);
	    }
	}
	function create_component(block) {
	    block && block.c();
	}
	function mount_component(component, target, anchor) {
	    const { fragment, on_mount, on_destroy, after_update } = component.$$;
	    fragment && fragment.m(target, anchor);
	    // onMount happens before the initial afterUpdate
	    add_render_callback(() => {
	        const new_on_destroy = on_mount.map(run).filter(is_function);
	        if (on_destroy) {
	            on_destroy.push(...new_on_destroy);
	        }
	        else {
	            // Edge case - component was destroyed immediately,
	            // most likely as a result of a binding initialising
	            run_all(new_on_destroy);
	        }
	        component.$$.on_mount = [];
	    });
	    after_update.forEach(add_render_callback);
	}
	function destroy_component(component, detaching) {
	    const $$ = component.$$;
	    if ($$.fragment !== null) {
	        run_all($$.on_destroy);
	        $$.fragment && $$.fragment.d(detaching);
	        // TODO null out other refs, including component.$$ (but need to
	        // preserve final state?)
	        $$.on_destroy = $$.fragment = null;
	        $$.ctx = [];
	    }
	}
	function make_dirty(component, i) {
	    if (component.$$.dirty[0] === -1) {
	        dirty_components.push(component);
	        schedule_update();
	        component.$$.dirty.fill(0);
	    }
	    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
	}
	function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
	    const parent_component = current_component;
	    set_current_component(component);
	    const $$ = component.$$ = {
	        fragment: null,
	        ctx: null,
	        // state
	        props,
	        update: noop,
	        not_equal,
	        bound: blank_object(),
	        // lifecycle
	        on_mount: [],
	        on_destroy: [],
	        before_update: [],
	        after_update: [],
	        context: new Map(parent_component ? parent_component.$$.context : []),
	        // everything else
	        callbacks: blank_object(),
	        dirty,
	        skip_bound: false
	    };
	    let ready = false;
	    $$.ctx = instance
	        ? instance(component, options.props || {}, (i, ret, ...rest) => {
	            const value = rest.length ? rest[0] : ret;
	            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
	                if (!$$.skip_bound && $$.bound[i])
	                    $$.bound[i](value);
	                if (ready)
	                    make_dirty(component, i);
	            }
	            return ret;
	        })
	        : [];
	    $$.update();
	    ready = true;
	    run_all($$.before_update);
	    // `false` as a special case of no DOM component
	    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
	    if (options.target) {
	        if (options.hydrate) {
	            const nodes = children(options.target);
	            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
	            $$.fragment && $$.fragment.l(nodes);
	            nodes.forEach(detach);
	        }
	        else {
	            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
	            $$.fragment && $$.fragment.c();
	        }
	        if (options.intro)
	            transition_in(component.$$.fragment);
	        mount_component(component, options.target, options.anchor);
	        flush();
	    }
	    set_current_component(parent_component);
	}
	/**
	 * Base class for Svelte components. Used when dev=false.
	 */
	class SvelteComponent {
	    $destroy() {
	        destroy_component(this, 1);
	        this.$destroy = noop;
	    }
	    $on(type, callback) {
	        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
	        callbacks.push(callback);
	        return () => {
	            const index = callbacks.indexOf(callback);
	            if (index !== -1)
	                callbacks.splice(index, 1);
	        };
	    }
	    $set($$props) {
	        if (this.$$set && !is_empty($$props)) {
	            this.$$.skip_bound = true;
	            this.$$set($$props);
	            this.$$.skip_bound = false;
	        }
	    }
	}

	function dispatch_dev(type, detail) {
	    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.32.3' }, detail)));
	}
	function append_dev(target, node) {
	    dispatch_dev('SvelteDOMInsert', { target, node });
	    append(target, node);
	}
	function insert_dev(target, node, anchor) {
	    dispatch_dev('SvelteDOMInsert', { target, node, anchor });
	    insert(target, node, anchor);
	}
	function detach_dev(node) {
	    dispatch_dev('SvelteDOMRemove', { node });
	    detach(node);
	}
	function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
	    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
	    if (has_prevent_default)
	        modifiers.push('preventDefault');
	    if (has_stop_propagation)
	        modifiers.push('stopPropagation');
	    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
	    const dispose = listen(node, event, handler, options);
	    return () => {
	        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
	        dispose();
	    };
	}
	function attr_dev(node, attribute, value) {
	    attr(node, attribute, value);
	    if (value == null)
	        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
	    else
	        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
	}
	function prop_dev(node, property, value) {
	    node[property] = value;
	    dispatch_dev('SvelteDOMSetProperty', { node, property, value });
	}
	function set_data_dev(text, data) {
	    data = '' + data;
	    if (text.wholeText === data)
	        return;
	    dispatch_dev('SvelteDOMSetData', { node: text, data });
	    text.data = data;
	}
	function validate_each_argument(arg) {
	    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
	        let msg = '{#each} only iterates over array-like objects.';
	        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
	            msg += ' You can use a spread to convert this iterable into an array.';
	        }
	        throw new Error(msg);
	    }
	}
	function validate_slots(name, slot, keys) {
	    for (const slot_key of Object.keys(slot)) {
	        if (!~keys.indexOf(slot_key)) {
	            console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
	        }
	    }
	}
	/**
	 * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
	 */
	class SvelteComponentDev extends SvelteComponent {
	    constructor(options) {
	        if (!options || (!options.target && !options.$$inline)) {
	            throw new Error("'target' is a required option");
	        }
	        super();
	    }
	    $destroy() {
	        super.$destroy();
	        this.$destroy = () => {
	            console.warn('Component was already destroyed'); // eslint-disable-line no-console
	        };
	    }
	    $capture_state() { }
	    $inject_state() { }
	}

	const subscriber_queue = [];
	/**
	 * Create a `Writable` store that allows both updating and reading by subscription.
	 * @param {*=}value initial value
	 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
	 */
	function writable(value, start = noop) {
	    let stop;
	    const subscribers = [];
	    function set(new_value) {
	        if (safe_not_equal(value, new_value)) {
	            value = new_value;
	            if (stop) { // store is ready
	                const run_queue = !subscriber_queue.length;
	                for (let i = 0; i < subscribers.length; i += 1) {
	                    const s = subscribers[i];
	                    s[1]();
	                    subscriber_queue.push(s, value);
	                }
	                if (run_queue) {
	                    for (let i = 0; i < subscriber_queue.length; i += 2) {
	                        subscriber_queue[i][0](subscriber_queue[i + 1]);
	                    }
	                    subscriber_queue.length = 0;
	                }
	            }
	        }
	    }
	    function update(fn) {
	        set(fn(value));
	    }
	    function subscribe(run, invalidate = noop) {
	        const subscriber = [run, invalidate];
	        subscribers.push(subscriber);
	        if (subscribers.length === 1) {
	            stop = start(set) || noop;
	        }
	        run(value);
	        return () => {
	            const index = subscribers.indexOf(subscriber);
	            if (index !== -1) {
	                subscribers.splice(index, 1);
	            }
	            if (subscribers.length === 0) {
	                stop();
	                stop = null;
	            }
	        };
	    }
	    return { set, update, subscribe };
	}

	// Gets all non-builtin properties up the prototype chain
	const getAllProperties = object => {
		const properties = new Set();

		do {
			for (const key of Reflect.ownKeys(object)) {
				properties.add([object, key]);
			}
		} while ((object = Reflect.getPrototypeOf(object)) && object !== Object.prototype);

		return properties;
	};

	var autoBind = (self, {include, exclude} = {}) => {
		const filter = key => {
			const match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);

			if (include) {
				return include.some(match);
			}

			if (exclude) {
				return !exclude.some(match);
			}

			return true;
		};

		for (const [object, key] of getAllProperties(self.constructor.prototype)) {
			if (key === 'constructor' || !filter(key)) {
				continue;
			}

			const descriptor = Reflect.getOwnPropertyDescriptor(object, key);
			if (descriptor && typeof descriptor.value === 'function') {
				self[key] = self[key].bind(self);
			}
		}

		return self;
	};

	class BaseQuestion {
	    constructor(text, explanation, hint, answers, type) {
	        if (answers.length === 0) {
	            throw 'no answers for question provided';
	        }
	        this.text = text;
	        this.explanation = explanation;
	        this.hint = hint;
	        this.solved = false;
	        this.answers = BaseQuestion.shuffle(answers);
	        this.selected = [];
	        this.type = type;
	        autoBind(this);
	    }
	    static is_equal(a1, a2) {
	        return JSON.stringify(a1) === JSON.stringify(a2);
	    }
	    static shuffle(array) {
	        // https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array
	        let currentIndex = array.length, temporaryValue, randomIndex;
	        // While there remain elements to shuffle...
	        while (0 !== currentIndex) {
	            // Pick a remaining element...
	            randomIndex = Math.floor(Math.random() * currentIndex);
	            currentIndex -= 1;
	            // And swap it with the current element.
	            temporaryValue = array[currentIndex];
	            array[currentIndex] = array[randomIndex];
	            array[randomIndex] = temporaryValue;
	        }
	        return array;
	    }
	    reset() {
	        this.selected = [];
	        this.solved = false;
	        BaseQuestion.shuffle(this.answers);
	    }
	}
	class Sequence extends BaseQuestion {
	    constructor(text, explanation, hint, answers) {
	        super(text, explanation, hint, answers, 'Sequence');
	    }
	    check() {
	        // extract answer ids from answers
	        let true_answer_ids = this.answers.map((answer) => answer.id);
	        this.solved = BaseQuestion.is_equal(true_answer_ids.sort(), this.selected);
	    }
	}
	class MultipleChoice extends BaseQuestion {
	    constructor(text, explanation, hint, answers) {
	        super(text, explanation, hint, answers, 'MultipleChoice');
	    }
	    check() {
	        let true_answer_ids = this.answers
	            .map((answer, i) => i)
	            .filter((i) => this.answers[i].correct);
	        this.solved = BaseQuestion.is_equal(true_answer_ids.sort(), this.selected.sort());
	    }
	}
	class Answer {
	    constructor(id, html, correct) {
	        this.html = html;
	        this.correct = correct;
	        this.id = id;
	        autoBind(this);
	    }
	}
	class Counter {
	    constructor(max) {
	        this.val = writable(0);
	        this.max = max;
	        this.subscribe = this.val.subscribe;
	        autoBind(this);
	    }
	    jump(i) {
	        this.val.set(i);
	    }
	    next() {
	        this.val.update((val) => (val < this.max - 1 ? val + 1 : val));
	    }
	    previous() {
	        this.val.update((val) => (val > 0 ? val - 1 : val));
	    }
	    reset() {
	        // trigger a change
	        if (get_store_value(this.val) == 0)
	            this.val.set(1);
	        this.val.set(0);
	    }
	}
	class Quiz {
	    constructor(questions) {
	        if (questions.length == 0) {
	            throw 'No questions for quiz provided';
	        }
	        this.questions = questions;
	        this.counter = new Counter(this.questions.length);
	        this.finished = writable(false);
	        this.points = 0;
	        autoBind(this);
	    }
	    current() {
	        let n = get_store_value(this.counter);
	        return this.questions[n];
	    }
	    next() {
	        this.counter.next();
	    }
	    previous() {
	        this.counter.previous();
	    }
	    reset() {
	        this.counter.reset();
	        this.questions.forEach((q) => q.reset());
	        this.finished.set(false);
	    }
	    calc_points() {
	        this.finished.set(true);
	        var points = 0;
	        for (var q of this.questions) {
	            q.check();
	            if (q.solved)
	                points++;
	        }
	        this.points = points;
	    }
	}

	/* src/slots/Headline.svelte generated by Svelte v3.32.3 */

	const { Error: Error$, Object: Object$, console: console$ } = globals;
	const file$ = "src/slots/Headline.svelte";

	function create_fragment(ctx) {
		let div$;
		let current;
		const default_slot_template$ = /*#slots*/ ctx[1].default;
		const default_slot$ = create_slot(default_slot_template$, ctx, /*$$scope*/ ctx[0], null);

		const block$ = {
			c: function create() {
				div$ = element("div");
				if (default_slot$) default_slot$.c();
				attr_dev(div$, "class", "quizdown-title svelte-1dpt52i");
				add_location(div$, file$, 13, 0, 238);
			},
			l: function claim(nodes) {
				throw new Error$("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div$, anchor);

				if (default_slot$) {
					default_slot$.m(div$, null);
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (default_slot$) {
					if (default_slot$.p && dirty & /*$$scope*/ 1) {
						update_slot(default_slot$, default_slot_template$, ctx, /*$$scope*/ ctx[0], dirty, null, null);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot$, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot$, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(div$);
				if (default_slot$) default_slot$.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_fragment.name,
			type: "component",
			source: "",
			ctx
		});

		return block$;
	}

	function instance$($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots("Headline", slots, ['default']);
		const writable_props = [];

		Object$.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console$.warn(`<Headline> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
		};

		return [$$scope, slots];
	}

	class Headline$ extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$, create_fragment, safe_not_equal, {});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Headline$",
				options,
				id: create_fragment.name
			});
		}
	}

	/* src/components/ResultSection.svelte generated by Svelte v3.32.3 */

	const { Error: Error$$1, Object: Object$$1, console: console$$1 } = globals;
	const file$$1 = "src/components/ResultSection.svelte";

	function get_each_context$(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[5] = list[i];
		child_ctx[7] = i;
		return child_ctx;
	}

	// (12:0) <Headline>
	function create_default_slot$(ctx) {
		let h3$;

		const block$ = {
			c: function create() {
				h3$ = element("h3");
				h3$.textContent = "Quiz Results";
				add_location(h3$, file$$1, 12, 4, 238);
			},
			m: function mount(target, anchor) {
				insert_dev(target, h3$, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(h3$);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_default_slot$.name,
			type: "slot",
			source: "(12:0) <Headline>",
			ctx
		});

		return block$;
	}

	// (20:1) {#each quiz.questions as question, i}
	function create_each_block$(ctx) {
		let li$;
		let t0$_value$ = /*emojis*/ ctx[1][+/*question*/ ctx[5].solved] + "";
		let t0$;
		let t1$;
		let html_tag$;
		let raw$_value$ = /*question*/ ctx[5].text + "";
		let mounted;
		let dispose;

		function click_handler$() {
			return /*click_handler$*/ ctx[3](/*i*/ ctx[7]);
		}

		const block$ = {
			c: function create() {
				li$ = element("li");
				t0$ = text(t0$_value$);
				t1$ = text(" - ");
				html_tag$ = new HtmlTag(null);
				attr_dev(li$, "class", "svelte-140snxc");
				add_location(li$, file$$1, 20, 2, 400);
			},
			m: function mount(target, anchor) {
				insert_dev(target, li$, anchor);
				append_dev(li$, t0$);
				append_dev(li$, t1$);
				html_tag$.m(raw$_value$, li$);

				if (!mounted) {
					dispose = listen_dev(li$, "click", click_handler$, false, false, false);
					mounted = true;
				}
			},
			p: function update(new_ctx, dirty) {
				ctx = new_ctx;
				if (dirty & /*quiz*/ 1 && t0$_value$ !== (t0$_value$ = /*emojis*/ ctx[1][+/*question*/ ctx[5].solved] + "")) set_data_dev(t0$, t0$_value$);
				if (dirty & /*quiz*/ 1 && raw$_value$ !== (raw$_value$ = /*question*/ ctx[5].text + "")) html_tag$.p(raw$_value$);
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(li$);
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_each_block$.name,
			type: "each",
			source: "(20:1) {#each quiz.questions as question, i}",
			ctx
		});

		return block$;
	}

	function create_fragment$1(ctx) {
		let headline$;
		let t0$;
		let t1$_value$ = /*quiz*/ ctx[0].points + "";
		let t1$;
		let t2$;
		let t3$_value$ = /*quiz*/ ctx[0].counter.max + "";
		let t3$;
		let t4$;
		let ul$;
		let current;

		headline$ = new Headline$({
				props: {
					$$slots: { default: [create_default_slot$] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		let each_value$ = /*quiz*/ ctx[0].questions;
		validate_each_argument(each_value$);
		let each_blocks$ = [];

		for (let i = 0; i < each_value$.length; i += 1) {
			each_blocks$[i] = create_each_block$(get_each_context$(ctx, each_value$, i));
		}

		const block$ = {
			c: function create() {
				create_component(headline$.$$.fragment);
				t0$ = text("\n\n\nYou have answered ");
				t1$ = text(t1$_value$);
				t2$ = text(" out of ");
				t3$ = text(t3$_value$);
				t4$ = text(" questions correctly!\n\n");
				ul$ = element("ul");

				for (let i = 0; i < each_blocks$.length; i += 1) {
					each_blocks$[i].c();
				}

				add_location(ul$, file$$1, 18, 0, 354);
			},
			l: function claim(nodes) {
				throw new Error$$1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(headline$, target, anchor);
				insert_dev(target, t0$, anchor);
				insert_dev(target, t1$, anchor);
				insert_dev(target, t2$, anchor);
				insert_dev(target, t3$, anchor);
				insert_dev(target, t4$, anchor);
				insert_dev(target, ul$, anchor);

				for (let i = 0; i < each_blocks$.length; i += 1) {
					each_blocks$[i].m(ul$, null);
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				const headline$_changes$ = {};

				if (dirty & /*$$scope*/ 256) {
					headline$_changes$.$$scope = { dirty, ctx };
				}

				headline$.$set(headline$_changes$);
				if ((!current || dirty & /*quiz*/ 1) && t1$_value$ !== (t1$_value$ = /*quiz*/ ctx[0].points + "")) set_data_dev(t1$, t1$_value$);
				if ((!current || dirty & /*quiz*/ 1) && t3$_value$ !== (t3$_value$ = /*quiz*/ ctx[0].counter.max + "")) set_data_dev(t3$, t3$_value$);

				if (dirty & /*jump, quiz, emojis*/ 7) {
					each_value$ = /*quiz*/ ctx[0].questions;
					validate_each_argument(each_value$);
					let i;

					for (i = 0; i < each_value$.length; i += 1) {
						const child_ctx = get_each_context$(ctx, each_value$, i);

						if (each_blocks$[i]) {
							each_blocks$[i].p(child_ctx, dirty);
						} else {
							each_blocks$[i] = create_each_block$(child_ctx);
							each_blocks$[i].c();
							each_blocks$[i].m(ul$, null);
						}
					}

					for (; i < each_blocks$.length; i += 1) {
						each_blocks$[i].d(1);
					}

					each_blocks$.length = each_value$.length;
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(headline$.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(headline$.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(headline$, detaching);
				if (detaching) detach_dev(t0$);
				if (detaching) detach_dev(t1$);
				if (detaching) detach_dev(t2$);
				if (detaching) detach_dev(t3$);
				if (detaching) detach_dev(t4$);
				if (detaching) detach_dev(ul$);
				destroy_each(each_blocks$, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_fragment$1.name,
			type: "component",
			source: "",
			ctx
		});

		return block$;
	}

	function instance$$1($$self, $$props, $$invalidate) {
		let counter;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots("ResultSection", slots, []);
		
		let { quiz } = $$props;
		let emojis = ["☹️", "😀"];

		function jump(i) {
			quiz.finished.set(false);
			counter.jump(i);
		}

		const writable_props = ["quiz"];

		Object$$1.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console$$1.warn(`<ResultSection> was created with unknown prop '${key}'`);
		});

		const click_handler$ = i => jump(i);

		$$self.$$set = $$props => {
			if ("quiz" in $$props) $$invalidate(0, quiz = $$props.quiz);
		};

		$$self.$capture_state = () => ({ Headline: Headline$, quiz, emojis, jump, counter });

		$$self.$inject_state = $$props => {
			if ("quiz" in $$props) $$invalidate(0, quiz = $$props.quiz);
			if ("emojis" in $$props) $$invalidate(1, emojis = $$props.emojis);
			if ("counter" in $$props) counter = $$props.counter;
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*quiz*/ 1) {
				counter = quiz.counter;
			}
		};

		return [quiz, emojis, jump, click_handler$];
	}

	class ResultSection$ extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$$1, create_fragment$1, safe_not_equal, { quiz: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "ResultSection$",
				options,
				id: create_fragment$1.name
			});

			const { ctx } = this.$$;
			const props = options.props || {};

			if (/*quiz*/ ctx[0] === undefined && !("quiz" in props)) {
				console$$1.warn("<ResultSection> was created without expected prop 'quiz'");
			}
		}

		get quiz() {
			throw new Error$$1("<ResultSection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set quiz(value) {
			throw new Error$$1("<ResultSection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	function cubicOut(t) {
	    const f = t - 1.0;
	    return f * f * f + 1.0;
	}
	function elasticOut(t) {
	    return (Math.sin((-13.0 * (t + 1.0) * Math.PI) / 2) * Math.pow(2.0, -10.0 * t) + 1.0);
	}
	function quintOut(t) {
	    return --t * t * t * t * t + 1;
	}

	function flip(node, animation, params = {}) {
	    const style = getComputedStyle(node);
	    const transform = style.transform === 'none' ? '' : style.transform;
	    const scaleX = animation.from.width / node.clientWidth;
	    const scaleY = animation.from.height / node.clientHeight;
	    const dx = (animation.from.left - animation.to.left) / scaleX;
	    const dy = (animation.from.top - animation.to.top) / scaleY;
	    const d = Math.sqrt(dx * dx + dy * dy);
	    const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;
	    return {
	        delay,
	        duration: is_function(duration) ? duration(d) : duration,
	        easing,
	        css: (_t, u) => `transform: ${transform} translate(${u * dx}px, ${u * dy}px);`
	    };
	}

	/* node_modules/svelte-dragdroplist/DragDropList.svelte generated by Svelte v3.32.3 */

	const { Error: Error$$2, Map: Map$, Object: Object$$2, console: console$$2 } = globals;
	const file$$2 = "node_modules/svelte-dragdroplist/DragDropList.svelte";

	function get_each_context$$1(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[27] = list[i];
		child_ctx[29] = i;
		return child_ctx;
	}

	// (212:20) {:else}
	function create_else_block$(ctx) {
		let p$;
		let t$_value$ = /*datum*/ ctx[27] + "";
		let t$;

		const block$ = {
			c: function create() {
				p$ = element("p");
				t$ = text(t$_value$);
				add_location(p$, file$$2, 212, 24, 6897);
			},
			m: function mount(target, anchor) {
				insert_dev(target, p$, anchor);
				append_dev(p$, t$);
			},
			p: function update(ctx, dirty) {
				if (dirty & /*data*/ 1 && t$_value$ !== (t$_value$ = /*datum*/ ctx[27] + "")) set_data_dev(t$, t$_value$);
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(p$);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_else_block$.name,
			type: "else",
			source: "(212:20) {:else}",
			ctx
		});

		return block$;
	}

	// (210:41) 
	function create_if_block$_2(ctx) {
		let p$;
		let t$_value$ = /*datum*/ ctx[27].text + "";
		let t$;

		const block$ = {
			c: function create() {
				p$ = element("p");
				t$ = text(t$_value$);
				add_location(p$, file$$2, 210, 24, 6825);
			},
			m: function mount(target, anchor) {
				insert_dev(target, p$, anchor);
				append_dev(p$, t$);
			},
			p: function update(ctx, dirty) {
				if (dirty & /*data*/ 1 && t$_value$ !== (t$_value$ = /*datum*/ ctx[27].text + "")) set_data_dev(t$, t$_value$);
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(p$);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_if_block$_2.name,
			type: "if",
			source: "(210:41) ",
			ctx
		});

		return block$;
	}

	// (208:20) {#if datum.html}
	function create_if_block$_1(ctx) {
		let html_tag$;
		let raw$_value$ = /*datum*/ ctx[27].html + "";
		let html_anchor$;

		const block$ = {
			c: function create() {
				html_anchor$ = empty();
				html_tag$ = new HtmlTag(html_anchor$);
			},
			m: function mount(target, anchor) {
				html_tag$.m(raw$_value$, target, anchor);
				insert_dev(target, html_anchor$, anchor);
			},
			p: function update(ctx, dirty) {
				if (dirty & /*data*/ 1 && raw$_value$ !== (raw$_value$ = /*datum*/ ctx[27].html + "")) html_tag$.p(raw$_value$);
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(html_anchor$);
				if (detaching) html_tag$.d();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_if_block$_1.name,
			type: "if",
			source: "(208:20) {#if datum.html}",
			ctx
		});

		return block$;
	}

	// (218:20) {#if removesItems}
	function create_if_block$(ctx) {
		let button$;
		let svg$;
		let path0$;
		let path1$;
		let mounted;
		let dispose;

		function click_handler$_2(...args) {
			return /*click_handler$_2*/ ctx[17](/*i*/ ctx[29], ...args);
		}

		const block$ = {
			c: function create() {
				button$ = element("button");
				svg$ = svg_element("svg");
				path0$ = svg_element("path");
				path1$ = svg_element("path");
				attr_dev(path0$, "d", "M0 0h24v24H0z");
				attr_dev(path0$, "fill", "none");
				add_location(path0$, file$$2, 220, 111, 7260);
				attr_dev(path1$, "d", "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z");
				add_location(path1$, file$$2, 220, 148, 7297);
				attr_dev(svg$, "xmlns", "http://www.w3.org/2000/svg");
				attr_dev(svg$, "height", "16");
				attr_dev(svg$, "viewBox", "0 0 24 24");
				attr_dev(svg$, "width", "16");
				add_location(svg$, file$$2, 220, 28, 7177);
				attr_dev(button$, "class", "svelte-1g3zabj");
				add_location(button$, file$$2, 218, 24, 7070);
			},
			m: function mount(target, anchor) {
				insert_dev(target, button$, anchor);
				append_dev(button$, svg$);
				append_dev(svg$, path0$);
				append_dev(svg$, path1$);

				if (!mounted) {
					dispose = listen_dev(button$, "click", click_handler$_2, false, false, false);
					mounted = true;
				}
			},
			p: function update(new_ctx, dirty) {
				ctx = new_ctx;
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(button$);
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_if_block$.name,
			type: "if",
			source: "(218:20) {#if removesItems}",
			ctx
		});

		return block$;
	}

	// (180:8) {#each data as datum, i (datum.id ? datum.id : JSON.stringify(datum))}
	function create_each_block$$1(key$_1, ctx) {
		let div3$;
		let div0$;
		let button0$;
		let svg0$;
		let path0$;
		let path1$;
		let button0$_style_value$;
		let t0$;
		let button1$;
		let svg1$;
		let path2$;
		let path3$;
		let button1$_style_value$;
		let t1$;
		let div1$;
		let t2$;
		let div2$;
		let t3$;
		let div3$_id_value$;
		let div3$_data_index_value$;
		let div3$_data_id_value$;
		let rect$;
		let stop_animation$ = noop;
		let mounted;
		let dispose;

		function click_handler$(...args) {
			return /*click_handler$*/ ctx[15](/*i*/ ctx[29], ...args);
		}

		function click_handler$_1(...args) {
			return /*click_handler$_1*/ ctx[16](/*i*/ ctx[29], ...args);
		}

		function select_block_type$(ctx, dirty) {
			if (/*datum*/ ctx[27].html) return create_if_block$_1;
			if (/*datum*/ ctx[27].text) return create_if_block$_2;
			return create_else_block$;
		}

		let current_block_type$ = select_block_type$(ctx);
		let if_block0$ = current_block_type$(ctx);
		let if_block1$ = /*removesItems*/ ctx[1] && create_if_block$(ctx);

		const block$ = {
			key: key$_1,
			first: null,
			c: function create() {
				div3$ = element("div");
				div0$ = element("div");
				button0$ = element("button");
				svg0$ = svg_element("svg");
				path0$ = svg_element("path");
				path1$ = svg_element("path");
				t0$ = space();
				button1$ = element("button");
				svg1$ = svg_element("svg");
				path2$ = svg_element("path");
				path3$ = svg_element("path");
				t1$ = space();
				div1$ = element("div");
				if_block0$.c();
				t2$ = space();
				div2$ = element("div");
				if (if_block1$) if_block1$.c();
				t3$ = space();
				attr_dev(path0$, "d", "M0 0h24v24H0V0z");
				attr_dev(path0$, "fill", "none");
				add_location(path0$, file$$2, 196, 111, 5988);
				attr_dev(path1$, "d", "M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6 1.41 1.41z");
				add_location(path1$, file$$2, 196, 150, 6027);
				attr_dev(svg0$, "xmlns", "http://www.w3.org/2000/svg");
				attr_dev(svg0$, "viewBox", "0 0 24 24");
				attr_dev(svg0$, "width", "16px");
				attr_dev(svg0$, "height", "16px");
				add_location(svg0$, file$$2, 196, 24, 5901);
				attr_dev(button0$, "class", "up svelte-1g3zabj");
				attr_dev(button0$, "style", button0$_style_value$ = "visibility: " + (/*i*/ ctx[29] > 0 ? "" : "hidden") + ";");
				add_location(button0$, file$$2, 192, 20, 5682);
				attr_dev(path2$, "d", "M0 0h24v24H0V0z");
				attr_dev(path2$, "fill", "none");
				add_location(path2$, file$$2, 202, 111, 6474);
				attr_dev(path3$, "d", "M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z");
				add_location(path3$, file$$2, 202, 150, 6513);
				attr_dev(svg1$, "xmlns", "http://www.w3.org/2000/svg");
				attr_dev(svg1$, "viewBox", "0 0 24 24");
				attr_dev(svg1$, "width", "16px");
				attr_dev(svg1$, "height", "16px");
				add_location(svg1$, file$$2, 202, 24, 6387);
				attr_dev(button1$, "class", "down svelte-1g3zabj");

				attr_dev(button1$, "style", button1$_style_value$ = "visibility: " + (/*i*/ ctx[29] < /*data*/ ctx[0].length - 1
				? ""
				: "hidden") + ";");

				add_location(button1$, file$$2, 198, 20, 6152);
				attr_dev(div0$, "class", "buttons svelte-1g3zabj");
				add_location(div0$, file$$2, 191, 16, 5640);
				attr_dev(div1$, "class", "content svelte-1g3zabj");
				add_location(div1$, file$$2, 206, 16, 6657);
				attr_dev(div2$, "class", "buttons delete svelte-1g3zabj");
				add_location(div2$, file$$2, 216, 16, 6978);

				attr_dev(div3$, "id", div3$_id_value$ = /*grabbed*/ ctx[3] && (/*datum*/ ctx[27].id
				? /*datum*/ ctx[27].id
				: JSON.stringify(/*datum*/ ctx[27])) == /*grabbed*/ ctx[3].dataset.id
				? "grabbed"
				: "");

				attr_dev(div3$, "class", "item svelte-1g3zabj");
				attr_dev(div3$, "data-index", div3$_data_index_value$ = /*i*/ ctx[29]);

				attr_dev(div3$, "data-id", div3$_data_id_value$ = /*datum*/ ctx[27].id
				? /*datum*/ ctx[27].id
				: JSON.stringify(/*datum*/ ctx[27]));

				attr_dev(div3$, "data-graby", "0");
				add_location(div3$, file$$2, 180, 12, 4919);
				this.first = div3$;
			},
			m: function mount(target, anchor) {
				insert_dev(target, div3$, anchor);
				append_dev(div3$, div0$);
				append_dev(div0$, button0$);
				append_dev(button0$, svg0$);
				append_dev(svg0$, path0$);
				append_dev(svg0$, path1$);
				append_dev(div0$, t0$);
				append_dev(div0$, button1$);
				append_dev(button1$, svg1$);
				append_dev(svg1$, path2$);
				append_dev(svg1$, path3$);
				append_dev(div3$, t1$);
				append_dev(div3$, div1$);
				if_block0$.m(div1$, null);
				append_dev(div3$, t2$);
				append_dev(div3$, div2$);
				if (if_block1$) if_block1$.m(div2$, null);
				append_dev(div3$, t3$);

				if (!mounted) {
					dispose = [
						listen_dev(button0$, "click", click_handler$, false, false, false),
						listen_dev(button1$, "click", click_handler$_1, false, false, false),
						listen_dev(div3$, "mousedown", /*mousedown_handler$*/ ctx[18], false, false, false),
						listen_dev(div3$, "touchstart", /*touchstart_handler$*/ ctx[19], false, false, false),
						listen_dev(div3$, "mouseenter", /*mouseenter_handler$*/ ctx[20], false, false, false),
						listen_dev(div3$, "touchmove", /*touchmove_handler$*/ ctx[21], false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(new_ctx, dirty) {
				ctx = new_ctx;

				if (dirty & /*data*/ 1 && button0$_style_value$ !== (button0$_style_value$ = "visibility: " + (/*i*/ ctx[29] > 0 ? "" : "hidden") + ";")) {
					attr_dev(button0$, "style", button0$_style_value$);
				}

				if (dirty & /*data*/ 1 && button1$_style_value$ !== (button1$_style_value$ = "visibility: " + (/*i*/ ctx[29] < /*data*/ ctx[0].length - 1
				? ""
				: "hidden") + ";")) {
					attr_dev(button1$, "style", button1$_style_value$);
				}

				if (current_block_type$ === (current_block_type$ = select_block_type$(ctx)) && if_block0$) {
					if_block0$.p(ctx, dirty);
				} else {
					if_block0$.d(1);
					if_block0$ = current_block_type$(ctx);

					if (if_block0$) {
						if_block0$.c();
						if_block0$.m(div1$, null);
					}
				}

				if (/*removesItems*/ ctx[1]) {
					if (if_block1$) {
						if_block1$.p(ctx, dirty);
					} else {
						if_block1$ = create_if_block$(ctx);
						if_block1$.c();
						if_block1$.m(div2$, null);
					}
				} else if (if_block1$) {
					if_block1$.d(1);
					if_block1$ = null;
				}

				if (dirty & /*grabbed, data*/ 9 && div3$_id_value$ !== (div3$_id_value$ = /*grabbed*/ ctx[3] && (/*datum*/ ctx[27].id
				? /*datum*/ ctx[27].id
				: JSON.stringify(/*datum*/ ctx[27])) == /*grabbed*/ ctx[3].dataset.id
				? "grabbed"
				: "")) {
					attr_dev(div3$, "id", div3$_id_value$);
				}

				if (dirty & /*data*/ 1 && div3$_data_index_value$ !== (div3$_data_index_value$ = /*i*/ ctx[29])) {
					attr_dev(div3$, "data-index", div3$_data_index_value$);
				}

				if (dirty & /*data*/ 1 && div3$_data_id_value$ !== (div3$_data_id_value$ = /*datum*/ ctx[27].id
				? /*datum*/ ctx[27].id
				: JSON.stringify(/*datum*/ ctx[27]))) {
					attr_dev(div3$, "data-id", div3$_data_id_value$);
				}
			},
			r: function measure() {
				rect$ = div3$.getBoundingClientRect();
			},
			f: function fix() {
				fix_position(div3$);
				stop_animation$();
			},
			a: function animate() {
				stop_animation$();
				stop_animation$ = create_animation(div3$, rect$, flip, { duration: 200 });
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(div3$);
				if_block0$.d();
				if (if_block1$) if_block1$.d();
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_each_block$$1.name,
			type: "each",
			source: "(180:8) {#each data as datum, i (datum.id ? datum.id : JSON.stringify(datum))}",
			ctx
		});

		return block$;
	}

	function create_fragment$2(ctx) {
		let main$;
		let div0$;
		let p$;
		let div0$_class_value$;
		let div0$_style_value$;
		let t$;
		let div1$;
		let each_blocks$ = [];
		let each$_lookup$ = new Map$();
		let mounted;
		let dispose;
		let each_value$ = /*data*/ ctx[0];
		validate_each_argument(each_value$);

		const get_key$ = ctx => /*datum*/ ctx[27].id
		? /*datum*/ ctx[27].id
		: JSON.stringify(/*datum*/ ctx[27]);

		validate_each_keys(ctx, each_value$, get_each_context$$1, get_key$);

		for (let i = 0; i < each_value$.length; i += 1) {
			let child_ctx = get_each_context$$1(ctx, each_value$, i);
			let key = get_key$(child_ctx);
			each$_lookup$.set(key, each_blocks$[i] = create_each_block$$1(key, child_ctx));
		}

		const block$ = {
			c: function create() {
				main$ = element("main");
				div0$ = element("div");
				p$ = element("p");
				t$ = space();
				div1$ = element("div");

				for (let i = 0; i < each_blocks$.length; i += 1) {
					each_blocks$[i].c();
				}

				attr_dev(p$, "class", "svelte-1g3zabj");
				add_location(p$, file$$2, 172, 61, 4461);
				attr_dev(div0$, "id", "ghost");
				attr_dev(div0$, "class", div0$_class_value$ = "" + (null_to_empty(/*grabbed*/ ctx[3] ? "item haunting" : "item") + " svelte-1g3zabj"));
				attr_dev(div0$, "style", div0$_style_value$ = "top: " + (/*mouseY*/ ctx[4] + /*offsetY*/ ctx[5] - /*layerY*/ ctx[6]) + "px");
				add_location(div0$, file$$2, 168, 4, 4298);
				attr_dev(div1$, "class", "list svelte-1g3zabj");
				add_location(div1$, file$$2, 173, 4, 4479);
				attr_dev(main$, "class", "dragdroplist svelte-1g3zabj");
				add_location(main$, file$$2, 167, 0, 4266);
			},
			l: function claim(nodes) {
				throw new Error$$2("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, main$, anchor);
				append_dev(main$, div0$);
				append_dev(div0$, p$);
				/*div0$_binding$*/ ctx[14](div0$);
				append_dev(main$, t$);
				append_dev(main$, div1$);

				for (let i = 0; i < each_blocks$.length; i += 1) {
					each_blocks$[i].m(div1$, null);
				}

				if (!mounted) {
					dispose = [
						listen_dev(div1$, "mousemove", /*mousemove_handler$*/ ctx[22], false, false, false),
						listen_dev(div1$, "touchmove", /*touchmove_handler$_1*/ ctx[23], false, false, false),
						listen_dev(div1$, "mouseup", /*mouseup_handler$*/ ctx[24], false, false, false),
						listen_dev(div1$, "touchend", /*touchend_handler$*/ ctx[25], false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				if (dirty & /*grabbed*/ 8 && div0$_class_value$ !== (div0$_class_value$ = "" + (null_to_empty(/*grabbed*/ ctx[3] ? "item haunting" : "item") + " svelte-1g3zabj"))) {
					attr_dev(div0$, "class", div0$_class_value$);
				}

				if (dirty & /*mouseY, offsetY, layerY*/ 112 && div0$_style_value$ !== (div0$_style_value$ = "top: " + (/*mouseY*/ ctx[4] + /*offsetY*/ ctx[5] - /*layerY*/ ctx[6]) + "px")) {
					attr_dev(div0$, "style", div0$_style_value$);
				}

				if (dirty & /*grabbed, data, JSON, grab, dragEnter, touchEnter, removeDatum, removesItems, moveDatum*/ 11915) {
					each_value$ = /*data*/ ctx[0];
					validate_each_argument(each_value$);
					for (let i = 0; i < each_blocks$.length; i += 1) each_blocks$[i].r();
					validate_each_keys(ctx, each_value$, get_each_context$$1, get_key$);
					each_blocks$ = update_keyed_each(each_blocks$, dirty, get_key$, 1, ctx, each_value$, each$_lookup$, div1$, fix_and_destroy_block, create_each_block$$1, null, get_each_context$$1);
					for (let i = 0; i < each_blocks$.length; i += 1) each_blocks$[i].a();
				}
			},
			i: noop,
			o: noop,
			d: function destroy(detaching) {
				if (detaching) detach_dev(main$);
				/*div0$_binding$*/ ctx[14](null);

				for (let i = 0; i < each_blocks$.length; i += 1) {
					each_blocks$[i].d();
				}

				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_fragment$2.name,
			type: "component",
			source: "",
			ctx
		});

		return block$;
	}

	function instance$$2($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots("DragDropList", slots, []);
		let { data = [] } = $$props;
		let { removesItems = false } = $$props;
		let ghost;
		let grabbed;
		let lastTarget;
		let mouseY = 0; // pointer y coordinate within client
		let offsetY = 0; // y distance from top of grabbed element to pointer
		let layerY = 0; // distance from top of list to top of client

		function grab(clientY, element) {
			// modify grabbed element
			$$invalidate(3, grabbed = element);

			$$invalidate(3, grabbed.dataset.grabY = clientY, grabbed);

			// modify ghost element (which is actually dragged)
			$$invalidate(2, ghost.innerHTML = grabbed.innerHTML, ghost);

			// record offset from cursor to top of element
			// (used for positioning ghost)
			$$invalidate(5, offsetY = grabbed.getBoundingClientRect().y - clientY);

			drag(clientY);
		}

		// drag handler updates cursor position
		function drag(clientY) {
			if (grabbed) {
				$$invalidate(4, mouseY = clientY);
				$$invalidate(6, layerY = ghost.parentNode.getBoundingClientRect().y);
			}
		}

		// touchEnter handler emulates the mouseenter event for touch input
		// (more or less)
		function touchEnter(ev) {
			drag(ev.clientY);

			// trigger dragEnter the first time the cursor moves over a list item
			let target = document.elementFromPoint(ev.clientX, ev.clientY).closest(".item");

			if (target && target != lastTarget) {
				lastTarget = target;
				dragEnter(ev, target);
			}
		}

		function dragEnter(ev, target) {
			// swap items in data
			if (grabbed && target != grabbed && target.classList.contains("item")) {
				moveDatum(parseInt(grabbed.dataset.index), parseInt(target.dataset.index));
			}
		}

		// does the actual moving of items in data
		function moveDatum(from, to) {
			let temp = data[from];
			$$invalidate(0, data = [...data.slice(0, from), ...data.slice(from + 1)]);
			$$invalidate(0, data = [...data.slice(0, to), temp, ...data.slice(to)]);
		}

		function release(ev) {
			$$invalidate(3, grabbed = null);
		}

		function removeDatum(index) {
			$$invalidate(0, data = [...data.slice(0, index), ...data.slice(index + 1)]);
		}

		const writable_props = ["data", "removesItems"];

		Object$$2.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console$$2.warn(`<DragDropList> was created with unknown prop '${key}'`);
		});

		function div0$_binding$($$value) {
			binding_callbacks[$$value ? "unshift" : "push"](() => {
				ghost = $$value;
				$$invalidate(2, ghost);
			});
		}

		const click_handler$ = function (i, ev) {
			moveDatum(i, i - 1);
		};

		const click_handler$_1 = function (i, ev) {
			moveDatum(i, i + 1);
		};

		const click_handler$_2 = function (i, ev) {
			removeDatum(i);
		};

		const mousedown_handler$ = function (ev) {
			grab(ev.clientY, this);
		};

		const touchstart_handler$ = function (ev) {
			grab(ev.touches[0].clientY, this);
		};

		const mouseenter_handler$ = function (ev) {
			ev.stopPropagation();
			dragEnter(ev, ev.target);
		};

		const touchmove_handler$ = function (ev) {
			ev.stopPropagation();
			ev.preventDefault();
			touchEnter(ev.touches[0]);
		};

		const mousemove_handler$ = function (ev) {
			ev.stopPropagation();
			drag(ev.clientY);
		};

		const touchmove_handler$_1 = function (ev) {
			ev.stopPropagation();
			drag(ev.touches[0].clientY);
		};

		const mouseup_handler$ = function (ev) {
			ev.stopPropagation();
			release();
		};

		const touchend_handler$ = function (ev) {
			ev.stopPropagation();
			release(ev.touches[0]);
		};

		$$self.$$set = $$props => {
			if ("data" in $$props) $$invalidate(0, data = $$props.data);
			if ("removesItems" in $$props) $$invalidate(1, removesItems = $$props.removesItems);
		};

		$$self.$capture_state = () => ({
			flip,
			data,
			removesItems,
			ghost,
			grabbed,
			lastTarget,
			mouseY,
			offsetY,
			layerY,
			grab,
			drag,
			touchEnter,
			dragEnter,
			moveDatum,
			release,
			removeDatum
		});

		$$self.$inject_state = $$props => {
			if ("data" in $$props) $$invalidate(0, data = $$props.data);
			if ("removesItems" in $$props) $$invalidate(1, removesItems = $$props.removesItems);
			if ("ghost" in $$props) $$invalidate(2, ghost = $$props.ghost);
			if ("grabbed" in $$props) $$invalidate(3, grabbed = $$props.grabbed);
			if ("lastTarget" in $$props) lastTarget = $$props.lastTarget;
			if ("mouseY" in $$props) $$invalidate(4, mouseY = $$props.mouseY);
			if ("offsetY" in $$props) $$invalidate(5, offsetY = $$props.offsetY);
			if ("layerY" in $$props) $$invalidate(6, layerY = $$props.layerY);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			data,
			removesItems,
			ghost,
			grabbed,
			mouseY,
			offsetY,
			layerY,
			grab,
			drag,
			touchEnter,
			dragEnter,
			moveDatum,
			release,
			removeDatum,
			div0$_binding$,
			click_handler$,
			click_handler$_1,
			click_handler$_2,
			mousedown_handler$,
			touchstart_handler$,
			mouseenter_handler$,
			touchmove_handler$,
			mousemove_handler$,
			touchmove_handler$_1,
			mouseup_handler$,
			touchend_handler$
		];
	}

	class DragDropList$ extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$$2, create_fragment$2, safe_not_equal, { data: 0, removesItems: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "DragDropList$",
				options,
				id: create_fragment$2.name
			});
		}

		get data() {
			throw new Error$$2("<DragDropList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set data(value) {
			throw new Error$$2("<DragDropList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get removesItems() {
			throw new Error$$2("<DragDropList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set removesItems(value) {
			throw new Error$$2("<DragDropList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/components/SequenceView.svelte generated by Svelte v3.32.3 */

	const { Error: Error$$3, Object: Object$$3, console: console$$3 } = globals;

	function create_fragment$3(ctx) {
		let dragdroplist$;
		let updating_data$;
		let current;

		function dragdroplist$_data_binding$(value) {
			/*dragdroplist$_data_binding$*/ ctx[4](value);
		}

		let dragdroplist$_props$ = {};

		if (/*current*/ ctx[0].answers !== void 0) {
			dragdroplist$_props$.data = /*current*/ ctx[0].answers;
		}

		dragdroplist$ = new DragDropList$({
				props: dragdroplist$_props$,
				$$inline: true
			});

		binding_callbacks.push(() => bind(dragdroplist$, "data", dragdroplist$_data_binding$));

		const block$ = {
			c: function create() {
				create_component(dragdroplist$.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error$$3("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(dragdroplist$, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const dragdroplist$_changes$ = {};

				if (!updating_data$ && dirty & /*current*/ 1) {
					updating_data$ = true;
					dragdroplist$_changes$.data = /*current*/ ctx[0].answers;
					add_flush_callback(() => updating_data$ = false);
				}

				dragdroplist$.$set(dragdroplist$_changes$);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(dragdroplist$.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(dragdroplist$.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(dragdroplist$, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_fragment$3.name,
			type: "component",
			source: "",
			ctx
		});

		return block$;
	}

	function instance$$3($$self, $$props, $$invalidate) {
		let counter;
		let current;

		let $counter,
			$$unsubscribe_counter = noop,
			$$subscribe_counter = () => ($$unsubscribe_counter(), $$unsubscribe_counter = subscribe(counter, $$value => $$invalidate(3, $counter = $$value)), counter);

		$$self.$$.on_destroy.push(() => $$unsubscribe_counter());
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots("SequenceView", slots, []);
		
		let { quiz } = $$props;
		const writable_props = ["quiz"];

		Object$$3.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console$$3.warn(`<SequenceView> was created with unknown prop '${key}'`);
		});

		function dragdroplist$_data_binding$(value) {
			if ($$self.$$.not_equal(current.answers, value)) {
				current.answers = value;
				(($$invalidate(0, current), $$invalidate(2, quiz)), $$invalidate(3, $counter));
			}
		}

		$$self.$$set = $$props => {
			if ("quiz" in $$props) $$invalidate(2, quiz = $$props.quiz);
		};

		$$self.$capture_state = () => ({
			current_component,
			get_current_component,
			DragDropList: DragDropList$,
			quiz,
			counter,
			current,
			$counter
		});

		$$self.$inject_state = $$props => {
			if ("quiz" in $$props) $$invalidate(2, quiz = $$props.quiz);
			if ("counter" in $$props) $$subscribe_counter($$invalidate(1, counter = $$props.counter));
			if ("current" in $$props) $$invalidate(0, current = $$props.current);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*quiz*/ 4) {
				$$subscribe_counter($$invalidate(1, counter = quiz.counter));
			}

			if ($$self.$$.dirty & /*quiz, $counter*/ 12) {
				$$invalidate(0, current = quiz.questions[$counter]);
			}

			if ($$self.$$.dirty & /*current*/ 1) {
				{
					$$invalidate(0, current.selected = current.answers.map(answer => answer.id), current);
				}
			}
		};

		return [current, counter, quiz, $counter, dragdroplist$_data_binding$];
	}

	class SequenceView$ extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$$3, create_fragment$3, safe_not_equal, { quiz: 2 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "SequenceView$",
				options,
				id: create_fragment$3.name
			});

			const { ctx } = this.$$;
			const props = options.props || {};

			if (/*quiz*/ ctx[2] === undefined && !("quiz" in props)) {
				console$$3.warn("<SequenceView> was created without expected prop 'quiz'");
			}
		}

		get quiz() {
			throw new Error$$3("<SequenceView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set quiz(value) {
			throw new Error$$3("<SequenceView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/components/MultipleChoiceView.svelte generated by Svelte v3.32.3 */

	const { Error: Error$$4, Object: Object$$4, console: console$$4 } = globals;
	const file$$3 = "src/components/MultipleChoiceView.svelte";

	function get_each_context$$2(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[6] = list[i];
		child_ctx[8] = i;
		return child_ctx;
	}

	// (8:0) {#each current.answers as answer, i}
	function create_each_block$$2(ctx) {
		let label$;
		let input$;
		let t$;
		let span1$;
		let html_tag$;
		let raw$_value$ = /*answer*/ ctx[6].html + "";
		let span0$;
		let mounted;
		let dispose;

		const block$ = {
			c: function create() {
				label$ = element("label");
				input$ = element("input");
				t$ = space();
				span1$ = element("span");
				span0$ = element("span");
				attr_dev(input$, "type", "checkbox");
				input$.__value = /*i*/ ctx[8];
				input$.value = input$.__value;
				attr_dev(input$, "class", "svelte-ub1gn3");
				/*$$binding_groups*/ ctx[5][0].push(input$);
				add_location(input$, file$$3, 9, 1, 161);
				html_tag$ = new HtmlTag(span0$);
				add_location(span0$, file$$3, 12, 27, 258);
				attr_dev(span1$, "class", "svelte-ub1gn3");
				add_location(span1$, file$$3, 12, 2, 233);
				attr_dev(label$, "class", "svelte-ub1gn3");
				add_location(label$, file$$3, 8, 0, 152);
			},
			m: function mount(target, anchor) {
				insert_dev(target, label$, anchor);
				append_dev(label$, input$);
				input$.checked = ~/*current*/ ctx[1].selected.indexOf(input$.__value);
				append_dev(label$, t$);
				append_dev(label$, span1$);
				html_tag$.m(raw$_value$, span1$);
				append_dev(span1$, span0$);

				if (!mounted) {
					dispose = listen_dev(input$, "change", /*input$_change_handler$*/ ctx[4]);
					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (dirty & /*current*/ 2) {
					input$.checked = ~/*current*/ ctx[1].selected.indexOf(input$.__value);
				}

				if (dirty & /*current*/ 2 && raw$_value$ !== (raw$_value$ = /*answer*/ ctx[6].html + "")) html_tag$.p(raw$_value$);
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(label$);
				/*$$binding_groups*/ ctx[5][0].splice(/*$$binding_groups*/ ctx[5][0].indexOf(input$), 1);
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_each_block$$2.name,
			type: "each",
			source: "(8:0) {#each current.answers as answer, i}",
			ctx
		});

		return block$;
	}

	function create_fragment$4(ctx) {
		let each$_anchor$;
		let each_value$ = /*current*/ ctx[1].answers;
		validate_each_argument(each_value$);
		let each_blocks$ = [];

		for (let i = 0; i < each_value$.length; i += 1) {
			each_blocks$[i] = create_each_block$$2(get_each_context$$2(ctx, each_value$, i));
		}

		const block$ = {
			c: function create() {
				for (let i = 0; i < each_blocks$.length; i += 1) {
					each_blocks$[i].c();
				}

				each$_anchor$ = empty();
			},
			l: function claim(nodes) {
				throw new Error$$4("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				for (let i = 0; i < each_blocks$.length; i += 1) {
					each_blocks$[i].m(target, anchor);
				}

				insert_dev(target, each$_anchor$, anchor);
			},
			p: function update(ctx, [dirty]) {
				if (dirty & /*current*/ 2) {
					each_value$ = /*current*/ ctx[1].answers;
					validate_each_argument(each_value$);
					let i;

					for (i = 0; i < each_value$.length; i += 1) {
						const child_ctx = get_each_context$$2(ctx, each_value$, i);

						if (each_blocks$[i]) {
							each_blocks$[i].p(child_ctx, dirty);
						} else {
							each_blocks$[i] = create_each_block$$2(child_ctx);
							each_blocks$[i].c();
							each_blocks$[i].m(each$_anchor$.parentNode, each$_anchor$);
						}
					}

					for (; i < each_blocks$.length; i += 1) {
						each_blocks$[i].d(1);
					}

					each_blocks$.length = each_value$.length;
				}
			},
			i: noop,
			o: noop,
			d: function destroy(detaching) {
				destroy_each(each_blocks$, detaching);
				if (detaching) detach_dev(each$_anchor$);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_fragment$4.name,
			type: "component",
			source: "",
			ctx
		});

		return block$;
	}

	function instance$$4($$self, $$props, $$invalidate) {
		let counter;
		let current;

		let $counter,
			$$unsubscribe_counter = noop,
			$$subscribe_counter = () => ($$unsubscribe_counter(), $$unsubscribe_counter = subscribe(counter, $$value => $$invalidate(3, $counter = $$value)), counter);

		$$self.$$.on_destroy.push(() => $$unsubscribe_counter());
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots("MultipleChoiceView", slots, []);
		
		let { quiz } = $$props;
		const writable_props = ["quiz"];

		Object$$4.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console$$4.warn(`<MultipleChoiceView> was created with unknown prop '${key}'`);
		});

		const $$binding_groups = [[]];

		function input$_change_handler$() {
			current.selected = get_binding_group_value($$binding_groups[0], this.__value, this.checked);
			(($$invalidate(1, current), $$invalidate(2, quiz)), $$invalidate(3, $counter));
		}

		$$self.$$set = $$props => {
			if ("quiz" in $$props) $$invalidate(2, quiz = $$props.quiz);
		};

		$$self.$capture_state = () => ({ quiz, counter, current, $counter });

		$$self.$inject_state = $$props => {
			if ("quiz" in $$props) $$invalidate(2, quiz = $$props.quiz);
			if ("counter" in $$props) $$subscribe_counter($$invalidate(0, counter = $$props.counter));
			if ("current" in $$props) $$invalidate(1, current = $$props.current);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*quiz*/ 4) {
				$$subscribe_counter($$invalidate(0, counter = quiz.counter));
			}

			if ($$self.$$.dirty & /*quiz, $counter*/ 12) {
				$$invalidate(1, current = quiz.questions[$counter]);
			}
		};

		return [counter, current, quiz, $counter, input$_change_handler$, $$binding_groups];
	}

	class MultipleChoiceView$ extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$$4, create_fragment$4, safe_not_equal, { quiz: 2 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "MultipleChoiceView$",
				options,
				id: create_fragment$4.name
			});

			const { ctx } = this.$$;
			const props = options.props || {};

			if (/*quiz*/ ctx[2] === undefined && !("quiz" in props)) {
				console$$4.warn("<MultipleChoiceView> was created without expected prop 'quiz'");
			}
		}

		get quiz() {
			throw new Error$$4("<MultipleChoiceView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set quiz(value) {
			throw new Error$$4("<MultipleChoiceView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/components/BlanksView.svelte generated by Svelte v3.32.3 */

	const { Error: Error$$5, Object: Object$$5, console: console$$5 } = globals;

	function create_fragment$5(ctx) {
		const block$ = {
			c: noop,
			l: function claim(nodes) {
				throw new Error$$5("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: noop,
			p: noop,
			i: noop,
			o: noop,
			d: noop
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_fragment$5.name,
			type: "component",
			source: "",
			ctx
		});

		return block$;
	}

	function instance$$5($$self, $$props) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots("BlanksView", slots, []);
		const writable_props = [];

		Object$$5.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console$$5.warn(`<BlanksView> was created with unknown prop '${key}'`);
		});

		return [];
	}

	class BlanksView$ extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$$5, create_fragment$5, safe_not_equal, {});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "BlanksView$",
				options,
				id: create_fragment$5.name
			});
		}
	}

	function is_date(obj) {
	    return Object.prototype.toString.call(obj) === '[object Date]';
	}

	function tick_spring(ctx, last_value, current_value, target_value) {
	    if (typeof current_value === 'number' || is_date(current_value)) {
	        // @ts-ignore
	        const delta = target_value - current_value;
	        // @ts-ignore
	        const velocity = (current_value - last_value) / (ctx.dt || 1 / 60); // guard div by 0
	        const spring = ctx.opts.stiffness * delta;
	        const damper = ctx.opts.damping * velocity;
	        const acceleration = (spring - damper) * ctx.inv_mass;
	        const d = (velocity + acceleration) * ctx.dt;
	        if (Math.abs(d) < ctx.opts.precision && Math.abs(delta) < ctx.opts.precision) {
	            return target_value; // settled
	        }
	        else {
	            ctx.settled = false; // signal loop to keep ticking
	            // @ts-ignore
	            return is_date(current_value) ?
	                new Date(current_value.getTime() + d) : current_value + d;
	        }
	    }
	    else if (Array.isArray(current_value)) {
	        // @ts-ignore
	        return current_value.map((_, i) => tick_spring(ctx, last_value[i], current_value[i], target_value[i]));
	    }
	    else if (typeof current_value === 'object') {
	        const next_value = {};
	        for (const k in current_value) {
	            // @ts-ignore
	            next_value[k] = tick_spring(ctx, last_value[k], current_value[k], target_value[k]);
	        }
	        // @ts-ignore
	        return next_value;
	    }
	    else {
	        throw new Error(`Cannot spring ${typeof current_value} values`);
	    }
	}
	function spring(value, opts = {}) {
	    const store = writable(value);
	    const { stiffness = 0.15, damping = 0.8, precision = 0.01 } = opts;
	    let last_time;
	    let task;
	    let current_token;
	    let last_value = value;
	    let target_value = value;
	    let inv_mass = 1;
	    let inv_mass_recovery_rate = 0;
	    let cancel_task = false;
	    function set(new_value, opts = {}) {
	        target_value = new_value;
	        const token = current_token = {};
	        if (value == null || opts.hard || (spring.stiffness >= 1 && spring.damping >= 1)) {
	            cancel_task = true; // cancel any running animation
	            last_time = now();
	            last_value = new_value;
	            store.set(value = target_value);
	            return Promise.resolve();
	        }
	        else if (opts.soft) {
	            const rate = opts.soft === true ? .5 : +opts.soft;
	            inv_mass_recovery_rate = 1 / (rate * 60);
	            inv_mass = 0; // infinite mass, unaffected by spring forces
	        }
	        if (!task) {
	            last_time = now();
	            cancel_task = false;
	            task = loop(now => {
	                if (cancel_task) {
	                    cancel_task = false;
	                    task = null;
	                    return false;
	                }
	                inv_mass = Math.min(inv_mass + inv_mass_recovery_rate, 1);
	                const ctx = {
	                    inv_mass,
	                    opts: spring,
	                    settled: true,
	                    dt: (now - last_time) * 60 / 1000
	                };
	                const next_value = tick_spring(ctx, last_value, value, target_value);
	                last_time = now;
	                last_value = value;
	                store.set(value = next_value);
	                if (ctx.settled) {
	                    task = null;
	                }
	                return !ctx.settled;
	            });
	        }
	        return new Promise(fulfil => {
	            task.promise.then(() => {
	                if (token === current_token)
	                    fulfil();
	            });
	        });
	    }
	    const spring = {
	        set,
	        update: (fn, opts) => set(fn(target_value, value), opts),
	        subscribe: store.subscribe,
	        stiffness,
	        damping,
	        precision
	    };
	    return spring;
	}

	function get_interpolator(a, b) {
	    if (a === b || a !== a)
	        return () => a;
	    const type = typeof a;
	    if (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) {
	        throw new Error('Cannot interpolate values of different type');
	    }
	    if (Array.isArray(a)) {
	        const arr = b.map((bi, i) => {
	            return get_interpolator(a[i], bi);
	        });
	        return t => arr.map(fn => fn(t));
	    }
	    if (type === 'object') {
	        if (!a || !b)
	            throw new Error('Object cannot be null');
	        if (is_date(a) && is_date(b)) {
	            a = a.getTime();
	            b = b.getTime();
	            const delta = b - a;
	            return t => new Date(a + t * delta);
	        }
	        const keys = Object.keys(b);
	        const interpolators = {};
	        keys.forEach(key => {
	            interpolators[key] = get_interpolator(a[key], b[key]);
	        });
	        return t => {
	            const result = {};
	            keys.forEach(key => {
	                result[key] = interpolators[key](t);
	            });
	            return result;
	        };
	    }
	    if (type === 'number') {
	        const delta = b - a;
	        return t => a + t * delta;
	    }
	    throw new Error(`Cannot interpolate ${type} values`);
	}
	function tweened(value, defaults = {}) {
	    const store = writable(value);
	    let task;
	    let target_value = value;
	    function set(new_value, opts) {
	        if (value == null) {
	            store.set(value = new_value);
	            return Promise.resolve();
	        }
	        target_value = new_value;
	        let previous_task = task;
	        let started = false;
	        let { delay = 0, duration = 400, easing = identity, interpolate = get_interpolator } = assign(assign({}, defaults), opts);
	        if (duration === 0) {
	            if (previous_task) {
	                previous_task.abort();
	                previous_task = null;
	            }
	            store.set(value = target_value);
	            return Promise.resolve();
	        }
	        const start = now() + delay;
	        let fn;
	        task = loop(now => {
	            if (now < start)
	                return true;
	            if (!started) {
	                fn = interpolate(value, new_value);
	                if (typeof duration === 'function')
	                    duration = duration(value, new_value);
	                started = true;
	            }
	            if (previous_task) {
	                previous_task.abort();
	                previous_task = null;
	            }
	            const elapsed = now - start;
	            if (elapsed > duration) {
	                store.set(value = new_value);
	                return false;
	            }
	            // @ts-ignore
	            store.set(value = fn(easing(elapsed / duration)));
	            return true;
	        });
	        return task.promise;
	    }
	    return {
	        set,
	        update: (fn, opts) => set(fn(target_value, value), opts),
	        subscribe: store.subscribe
	    };
	}

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */

	function __rest(s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	}
	function crossfade(_a) {
	    var { fallback } = _a, defaults = __rest(_a, ["fallback"]);
	    const to_receive = new Map();
	    const to_send = new Map();
	    function crossfade(from, node, params) {
	        const { delay = 0, duration = d => Math.sqrt(d) * 30, easing = cubicOut } = assign(assign({}, defaults), params);
	        const to = node.getBoundingClientRect();
	        const dx = from.left - to.left;
	        const dy = from.top - to.top;
	        const dw = from.width / to.width;
	        const dh = from.height / to.height;
	        const d = Math.sqrt(dx * dx + dy * dy);
	        const style = getComputedStyle(node);
	        const transform = style.transform === 'none' ? '' : style.transform;
	        const opacity = +style.opacity;
	        return {
	            delay,
	            duration: is_function(duration) ? duration(d) : duration,
	            easing,
	            css: (t, u) => `
				opacity: ${t * opacity};
				transform-origin: top left;
				transform: ${transform} translate(${u * dx}px,${u * dy}px) scale(${t + (1 - t) * dw}, ${t + (1 - t) * dh});
			`
	        };
	    }
	    function transition(items, counterparts, intro) {
	        return (node, params) => {
	            items.set(params.key, {
	                rect: node.getBoundingClientRect()
	            });
	            return () => {
	                if (counterparts.has(params.key)) {
	                    const { rect } = counterparts.get(params.key);
	                    counterparts.delete(params.key);
	                    return crossfade(rect, node, params);
	                }
	                // if the node is disappearing altogether
	                // (i.e. wasn't claimed by the other list)
	                // then we need to supply an outro
	                items.delete(params.key);
	                return fallback && fallback(node, params, intro);
	            };
	        };
	    }
	    return [
	        transition(to_send, to_receive, false),
	        transition(to_receive, to_send, true)
	    ];
	}

	// taken from https://svelte.dev/repl/7c9964de18604b2582ddd844cebdf218?version=3.15.0
	crossfade({
	    duration: (d) => 600,
	    easing: elasticOut,
	    fallback(node, params) {
	        const style = getComputedStyle(node);
	        const transform = style.transform === 'none' ? '' : style.transform;
	        return {
	            duration: 600,
	            easing: quintOut,
	            css: (t) => `
        transform: ${transform} scale(${t});
        opacity: ${t}
      `,
	        };
	    },
	});
	let dropTarget;
	function draggable(node, params) {
	    let lastX;
	    let lastY;
	    let startRect;
	    let offsetX = 0;
	    let offsetY = 0;
	    const offset = spring({ x: offsetX, y: offsetY }, {
	        stiffness: 0.2,
	        damping: 0.4,
	    });
	    offset.subscribe((offset) => {
	        node.style.left = offset.x + 'px';
	        node.style.top = offset.y + 'px';
	    });
	    node.addEventListener('mousedown', handleMousedown);
	    function handleMousedown(event) {
	        event.preventDefault();
	        lastX = event.clientX;
	        lastY = event.clientY;
	        if (!startRect)
	            startRect = node.getBoundingClientRect();
	        node.classList.add('dragged');
	        node.dispatchEvent(new CustomEvent('dragstart', {
	            detail: { lastX, lastY },
	        }));
	        window.addEventListener('mousemove', handleMousemove);
	        window.addEventListener('mouseup', handleMouseup);
	    }
	    function handleMousemove(event) {
	        const dx = event.clientX - lastX;
	        const dy = event.clientY - lastY;
	        offsetX += dx;
	        offsetY += dy;
	        lastX = event.clientX;
	        lastY = event.clientY;
	        const rect = node.getBoundingClientRect();
	        const midX = rect.x + rect.width / 2;
	        const midY = rect.y + rect.height / 2;
	        if (dropTarget)
	            dropTarget.classList.remove('droptarget');
	        dropTarget = null;
	        const candidate = document.elementFromPoint(midX, midY);
	        params.targets.map((t) => {
	            if (candidate !== null && candidate.matches(t))
	                dropTarget = candidate;
	        });
	        if (dropTarget)
	            dropTarget.classList.add('droptarget');
	        offset.set({ x: offsetX + dx, y: offsetY });
	        node.dispatchEvent(new CustomEvent('drag', {
	            detail: { lastX, lastY, dx, dy },
	        }));
	    }
	    function handleMouseup(event) {
	        if (dropTarget) {
	            dropTarget.classList.remove('droptarget');
	            const targetRect = dropTarget.getBoundingClientRect();
	            offsetX = targetRect.x - startRect.x;
	            offsetY = targetRect.y - startRect.y;
	        }
	        else {
	            offsetX = 0;
	            offsetY = 0;
	        }
	        node.classList.remove('dragged');
	        lastX = event.clientX;
	        lastY = event.clientY;
	        offset.set({ x: offsetX, y: offsetY });
	        node.dispatchEvent(new CustomEvent('dragend', {
	            detail: { dropTarget, lastX, lastY },
	        }));
	        if (dropTarget) {
	            dropTarget.dispatchEvent(new CustomEvent('dropped', {
	                detail: params.data,
	            }));
	        }
	        dropTarget = null;
	        window.removeEventListener('mousemove', handleMousemove);
	        window.removeEventListener('mouseup', handleMouseup);
	    }
	    return {
	        destroy() {
	            node.removeEventListener('mousedown', handleMousedown);
	        },
	    };
	}

	/* src/components/PairsView.svelte generated by Svelte v3.32.3 */

	const { Boolean: Boolean$, Error: Error$$6, Map: Map$$1, Object: Object$$6, console: console$$6 } = globals;
	const file$$4 = "src/components/PairsView.svelte";

	function get_each_context$$3(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[10] = list[i];
		child_ctx[12] = i;
		return child_ctx;
	}

	function get_each_context$_1(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[10] = list[i];
		return child_ctx;
	}

	// (38:12) {#if item}
	function create_if_block$$1(ctx) {
		let each_blocks$ = [];
		let each$_lookup$ = new Map$$1();
		let each$_anchor$;
		let current;
		let each_value$_1 = [/*item*/ ctx[10]];
		validate_each_argument(each_value$_1);
		const get_key$ = ctx => /*item*/ ctx[10].key;
		validate_each_keys(ctx, each_value$_1, get_each_context$_1, get_key$);

		for (let i = 0; i < 1; i += 1) {
			let child_ctx = get_each_context$_1(ctx, each_value$_1, i);
			let key = get_key$(child_ctx);
			each$_lookup$.set(key, each_blocks$[i] = create_each_block$_1(key, child_ctx));
		}

		const block$ = {
			c: function create() {
				for (let i = 0; i < 1; i += 1) {
					each_blocks$[i].c();
				}

				each$_anchor$ = empty();
			},
			m: function mount(target, anchor) {
				for (let i = 0; i < 1; i += 1) {
					each_blocks$[i].m(target, anchor);
				}

				insert_dev(target, each$_anchor$, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (dirty & /*shelf, putInShelf*/ 5) {
					each_value$_1 = [/*item*/ ctx[10]];
					validate_each_argument(each_value$_1);
					group_outros();
					for (let i = 0; i < 1; i += 1) each_blocks$[i].r();
					validate_each_keys(ctx, each_value$_1, get_each_context$_1, get_key$);
					each_blocks$ = update_keyed_each(each_blocks$, dirty, get_key$, 1, ctx, each_value$_1, each$_lookup$, each$_anchor$.parentNode, fix_and_outro_and_destroy_block, create_each_block$_1, each$_anchor$, get_each_context$_1);
					for (let i = 0; i < 1; i += 1) each_blocks$[i].a();
					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;

				for (let i = 0; i < 1; i += 1) {
					transition_in(each_blocks$[i]);
				}

				current = true;
			},
			o: function outro(local) {
				for (let i = 0; i < 1; i += 1) {
					transition_out(each_blocks$[i]);
				}

				current = false;
			},
			d: function destroy(detaching) {
				for (let i = 0; i < 1; i += 1) {
					each_blocks$[i].d(detaching);
				}

				if (detaching) detach_dev(each$_anchor$);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_if_block$$1.name,
			type: "if",
			source: "(38:12) {#if item}",
			ctx
		});

		return block$;
	}

	// (39:16) {#each [item] as item (item.key)}
	function create_each_block$_1(key$_1, ctx) {
		let span$;
		let t0$_value$ = /*item*/ ctx[10].name + "";
		let t0$;
		let t1$;
		let draggable_action$;
		let span$_intro$;
		let span$_outro$;
		let rect$;
		let stop_animation$ = noop;
		let current;
		let mounted;
		let dispose;

		function drop_handler$(...args) {
			return /*drop_handler$*/ ctx[7](/*index*/ ctx[12], ...args);
		}

		const block$ = {
			key: key$_1,
			first: null,
			c: function create() {
				span$ = element("span");
				t0$ = text(t0$_value$);
				t1$ = space();
				attr_dev(span$, "class", "item svelte-1jbowbm");
				add_location(span$, file$$4, 39, 20, 1256);
				this.first = span$;
			},
			m: function mount(target, anchor) {
				insert_dev(target, span$, anchor);
				append_dev(span$, t0$);
				append_dev(span$, t1$);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(draggable_action$ = draggable.call(null, span$, {
							data: /*item*/ ctx[10],
							targets: [".slot", ".slot .item"]
						})),
						listen_dev(span$, "drop", drop_handler$, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(new_ctx, dirty) {
				ctx = new_ctx;
				if ((!current || dirty & /*shelf*/ 1) && t0$_value$ !== (t0$_value$ = /*item*/ ctx[10].name + "")) set_data_dev(t0$, t0$_value$);

				if (draggable_action$ && is_function(draggable_action$.update) && dirty & /*shelf*/ 1) draggable_action$.update.call(null, {
					data: /*item*/ ctx[10],
					targets: [".slot", ".slot .item"]
				});
			},
			r: function measure() {
				rect$ = span$.getBoundingClientRect();
			},
			f: function fix() {
				fix_position(span$);
				stop_animation$();
				add_transform(span$, rect$);
			},
			a: function animate() {
				stop_animation$();
				stop_animation$ = create_animation(span$, rect$, flip, {});
			},
			i: function intro(local) {
				if (current) return;

				add_render_callback(() => {
					if (span$_outro$) span$_outro$.end(1);
					if (!span$_intro$) span$_intro$ = create_in_transition(span$, /*receive*/ ctx[4], /*item*/ ctx[10]);
					span$_intro$.start();
				});

				current = true;
			},
			o: function outro(local) {
				if (span$_intro$) span$_intro$.invalidate();
				span$_outro$ = create_out_transition(span$, /*send*/ ctx[3], /*item*/ ctx[10]);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(span$);
				if (detaching && span$_outro$) span$_outro$.end();
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_each_block$_1.name,
			type: "each",
			source: "(39:16) {#each [item] as item (item.key)}",
			ctx
		});

		return block$;
	}

	// (36:4) {#each shelf as item, index}
	function create_each_block$$3(ctx) {
		let span$;
		let t$;
		let current;
		let mounted;
		let dispose;
		let if_block$ = /*item*/ ctx[10] && create_if_block$$1(ctx);

		function drop_handler$_1(...args) {
			return /*drop_handler$_1*/ ctx[8](/*index*/ ctx[12], ...args);
		}

		const block$ = {
			c: function create() {
				span$ = element("span");
				if (if_block$) if_block$.c();
				t$ = space();
				attr_dev(span$, "class", "slot svelte-1jbowbm");
				add_location(span$, file$$4, 36, 8, 1096);
			},
			m: function mount(target, anchor) {
				insert_dev(target, span$, anchor);
				if (if_block$) if_block$.m(span$, null);
				append_dev(span$, t$);
				current = true;

				if (!mounted) {
					dispose = listen_dev(span$, "drop", drop_handler$_1, false, false, false);
					mounted = true;
				}
			},
			p: function update(new_ctx, dirty) {
				ctx = new_ctx;

				if (/*item*/ ctx[10]) {
					if (if_block$) {
						if_block$.p(ctx, dirty);

						if (dirty & /*shelf*/ 1) {
							transition_in(if_block$, 1);
						}
					} else {
						if_block$ = create_if_block$$1(ctx);
						if_block$.c();
						transition_in(if_block$, 1);
						if_block$.m(span$, t$);
					}
				} else if (if_block$) {
					group_outros();

					transition_out(if_block$, 1, 1, () => {
						if_block$ = null;
					});

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block$);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block$);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(span$);
				if (if_block$) if_block$.d();
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_each_block$$3.name,
			type: "each",
			source: "(36:4) {#each shelf as item, index}",
			ctx
		});

		return block$;
	}

	function create_fragment$6(ctx) {
		let div$;
		let current;
		let each_value$ = /*shelf*/ ctx[0];
		validate_each_argument(each_value$);
		let each_blocks$ = [];

		for (let i = 0; i < each_value$.length; i += 1) {
			each_blocks$[i] = create_each_block$$3(get_each_context$$3(ctx, each_value$, i));
		}

		const out$ = i => transition_out(each_blocks$[i], 1, 1, () => {
			each_blocks$[i] = null;
		});

		const block$ = {
			c: function create() {
				div$ = element("div");

				for (let i = 0; i < each_blocks$.length; i += 1) {
					each_blocks$[i].c();
				}

				attr_dev(div$, "class", "shelf");
				add_location(div$, file$$4, 34, 0, 1035);
			},
			l: function claim(nodes) {
				throw new Error$$6("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div$, anchor);

				for (let i = 0; i < each_blocks$.length; i += 1) {
					each_blocks$[i].m(div$, null);
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (dirty & /*putInShelf, shelf*/ 5) {
					each_value$ = /*shelf*/ ctx[0];
					validate_each_argument(each_value$);
					let i;

					for (i = 0; i < each_value$.length; i += 1) {
						const child_ctx = get_each_context$$3(ctx, each_value$, i);

						if (each_blocks$[i]) {
							each_blocks$[i].p(child_ctx, dirty);
							transition_in(each_blocks$[i], 1);
						} else {
							each_blocks$[i] = create_each_block$$3(child_ctx);
							each_blocks$[i].c();
							transition_in(each_blocks$[i], 1);
							each_blocks$[i].m(div$, null);
						}
					}

					group_outros();

					for (i = each_value$.length; i < each_blocks$.length; i += 1) {
						out$(i);
					}

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;

				for (let i = 0; i < each_value$.length; i += 1) {
					transition_in(each_blocks$[i]);
				}

				current = true;
			},
			o: function outro(local) {
				each_blocks$ = each_blocks$.filter(Boolean$);

				for (let i = 0; i < each_blocks$.length; i += 1) {
					transition_out(each_blocks$[i]);
				}

				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(div$);
				destroy_each(each_blocks$, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_fragment$6.name,
			type: "component",
			source: "",
			ctx
		});

		return block$;
	}

	function instance$$6($$self, $$props, $$invalidate) {
		let counter;
		let current;

		let $counter,
			$$unsubscribe_counter = noop,
			$$subscribe_counter = () => ($$unsubscribe_counter(), $$unsubscribe_counter = subscribe(counter, $$value => $$invalidate(6, $counter = $$value)), counter);

		$$self.$$.on_destroy.push(() => $$unsubscribe_counter());
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots("PairsView", slots, []);
		
		let { quiz } = $$props;
		const shelf = current.answers.map(answer => ({ key: answer.id, name: answer.html }));

		function putInShelf(item, index) {
			const oldItem = shelf[index];
			const oldShelfIndex = shelf.indexOf(item);
			if (oldShelfIndex !== -1) $$invalidate(0, shelf[oldShelfIndex] = oldItem, shelf);
			$$invalidate(0, shelf[index] = item, shelf);
		}

		const [send, receive] = crossfade({
			duration: d => Math.sqrt(d * 500),
			easing: elasticOut,
			fallback(node, params) {
				const style = getComputedStyle(node);
				const transform = style.transform === "none" ? "" : style.transform;

				return {
					duration: 600,
					easing: quintOut,
					css: t => `
			transform: ${transform} scale(${t});
			opacity: ${t}
		  `
				};
			}
		});

		const writable_props = ["quiz"];

		Object$$6.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console$$6.warn(`<PairsView> was created with unknown prop '${key}'`);
		});

		const drop_handler$ = (index, e) => putInShelf(e.detail, index);
		const drop_handler$_1 = (index, e) => putInShelf(e.detail, index);

		$$self.$$set = $$props => {
			if ("quiz" in $$props) $$invalidate(5, quiz = $$props.quiz);
		};

		$$self.$capture_state = () => ({
			draggable,
			crossfade,
			quintOut,
			elasticOut,
			flip,
			quiz,
			shelf,
			putInShelf,
			send,
			receive,
			counter,
			current,
			$counter
		});

		$$self.$inject_state = $$props => {
			if ("quiz" in $$props) $$invalidate(5, quiz = $$props.quiz);
			if ("counter" in $$props) $$subscribe_counter($$invalidate(1, counter = $$props.counter));
			if ("current" in $$props) current = $$props.current;
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*quiz*/ 32) {
				$$subscribe_counter($$invalidate(1, counter = quiz.counter));
			}

			if ($$self.$$.dirty & /*quiz, $counter*/ 96) {
				current = quiz.questions[$counter];
			}
		};

		return [
			shelf,
			counter,
			putInShelf,
			send,
			receive,
			quiz,
			$counter,
			drop_handler$,
			drop_handler$_1
		];
	}

	class PairsView$ extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$$6, create_fragment$6, safe_not_equal, { quiz: 5 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "PairsView$",
				options,
				id: create_fragment$6.name
			});

			const { ctx } = this.$$;
			const props = options.props || {};

			if (/*quiz*/ ctx[5] === undefined && !("quiz" in props)) {
				console$$6.warn("<PairsView> was created without expected prop 'quiz'");
			}
		}

		get quiz() {
			throw new Error$$6("<PairsView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set quiz(value) {
			throw new Error$$6("<PairsView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/components/QuizSection.svelte generated by Svelte v3.32.3 */

	const { Error: Error$$7, Object: Object$$7, console: console$$7 } = globals;
	const file$$5 = "src/components/QuizSection.svelte";

	// (18:0) <Headline>
	function create_default_slot$$1(ctx) {
		let h3$;
		let raw$_value$ = /*current*/ ctx[2].text + "";

		const block$ = {
			c: function create() {
				h3$ = element("h3");
				add_location(h3$, file$$5, 18, 4, 518);
			},
			m: function mount(target, anchor) {
				insert_dev(target, h3$, anchor);
				h3$.innerHTML = raw$_value$;
			},
			p: function update(ctx, dirty) {
				if (dirty & /*current*/ 4 && raw$_value$ !== (raw$_value$ = /*current*/ ctx[2].text + "")) h3$.innerHTML = raw$_value$;		},
			d: function destroy(detaching) {
				if (detaching) detach_dev(h3$);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_default_slot$$1.name,
			type: "slot",
			source: "(18:0) <Headline>",
			ctx
		});

		return block$;
	}

	function create_fragment$7(ctx) {
		let headline$;
		let t0$;
		let p$;
		let raw$_value$ = /*current*/ ctx[2].explanation + "";
		let t1$;
		let switch_instance$;
		let switch_instance$_anchor$;
		let current;

		headline$ = new Headline$({
				props: {
					$$slots: { default: [create_default_slot$$1] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		var switch_value$ = /*views*/ ctx[3][/*current*/ ctx[2].type];

		function switch_props$(ctx) {
			return {
				props: { quiz: /*quiz*/ ctx[0] },
				$$inline: true
			};
		}

		if (switch_value$) {
			switch_instance$ = new switch_value$(switch_props$(ctx));
		}

		const block$ = {
			c: function create() {
				create_component(headline$.$$.fragment);
				t0$ = space();
				p$ = element("p");
				t1$ = space();
				if (switch_instance$) create_component(switch_instance$.$$.fragment);
				switch_instance$_anchor$ = empty();
				add_location(p$, file$$5, 21, 0, 561);
			},
			l: function claim(nodes) {
				throw new Error$$7("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(headline$, target, anchor);
				insert_dev(target, t0$, anchor);
				insert_dev(target, p$, anchor);
				p$.innerHTML = raw$_value$;
				insert_dev(target, t1$, anchor);

				if (switch_instance$) {
					mount_component(switch_instance$, target, anchor);
				}

				insert_dev(target, switch_instance$_anchor$, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const headline$_changes$ = {};

				if (dirty & /*$$scope, current*/ 36) {
					headline$_changes$.$$scope = { dirty, ctx };
				}

				headline$.$set(headline$_changes$);
				if ((!current || dirty & /*current*/ 4) && raw$_value$ !== (raw$_value$ = /*current*/ ctx[2].explanation + "")) p$.innerHTML = raw$_value$;			const switch_instance$_changes$ = {};
				if (dirty & /*quiz*/ 1) switch_instance$_changes$.quiz = /*quiz*/ ctx[0];

				if (switch_value$ !== (switch_value$ = /*views*/ ctx[3][/*current*/ ctx[2].type])) {
					if (switch_instance$) {
						group_outros();
						const old_component = switch_instance$;

						transition_out(old_component.$$.fragment, 1, 0, () => {
							destroy_component(old_component, 1);
						});

						check_outros();
					}

					if (switch_value$) {
						switch_instance$ = new switch_value$(switch_props$(ctx));
						create_component(switch_instance$.$$.fragment);
						transition_in(switch_instance$.$$.fragment, 1);
						mount_component(switch_instance$, switch_instance$_anchor$.parentNode, switch_instance$_anchor$);
					} else {
						switch_instance$ = null;
					}
				} else if (switch_value$) {
					switch_instance$.$set(switch_instance$_changes$);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(headline$.$$.fragment, local);
				if (switch_instance$) transition_in(switch_instance$.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(headline$.$$.fragment, local);
				if (switch_instance$) transition_out(switch_instance$.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(headline$, detaching);
				if (detaching) detach_dev(t0$);
				if (detaching) detach_dev(p$);
				if (detaching) detach_dev(t1$);
				if (detaching) detach_dev(switch_instance$_anchor$);
				if (switch_instance$) destroy_component(switch_instance$, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_fragment$7.name,
			type: "component",
			source: "",
			ctx
		});

		return block$;
	}

	function instance$$7($$self, $$props, $$invalidate) {
		let counter;
		let current;

		let $counter,
			$$unsubscribe_counter = noop,
			$$subscribe_counter = () => ($$unsubscribe_counter(), $$unsubscribe_counter = subscribe(counter, $$value => $$invalidate(4, $counter = $$value)), counter);

		$$self.$$.on_destroy.push(() => $$unsubscribe_counter());
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots("QuizSection", slots, []);
		
		let { quiz } = $$props;

		const views = {
			"MultipleChoice": MultipleChoiceView$,
			"Sequence": SequenceView$,
			"Gaps": BlanksView$,
			"Pairs": PairsView$
		};

		const writable_props = ["quiz"];

		Object$$7.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console$$7.warn(`<QuizSection> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ("quiz" in $$props) $$invalidate(0, quiz = $$props.quiz);
		};

		$$self.$capture_state = () => ({
			SequenceView: SequenceView$,
			MultipleChoiceView: MultipleChoiceView$,
			BlanksView: BlanksView$,
			PairsView: PairsView$,
			Headline: Headline$,
			quiz,
			views,
			counter,
			current,
			$counter
		});

		$$self.$inject_state = $$props => {
			if ("quiz" in $$props) $$invalidate(0, quiz = $$props.quiz);
			if ("counter" in $$props) $$subscribe_counter($$invalidate(1, counter = $$props.counter));
			if ("current" in $$props) $$invalidate(2, current = $$props.current);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*quiz*/ 1) {
				$$subscribe_counter($$invalidate(1, counter = quiz.counter));
			}

			if ($$self.$$.dirty & /*quiz, $counter*/ 17) {
				$$invalidate(2, current = quiz.questions[$counter]);
			}
		};

		return [quiz, counter, current, views, $counter];
	}

	class QuizSection$ extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$$7, create_fragment$7, safe_not_equal, { quiz: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "QuizSection$",
				options,
				id: create_fragment$7.name
			});

			const { ctx } = this.$$;
			const props = options.props || {};

			if (/*quiz*/ ctx[0] === undefined && !("quiz" in props)) {
				console$$7.warn("<QuizSection> was created without expected prop 'quiz'");
			}
		}

		get quiz() {
			throw new Error$$7("<QuizSection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set quiz(value) {
			throw new Error$$7("<QuizSection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/components/Button.svelte generated by Svelte v3.32.3 */

	const { Error: Error$$8, Object: Object$$8, console: console$$8 } = globals;
	const file$$6 = "src/components/Button.svelte";

	// (6:10) Hello World
	function fallback_block$(ctx) {
		let t$;

		const block$ = {
			c: function create() {
				t$ = text("Hello World");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t$, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(t$);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: fallback_block$.name,
			type: "fallback",
			source: "(6:10) Hello World",
			ctx
		});

		return block$;
	}

	function create_fragment$8(ctx) {
		let button$;
		let current;
		let mounted;
		let dispose;
		const default_slot_template$ = /*#slots*/ ctx[3].default;
		const default_slot$ = create_slot(default_slot_template$, ctx, /*$$scope*/ ctx[2], null);
		const default_slot_or_fallback$ = default_slot$ || fallback_block$(ctx);

		const block$ = {
			c: function create() {
				button$ = element("button");
				if (default_slot_or_fallback$) default_slot_or_fallback$.c();
				button$.disabled = /*disabled*/ ctx[1];
				attr_dev(button$, "class", "svelte-v6jtpu");
				add_location(button$, file$$6, 4, 0, 129);
			},
			l: function claim(nodes) {
				throw new Error$$8("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, button$, anchor);

				if (default_slot_or_fallback$) {
					default_slot_or_fallback$.m(button$, null);
				}

				current = true;

				if (!mounted) {
					dispose = listen_dev(
						button$,
						"click",
						function () {
							if (is_function(/*buttonAction*/ ctx[0])) /*buttonAction*/ ctx[0].apply(this, arguments);
						},
						false,
						false,
						false
					);

					mounted = true;
				}
			},
			p: function update(new_ctx, [dirty]) {
				ctx = new_ctx;

				if (default_slot$) {
					if (default_slot$.p && dirty & /*$$scope*/ 4) {
						update_slot(default_slot$, default_slot_template$, ctx, /*$$scope*/ ctx[2], dirty, null, null);
					}
				}

				if (!current || dirty & /*disabled*/ 2) {
					prop_dev(button$, "disabled", /*disabled*/ ctx[1]);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot_or_fallback$, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot_or_fallback$, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(button$);
				if (default_slot_or_fallback$) default_slot_or_fallback$.d(detaching);
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_fragment$8.name,
			type: "component",
			source: "",
			ctx
		});

		return block$;
	}

	function instance$$8($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots("Button", slots, ['default']);
		let { buttonAction = () => alert("Life has never Svelte better") } = $$props;
		let { disabled = false } = $$props;
		const writable_props = ["buttonAction", "disabled"];

		Object$$8.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console$$8.warn(`<Button> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ("buttonAction" in $$props) $$invalidate(0, buttonAction = $$props.buttonAction);
			if ("disabled" in $$props) $$invalidate(1, disabled = $$props.disabled);
			if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({ buttonAction, disabled });

		$$self.$inject_state = $$props => {
			if ("buttonAction" in $$props) $$invalidate(0, buttonAction = $$props.buttonAction);
			if ("disabled" in $$props) $$invalidate(1, disabled = $$props.disabled);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [buttonAction, disabled, $$scope, slots];
	}

	class Button$ extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$$8, create_fragment$8, safe_not_equal, { buttonAction: 0, disabled: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Button$",
				options,
				id: create_fragment$8.name
			});
		}

		get buttonAction() {
			throw new Error$$8("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set buttonAction(value) {
			throw new Error$$8("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get disabled() {
			throw new Error$$8("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set disabled(value) {
			throw new Error$$8("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/slots/SpeechBubble.svelte generated by Svelte v3.32.3 */

	const { Error: Error$$9, Object: Object$$9, console: console$$9 } = globals;
	const file$$7 = "src/slots/SpeechBubble.svelte";

	function create_fragment$9(ctx) {
		let div$;
		let current;
		const default_slot_template$ = /*#slots*/ ctx[1].default;
		const default_slot$ = create_slot(default_slot_template$, ctx, /*$$scope*/ ctx[0], null);

		const block$ = {
			c: function create() {
				div$ = element("div");
				if (default_slot$) default_slot$.c();
				attr_dev(div$, "class", "quizdown-bubble svelte-10ooc5v");
				add_location(div$, file$$7, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error$$9("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div$, anchor);

				if (default_slot$) {
					default_slot$.m(div$, null);
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (default_slot$) {
					if (default_slot$.p && dirty & /*$$scope*/ 1) {
						update_slot(default_slot$, default_slot_template$, ctx, /*$$scope*/ ctx[0], dirty, null, null);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot$, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot$, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(div$);
				if (default_slot$) default_slot$.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_fragment$9.name,
			type: "component",
			source: "",
			ctx
		});

		return block$;
	}

	function instance$$9($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots("SpeechBubble", slots, ['default']);
		const writable_props = [];

		Object$$9.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console$$9.warn(`<SpeechBubble> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
		};

		return [$$scope, slots];
	}

	class SpeechBubble$ extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$$9, create_fragment$9, safe_not_equal, {});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "SpeechBubble$",
				options,
				id: create_fragment$9.name
			});
		}
	}

	/* src/components/Footer.svelte generated by Svelte v3.32.3 */

	const { Error: Error$$a, Object: Object$$a, console: console$$a } = globals;
	const file$$8 = "src/components/Footer.svelte";

	// (31:4) {:else}
	function create_else_block$_1(ctx) {
		let button$;
		let current;

		button$ = new Button$({
				props: {
					buttonAction: /*quiz*/ ctx[0].reset,
					$$slots: { default: [create_default_slot$_5] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block$ = {
			c: function create() {
				create_component(button$.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(button$, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const button$_changes$ = {};
				if (dirty & /*quiz*/ 1) button$_changes$.buttonAction = /*quiz*/ ctx[0].reset;

				if (dirty & /*$$scope*/ 256) {
					button$_changes$.$$scope = { dirty, ctx };
				}

				button$.$set(button$_changes$);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(button$.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(button$.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(button$, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_else_block$_1.name,
			type: "else",
			source: "(31:4) {:else}",
			ctx
		});

		return block$;
	}

	// (17:4) {#if !$finished}
	function create_if_block$$2(ctx) {
		let button0$;
		let t0$;
		let span$;
		let button1$;
		let t1$;
		let t2$;
		let current_block_type_index$;
		let if_block1$;
		let if_block1$_anchor$;
		let current;

		button0$ = new Button$({
				props: {
					disabled: /*$counter*/ ctx[1] === 0,
					buttonAction: /*quiz*/ ctx[0].previous,
					$$slots: { default: [create_default_slot$_4] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		button1$ = new Button$({
				props: {
					disabled: /*current*/ ctx[5].hint === null || /*current*/ ctx[5].hint === "",
					buttonAction: /*func$*/ ctx[7],
					$$slots: { default: [create_default_slot$_3] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		let if_block0$ = /*show_hint*/ ctx[2] && create_if_block$_2$1(ctx);
		const if_block_creators$ = [create_if_block$_1$1, create_else_block$$1];
		const if_blocks$ = [];

		function select_block_type$_1(ctx, dirty) {
			if (/*$counter*/ ctx[1] === /*counter*/ ctx[3].max - 1) return 0;
			return 1;
		}

		current_block_type_index$ = select_block_type$_1(ctx);
		if_block1$ = if_blocks$[current_block_type_index$] = if_block_creators$[current_block_type_index$](ctx);

		const block$ = {
			c: function create() {
				create_component(button0$.$$.fragment);
				t0$ = space();
				span$ = element("span");
				create_component(button1$.$$.fragment);
				t1$ = space();
				if (if_block0$) if_block0$.c();
				t2$ = space();
				if_block1$.c();
				if_block1$_anchor$ = empty();
				add_location(span$, file$$8, 20, 8, 599);
			},
			m: function mount(target, anchor) {
				mount_component(button0$, target, anchor);
				insert_dev(target, t0$, anchor);
				insert_dev(target, span$, anchor);
				mount_component(button1$, span$, null);
				append_dev(span$, t1$);
				if (if_block0$) if_block0$.m(span$, null);
				insert_dev(target, t2$, anchor);
				if_blocks$[current_block_type_index$].m(target, anchor);
				insert_dev(target, if_block1$_anchor$, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const button0$_changes$ = {};
				if (dirty & /*$counter*/ 2) button0$_changes$.disabled = /*$counter*/ ctx[1] === 0;
				if (dirty & /*quiz*/ 1) button0$_changes$.buttonAction = /*quiz*/ ctx[0].previous;

				if (dirty & /*$$scope*/ 256) {
					button0$_changes$.$$scope = { dirty, ctx };
				}

				button0$.$set(button0$_changes$);
				const button1$_changes$ = {};
				if (dirty & /*current*/ 32) button1$_changes$.disabled = /*current*/ ctx[5].hint === null || /*current*/ ctx[5].hint === "";
				if (dirty & /*show_hint*/ 4) button1$_changes$.buttonAction = /*func$*/ ctx[7];

				if (dirty & /*$$scope*/ 256) {
					button1$_changes$.$$scope = { dirty, ctx };
				}

				button1$.$set(button1$_changes$);

				if (/*show_hint*/ ctx[2]) {
					if (if_block0$) {
						if_block0$.p(ctx, dirty);

						if (dirty & /*show_hint*/ 4) {
							transition_in(if_block0$, 1);
						}
					} else {
						if_block0$ = create_if_block$_2$1(ctx);
						if_block0$.c();
						transition_in(if_block0$, 1);
						if_block0$.m(span$, null);
					}
				} else if (if_block0$) {
					group_outros();

					transition_out(if_block0$, 1, 1, () => {
						if_block0$ = null;
					});

					check_outros();
				}

				let previous_block_index$ = current_block_type_index$;
				current_block_type_index$ = select_block_type$_1(ctx);

				if (current_block_type_index$ === previous_block_index$) {
					if_blocks$[current_block_type_index$].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks$[previous_block_index$], 1, 1, () => {
						if_blocks$[previous_block_index$] = null;
					});

					check_outros();
					if_block1$ = if_blocks$[current_block_type_index$];

					if (!if_block1$) {
						if_block1$ = if_blocks$[current_block_type_index$] = if_block_creators$[current_block_type_index$](ctx);
						if_block1$.c();
					} else {
						if_block1$.p(ctx, dirty);
					}

					transition_in(if_block1$, 1);
					if_block1$.m(if_block1$_anchor$.parentNode, if_block1$_anchor$);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(button0$.$$.fragment, local);
				transition_in(button1$.$$.fragment, local);
				transition_in(if_block0$);
				transition_in(if_block1$);
				current = true;
			},
			o: function outro(local) {
				transition_out(button0$.$$.fragment, local);
				transition_out(button1$.$$.fragment, local);
				transition_out(if_block0$);
				transition_out(if_block1$);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(button0$, detaching);
				if (detaching) detach_dev(t0$);
				if (detaching) detach_dev(span$);
				destroy_component(button1$);
				if (if_block0$) if_block0$.d();
				if (detaching) detach_dev(t2$);
				if_blocks$[current_block_type_index$].d(detaching);
				if (detaching) detach_dev(if_block1$_anchor$);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_if_block$$2.name,
			type: "if",
			source: "(17:4) {#if !$finished}",
			ctx
		});

		return block$;
	}

	// (33:8) <Button buttonAction={quiz.reset}>
	function create_default_slot$_5(ctx) {
		let t$;

		const block$ = {
			c: function create() {
				t$ = text("One more time!");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t$, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(t$);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_default_slot$_5.name,
			type: "slot",
			source: "(33:8) <Button buttonAction={quiz.reset}>",
			ctx
		});

		return block$;
	}

	// (19:8) <Button disabled={$counter === 0} buttonAction={quiz.previous}>
	function create_default_slot$_4(ctx) {
		let t$;

		const block$ = {
			c: function create() {
				t$ = text("Previous");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t$, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(t$);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_default_slot$_4.name,
			type: "slot",
			source: "(19:8) <Button disabled={$counter === 0} buttonAction={quiz.previous}>",
			ctx
		});

		return block$;
	}

	// (22:12) <Button disabled={current.hint === null || current.hint === ''} buttonAction={() => show_hint = !show_hint}>
	function create_default_slot$_3(ctx) {
		let t$;

		const block$ = {
			c: function create() {
				t$ = text("Help me!");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t$, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(t$);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_default_slot$_3.name,
			type: "slot",
			source: "(22:12) <Button disabled={current.hint === null || current.hint === ''} buttonAction={() => show_hint = !show_hint}>",
			ctx
		});

		return block$;
	}

	// (23:12) {#if show_hint}
	function create_if_block$_2$1(ctx) {
		let speechbubble$;
		let current;

		speechbubble$ = new SpeechBubble$({
				props: {
					$$slots: { default: [create_default_slot$_2] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block$ = {
			c: function create() {
				create_component(speechbubble$.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(speechbubble$, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const speechbubble$_changes$ = {};

				if (dirty & /*$$scope, current*/ 288) {
					speechbubble$_changes$.$$scope = { dirty, ctx };
				}

				speechbubble$.$set(speechbubble$_changes$);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(speechbubble$.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(speechbubble$.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(speechbubble$, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_if_block$_2$1.name,
			type: "if",
			source: "(23:12) {#if show_hint}",
			ctx
		});

		return block$;
	}

	// (23:27) <SpeechBubble>
	function create_default_slot$_2(ctx) {
		let html_tag$;
		let raw$_value$ = /*current*/ ctx[5].hint + "";
		let html_anchor$;

		const block$ = {
			c: function create() {
				html_anchor$ = empty();
				html_tag$ = new HtmlTag(html_anchor$);
			},
			m: function mount(target, anchor) {
				html_tag$.m(raw$_value$, target, anchor);
				insert_dev(target, html_anchor$, anchor);
			},
			p: function update(ctx, dirty) {
				if (dirty & /*current*/ 32 && raw$_value$ !== (raw$_value$ = /*current*/ ctx[5].hint + "")) html_tag$.p(raw$_value$);
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(html_anchor$);
				if (detaching) html_tag$.d();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_default_slot$_2.name,
			type: "slot",
			source: "(23:27) <SpeechBubble>",
			ctx
		});

		return block$;
	}

	// (28:8) {:else}
	function create_else_block$$1(ctx) {
		let button$;
		let current;

		button$ = new Button$({
				props: {
					buttonAction: /*quiz*/ ctx[0].next,
					$$slots: { default: [create_default_slot$_1] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block$ = {
			c: function create() {
				create_component(button$.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(button$, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const button$_changes$ = {};
				if (dirty & /*quiz*/ 1) button$_changes$.buttonAction = /*quiz*/ ctx[0].next;

				if (dirty & /*$$scope*/ 256) {
					button$_changes$.$$scope = { dirty, ctx };
				}

				button$.$set(button$_changes$);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(button$.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(button$.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(button$, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_else_block$$1.name,
			type: "else",
			source: "(28:8) {:else}",
			ctx
		});

		return block$;
	}

	// (26:8) {#if $counter === counter.max-1}
	function create_if_block$_1$1(ctx) {
		let button$;
		let current;

		button$ = new Button$({
				props: {
					buttonAction: /*quiz*/ ctx[0].calc_points,
					$$slots: { default: [create_default_slot$$2] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block$ = {
			c: function create() {
				create_component(button$.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(button$, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const button$_changes$ = {};
				if (dirty & /*quiz*/ 1) button$_changes$.buttonAction = /*quiz*/ ctx[0].calc_points;

				if (dirty & /*$$scope*/ 256) {
					button$_changes$.$$scope = { dirty, ctx };
				}

				button$.$set(button$_changes$);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(button$.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(button$.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(button$, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_if_block$_1$1.name,
			type: "if",
			source: "(26:8) {#if $counter === counter.max-1}",
			ctx
		});

		return block$;
	}

	// (29:12) <Button buttonAction={quiz.next}>
	function create_default_slot$_1(ctx) {
		let t$;

		const block$ = {
			c: function create() {
				t$ = text("Next");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t$, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(t$);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_default_slot$_1.name,
			type: "slot",
			source: "(29:12) <Button buttonAction={quiz.next}>",
			ctx
		});

		return block$;
	}

	// (27:12) <Button buttonAction={quiz.calc_points}>
	function create_default_slot$$2(ctx) {
		let t$;

		const block$ = {
			c: function create() {
				t$ = text("Evalution");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t$, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(t$);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_default_slot$$2.name,
			type: "slot",
			source: "(27:12) <Button buttonAction={quiz.calc_points}>",
			ctx
		});

		return block$;
	}

	function create_fragment$a(ctx) {
		let div0$;
		let current_block_type_index$;
		let if_block$;
		let t0$;
		let hr$;
		let t1$;
		let div1$;
		let t2$;
		let a$;
		let t4$;
		let current;
		const if_block_creators$ = [create_if_block$$2, create_else_block$_1];
		const if_blocks$ = [];

		function select_block_type$(ctx, dirty) {
			if (!/*$finished*/ ctx[6]) return 0;
			return 1;
		}

		current_block_type_index$ = select_block_type$(ctx);
		if_block$ = if_blocks$[current_block_type_index$] = if_block_creators$[current_block_type_index$](ctx);

		const block$ = {
			c: function create() {
				div0$ = element("div");
				if_block$.c();
				t0$ = space();
				hr$ = element("hr");
				t1$ = space();
				div1$ = element("div");
				t2$ = text("This quiz was created with ");
				a$ = element("a");
				a$.textContent = "quizdown-js";
				t4$ = text(".");
				attr_dev(div0$, "class", "quizdown-button-row svelte-lnufs9");
				add_location(div0$, file$$8, 15, 0, 337);
				attr_dev(hr$, "class", "svelte-lnufs9");
				add_location(hr$, file$$8, 36, 0, 1243);
				attr_dev(a$, "href", "https://github.com/bonartm/quizdown-js");
				attr_dev(a$, "class", "svelte-lnufs9");
				add_location(a$, file$$8, 38, 57, 1306);
				attr_dev(div1$, "class", "quizdown-credits svelte-lnufs9");
				add_location(div1$, file$$8, 38, 0, 1249);
			},
			l: function claim(nodes) {
				throw new Error$$a("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div0$, anchor);
				if_blocks$[current_block_type_index$].m(div0$, null);
				insert_dev(target, t0$, anchor);
				insert_dev(target, hr$, anchor);
				insert_dev(target, t1$, anchor);
				insert_dev(target, div1$, anchor);
				append_dev(div1$, t2$);
				append_dev(div1$, a$);
				append_dev(div1$, t4$);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				let previous_block_index$ = current_block_type_index$;
				current_block_type_index$ = select_block_type$(ctx);

				if (current_block_type_index$ === previous_block_index$) {
					if_blocks$[current_block_type_index$].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks$[previous_block_index$], 1, 1, () => {
						if_blocks$[previous_block_index$] = null;
					});

					check_outros();
					if_block$ = if_blocks$[current_block_type_index$];

					if (!if_block$) {
						if_block$ = if_blocks$[current_block_type_index$] = if_block_creators$[current_block_type_index$](ctx);
						if_block$.c();
					} else {
						if_block$.p(ctx, dirty);
					}

					transition_in(if_block$, 1);
					if_block$.m(div0$, null);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block$);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block$);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(div0$);
				if_blocks$[current_block_type_index$].d();
				if (detaching) detach_dev(t0$);
				if (detaching) detach_dev(hr$);
				if (detaching) detach_dev(t1$);
				if (detaching) detach_dev(div1$);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_fragment$a.name,
			type: "component",
			source: "",
			ctx
		});

		return block$;
	}

	function instance$$a($$self, $$props, $$invalidate) {
		let counter;
		let finished;
		let current;

		let $counter,
			$$unsubscribe_counter = noop,
			$$subscribe_counter = () => ($$unsubscribe_counter(), $$unsubscribe_counter = subscribe(counter, $$value => $$invalidate(1, $counter = $$value)), counter);

		let $finished,
			$$unsubscribe_finished = noop,
			$$subscribe_finished = () => ($$unsubscribe_finished(), $$unsubscribe_finished = subscribe(finished, $$value => $$invalidate(6, $finished = $$value)), finished);

		$$self.$$.on_destroy.push(() => $$unsubscribe_counter());
		$$self.$$.on_destroy.push(() => $$unsubscribe_finished());
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots("Footer", slots, []);
		
		let { quiz } = $$props;
		let show_hint = false;
		const writable_props = ["quiz"];

		Object$$a.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console$$a.warn(`<Footer> was created with unknown prop '${key}'`);
		});

		const func$ = () => $$invalidate(2, show_hint = !show_hint);

		$$self.$$set = $$props => {
			if ("quiz" in $$props) $$invalidate(0, quiz = $$props.quiz);
		};

		$$self.$capture_state = () => ({
			Button: Button$,
			quiz,
			SpeechBubble: SpeechBubble$,
			show_hint,
			counter,
			finished,
			current,
			$counter,
			$finished
		});

		$$self.$inject_state = $$props => {
			if ("quiz" in $$props) $$invalidate(0, quiz = $$props.quiz);
			if ("show_hint" in $$props) $$invalidate(2, show_hint = $$props.show_hint);
			if ("counter" in $$props) $$subscribe_counter($$invalidate(3, counter = $$props.counter));
			if ("finished" in $$props) $$subscribe_finished($$invalidate(4, finished = $$props.finished));
			if ("current" in $$props) $$invalidate(5, current = $$props.current);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*quiz*/ 1) {
				$$subscribe_counter($$invalidate(3, counter = quiz.counter));
			}

			if ($$self.$$.dirty & /*quiz*/ 1) {
				$$subscribe_finished($$invalidate(4, finished = quiz.finished));
			}

			if ($$self.$$.dirty & /*quiz, $counter*/ 3) {
				$$invalidate(5, current = quiz.questions[$counter]);
			}

			if ($$self.$$.dirty & /*$counter*/ 2) {
				// disable hint on new question
				{
					$$invalidate(2, show_hint = false);
				}
			}
		};

		return [quiz, $counter, show_hint, counter, finished, current, $finished, func$];
	}

	class Footer$ extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$$a, create_fragment$a, safe_not_equal, { quiz: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Footer$",
				options,
				id: create_fragment$a.name
			});

			const { ctx } = this.$$;
			const props = options.props || {};

			if (/*quiz*/ ctx[0] === undefined && !("quiz" in props)) {
				console$$a.warn("<Footer> was created without expected prop 'quiz'");
			}
		}

		get quiz() {
			throw new Error$$a("<Footer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set quiz(value) {
			throw new Error$$a("<Footer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/components/ProgressBar.svelte generated by Svelte v3.32.3 */

	const { Error: Error$$b, Object: Object$$b, console: console$$b } = globals;
	const file$$9 = "src/components/ProgressBar.svelte";

	// (24:8) {#if !$finished}
	function create_if_block$$3(ctx) {
		let t0$_value$ = /*$counter*/ ctx[1] + 1 + "";
		let t0$;
		let t1$;
		let t2$_value$ = /*counter*/ ctx[2].max + "";
		let t2$;

		const block$ = {
			c: function create() {
				t0$ = text(t0$_value$);
				t1$ = text("/");
				t2$ = text(t2$_value$);
			},
			m: function mount(target, anchor) {
				insert_dev(target, t0$, anchor);
				insert_dev(target, t1$, anchor);
				insert_dev(target, t2$, anchor);
			},
			p: function update(ctx, dirty) {
				if (dirty & /*$counter*/ 2 && t0$_value$ !== (t0$_value$ = /*$counter*/ ctx[1] + 1 + "")) set_data_dev(t0$, t0$_value$);
				if (dirty & /*counter*/ 4 && t2$_value$ !== (t2$_value$ = /*counter*/ ctx[2].max + "")) set_data_dev(t2$, t2$_value$);
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(t0$);
				if (detaching) detach_dev(t1$);
				if (detaching) detach_dev(t2$);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_if_block$$3.name,
			type: "if",
			source: "(24:8) {#if !$finished}",
			ctx
		});

		return block$;
	}

	function create_fragment$b(ctx) {
		let div$;
		let span$;
		let if_block$ = !/*$finished*/ ctx[0] && create_if_block$$3(ctx);

		const block$ = {
			c: function create() {
				div$ = element("div");
				span$ = element("span");
				if (if_block$) if_block$.c();
				attr_dev(span$, "class", "value svelte-nq49c4");
				set_style(span$, "width", /*progress_percent*/ ctx[4]);
				add_location(span$, file$$9, 22, 4, 585);
				attr_dev(div$, "class", "quizdown-progress svelte-nq49c4");
				attr_dev(div$, "data-label", "");
				add_location(div$, file$$9, 21, 0, 535);
			},
			l: function claim(nodes) {
				throw new Error$$b("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div$, anchor);
				append_dev(div$, span$);
				if (if_block$) if_block$.m(span$, null);
			},
			p: function update(ctx, [dirty]) {
				if (!/*$finished*/ ctx[0]) {
					if (if_block$) {
						if_block$.p(ctx, dirty);
					} else {
						if_block$ = create_if_block$$3(ctx);
						if_block$.c();
						if_block$.m(span$, null);
					}
				} else if (if_block$) {
					if_block$.d(1);
					if_block$ = null;
				}

				if (dirty & /*progress_percent*/ 16) {
					set_style(span$, "width", /*progress_percent*/ ctx[4]);
				}
			},
			i: noop,
			o: noop,
			d: function destroy(detaching) {
				if (detaching) detach_dev(div$);
				if (if_block$) if_block$.d();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_fragment$b.name,
			type: "component",
			source: "",
			ctx
		});

		return block$;
	}

	function instance$$b($$self, $$props, $$invalidate) {
		let counter;
		let finished;
		let progress_percent;

		let $finished,
			$$unsubscribe_finished = noop,
			$$subscribe_finished = () => ($$unsubscribe_finished(), $$unsubscribe_finished = subscribe(finished, $$value => $$invalidate(0, $finished = $$value)), finished);

		let $counter,
			$$unsubscribe_counter = noop,
			$$subscribe_counter = () => ($$unsubscribe_counter(), $$unsubscribe_counter = subscribe(counter, $$value => $$invalidate(1, $counter = $$value)), counter);

		let $animated_current_block;
		$$self.$$.on_destroy.push(() => $$unsubscribe_finished());
		$$self.$$.on_destroy.push(() => $$unsubscribe_counter());
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots("ProgressBar", slots, []);
		
		let { quiz } = $$props;
		const animated_current_block = tweened(0, { duration: 400, easing: cubicOut });
		validate_store(animated_current_block, "animated_current_block");
		component_subscribe($$self, animated_current_block, value => $$invalidate(7, $animated_current_block = value));
		const writable_props = ["quiz"];

		Object$$b.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console$$b.warn(`<ProgressBar> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ("quiz" in $$props) $$invalidate(6, quiz = $$props.quiz);
		};

		$$self.$capture_state = () => ({
			tweened,
			cubicOut,
			quiz,
			animated_current_block,
			counter,
			finished,
			$finished,
			$counter,
			progress_percent,
			$animated_current_block
		});

		$$self.$inject_state = $$props => {
			if ("quiz" in $$props) $$invalidate(6, quiz = $$props.quiz);
			if ("counter" in $$props) $$subscribe_counter($$invalidate(2, counter = $$props.counter));
			if ("finished" in $$props) $$subscribe_finished($$invalidate(3, finished = $$props.finished));
			if ("progress_percent" in $$props) $$invalidate(4, progress_percent = $$props.progress_percent);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*quiz*/ 64) {
				$$subscribe_counter($$invalidate(2, counter = quiz.counter));
			}

			if ($$self.$$.dirty & /*quiz*/ 64) {
				$$subscribe_finished($$invalidate(3, finished = quiz.finished));
			}

			if ($$self.$$.dirty & /*$finished, quiz, $counter*/ 67) {
				{
					if ($finished) {
						animated_current_block.set(quiz.counter.max - 0.5);
					} else {
						animated_current_block.set($counter + 0.1);
					}
				}
			}

			if ($$self.$$.dirty & /*$animated_current_block, quiz*/ 192) {
				$$invalidate(4, progress_percent = String($animated_current_block / (quiz.counter.max - 0.5) * 100) + "%");
			}
		};

		return [
			$finished,
			$counter,
			counter,
			finished,
			progress_percent,
			animated_current_block,
			quiz,
			$animated_current_block
		];
	}

	class ProgressBar$ extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$$b, create_fragment$b, safe_not_equal, { quiz: 6 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "ProgressBar$",
				options,
				id: create_fragment$b.name
			});

			const { ctx } = this.$$;
			const props = options.props || {};

			if (/*quiz*/ ctx[6] === undefined && !("quiz" in props)) {
				console$$b.warn("<ProgressBar> was created without expected prop 'quiz'");
			}
		}

		get quiz() {
			throw new Error$$b("<ProgressBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set quiz(value) {
			throw new Error$$b("<ProgressBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/App.svelte generated by Svelte v3.32.3 */

	const { Error: Error$$c, Object: Object$$c, console: console$$c } = globals;
	const file$$a = "src/App.svelte";

	// (16:0) {:else}
	function create_else_block$$2(ctx) {
		let resultsection$;
		let current;

		resultsection$ = new ResultSection$({
				props: { quiz: /*quiz*/ ctx[0] },
				$$inline: true
			});

		const block$ = {
			c: function create() {
				create_component(resultsection$.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(resultsection$, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const resultsection$_changes$ = {};
				if (dirty & /*quiz*/ 1) resultsection$_changes$.quiz = /*quiz*/ ctx[0];
				resultsection$.$set(resultsection$_changes$);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(resultsection$.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(resultsection$.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(resultsection$, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_else_block$$2.name,
			type: "else",
			source: "(16:0) {:else}",
			ctx
		});

		return block$;
	}

	// (14:0) {#if !$finished}
	function create_if_block$$4(ctx) {
		let quizsection$;
		let current;

		quizsection$ = new QuizSection$({
				props: { quiz: /*quiz*/ ctx[0] },
				$$inline: true
			});

		const block$ = {
			c: function create() {
				create_component(quizsection$.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(quizsection$, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const quizsection$_changes$ = {};
				if (dirty & /*quiz*/ 1) quizsection$_changes$.quiz = /*quiz*/ ctx[0];
				quizsection$.$set(quizsection$_changes$);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(quizsection$.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(quizsection$.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(quizsection$, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_if_block$$4.name,
			type: "if",
			source: "(14:0) {#if !$finished}",
			ctx
		});

		return block$;
	}

	function create_fragment$c(ctx) {
		let div$;
		let progressbar$;
		let t0$;
		let current_block_type_index$;
		let if_block$;
		let t1$;
		let footer$;
		let current;

		progressbar$ = new ProgressBar$({
				props: { quiz: /*quiz*/ ctx[0] },
				$$inline: true
			});

		const if_block_creators$ = [create_if_block$$4, create_else_block$$2];
		const if_blocks$ = [];

		function select_block_type$(ctx, dirty) {
			if (!/*$finished*/ ctx[2]) return 0;
			return 1;
		}

		current_block_type_index$ = select_block_type$(ctx);
		if_block$ = if_blocks$[current_block_type_index$] = if_block_creators$[current_block_type_index$](ctx);

		footer$ = new Footer$({
				props: { quiz: /*quiz*/ ctx[0] },
				$$inline: true
			});

		const block$ = {
			c: function create() {
				div$ = element("div");
				create_component(progressbar$.$$.fragment);
				t0$ = space();
				if_block$.c();
				t1$ = space();
				create_component(footer$.$$.fragment);
				attr_dev(div$, "class", "quizdown-content");
				add_location(div$, file$$a, 10, 0, 335);
			},
			l: function claim(nodes) {
				throw new Error$$c("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div$, anchor);
				mount_component(progressbar$, div$, null);
				append_dev(div$, t0$);
				if_blocks$[current_block_type_index$].m(div$, null);
				append_dev(div$, t1$);
				mount_component(footer$, div$, null);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const progressbar$_changes$ = {};
				if (dirty & /*quiz*/ 1) progressbar$_changes$.quiz = /*quiz*/ ctx[0];
				progressbar$.$set(progressbar$_changes$);
				let previous_block_index$ = current_block_type_index$;
				current_block_type_index$ = select_block_type$(ctx);

				if (current_block_type_index$ === previous_block_index$) {
					if_blocks$[current_block_type_index$].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks$[previous_block_index$], 1, 1, () => {
						if_blocks$[previous_block_index$] = null;
					});

					check_outros();
					if_block$ = if_blocks$[current_block_type_index$];

					if (!if_block$) {
						if_block$ = if_blocks$[current_block_type_index$] = if_block_creators$[current_block_type_index$](ctx);
						if_block$.c();
					} else {
						if_block$.p(ctx, dirty);
					}

					transition_in(if_block$, 1);
					if_block$.m(div$, t1$);
				}

				const footer$_changes$ = {};
				if (dirty & /*quiz*/ 1) footer$_changes$.quiz = /*quiz*/ ctx[0];
				footer$.$set(footer$_changes$);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(progressbar$.$$.fragment, local);
				transition_in(if_block$);
				transition_in(footer$.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(progressbar$.$$.fragment, local);
				transition_out(if_block$);
				transition_out(footer$.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(div$);
				destroy_component(progressbar$);
				if_blocks$[current_block_type_index$].d();
				destroy_component(footer$);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block: block$,
			id: create_fragment$c.name,
			type: "component",
			source: "",
			ctx
		});

		return block$;
	}

	function instance$$c($$self, $$props, $$invalidate) {
		let finished;

		let $finished,
			$$unsubscribe_finished = noop,
			$$subscribe_finished = () => ($$unsubscribe_finished(), $$unsubscribe_finished = subscribe(finished, $$value => $$invalidate(2, $finished = $$value)), finished);

		$$self.$$.on_destroy.push(() => $$unsubscribe_finished());
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots("App", slots, []);
		
		let { quiz } = $$props;
		const writable_props = ["quiz"];

		Object$$c.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console$$c.warn(`<App> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ("quiz" in $$props) $$invalidate(0, quiz = $$props.quiz);
		};

		$$self.$capture_state = () => ({
			ResultSection: ResultSection$,
			QuizSection: QuizSection$,
			Footer: Footer$,
			ProgressBar: ProgressBar$,
			quiz,
			finished,
			$finished
		});

		$$self.$inject_state = $$props => {
			if ("quiz" in $$props) $$invalidate(0, quiz = $$props.quiz);
			if ("finished" in $$props) $$subscribe_finished($$invalidate(1, finished = $$props.finished));
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*quiz*/ 1) {
				$$subscribe_finished($$invalidate(1, finished = quiz.finished));
			}
		};

		return [quiz, finished, $finished];
	}

	class App$ extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$$c, create_fragment$c, safe_not_equal, { quiz: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "App$",
				options,
				id: create_fragment$c.name
			});

			const { ctx } = this.$$;
			const props = options.props || {};

			if (/*quiz*/ ctx[0] === undefined && !("quiz" in props)) {
				console$$c.warn("<App> was created without expected prop 'quiz'");
			}
		}

		get quiz() {
			throw new Error$$c("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set quiz(value) {
			throw new Error$$c("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/*! @license DOMPurify | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.2.2/LICENSE */

	var purify = createCommonjsModule(function (module, exports) {
	(function (global, factory) {
	  module.exports = factory() ;
	}(commonjsGlobal, function () {
	  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	  var hasOwnProperty = Object.hasOwnProperty,
	      setPrototypeOf = Object.setPrototypeOf,
	      isFrozen = Object.isFrozen,
	      getPrototypeOf = Object.getPrototypeOf,
	      getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	  var freeze = Object.freeze,
	      seal = Object.seal,
	      create = Object.create; // eslint-disable-line import/no-mutable-exports

	  var _ref = typeof Reflect !== 'undefined' && Reflect,
	      apply = _ref.apply,
	      construct = _ref.construct;

	  if (!apply) {
	    apply = function apply(fun, thisValue, args) {
	      return fun.apply(thisValue, args);
	    };
	  }

	  if (!freeze) {
	    freeze = function freeze(x) {
	      return x;
	    };
	  }

	  if (!seal) {
	    seal = function seal(x) {
	      return x;
	    };
	  }

	  if (!construct) {
	    construct = function construct(Func, args) {
	      return new (Function.prototype.bind.apply(Func, [null].concat(_toConsumableArray(args))))();
	    };
	  }

	  var arrayForEach = unapply(Array.prototype.forEach);
	  var arrayPop = unapply(Array.prototype.pop);
	  var arrayPush = unapply(Array.prototype.push);

	  var stringToLowerCase = unapply(String.prototype.toLowerCase);
	  var stringMatch = unapply(String.prototype.match);
	  var stringReplace = unapply(String.prototype.replace);
	  var stringIndexOf = unapply(String.prototype.indexOf);
	  var stringTrim = unapply(String.prototype.trim);

	  var regExpTest = unapply(RegExp.prototype.test);

	  var typeErrorCreate = unconstruct(TypeError);

	  function unapply(func) {
	    return function (thisArg) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      return apply(func, thisArg, args);
	    };
	  }

	  function unconstruct(func) {
	    return function () {
	      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      return construct(func, args);
	    };
	  }

	  /* Add properties to a lookup table */
	  function addToSet(set, array) {
	    if (setPrototypeOf) {
	      // Make 'in' and truthy checks like Boolean(set.constructor)
	      // independent of any properties defined on Object.prototype.
	      // Prevent prototype setters from intercepting set as a this value.
	      setPrototypeOf(set, null);
	    }

	    var l = array.length;
	    while (l--) {
	      var element = array[l];
	      if (typeof element === 'string') {
	        var lcElement = stringToLowerCase(element);
	        if (lcElement !== element) {
	          // Config presets (e.g. tags.js, attrs.js) are immutable.
	          if (!isFrozen(array)) {
	            array[l] = lcElement;
	          }

	          element = lcElement;
	        }
	      }

	      set[element] = true;
	    }

	    return set;
	  }

	  /* Shallow clone an object */
	  function clone(object) {
	    var newObject = create(null);

	    var property = void 0;
	    for (property in object) {
	      if (apply(hasOwnProperty, object, [property])) {
	        newObject[property] = object[property];
	      }
	    }

	    return newObject;
	  }

	  /* IE10 doesn't support __lookupGetter__ so lets'
	   * simulate it. It also automatically checks
	   * if the prop is function or getter and behaves
	   * accordingly. */
	  function lookupGetter(object, prop) {
	    while (object !== null) {
	      var desc = getOwnPropertyDescriptor(object, prop);
	      if (desc) {
	        if (desc.get) {
	          return unapply(desc.get);
	        }

	        if (typeof desc.value === 'function') {
	          return unapply(desc.value);
	        }
	      }

	      object = getPrototypeOf(object);
	    }

	    return null;
	  }

	  var html = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']);

	  // SVG
	  var svg = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);

	  var svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);

	  // List of SVG elements that are disallowed by default.
	  // We still need to know them so that we can do namespace
	  // checks properly in case one wants to add them to
	  // allow-list.
	  var svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'fedropshadow', 'feimage', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);

	  var mathMl = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover']);

	  // Similarly to SVG, we want to know all MathML elements,
	  // even those that we disallow by default.
	  var mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);

	  var text = freeze(['#text']);

	  var html$1 = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns']);

	  var svg$1 = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);

	  var mathMl$1 = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);

	  var xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);

	  // eslint-disable-next-line unicorn/better-regex
	  var MUSTACHE_EXPR = seal(/\{\{[\s\S]*|[\s\S]*\}\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode
	  var ERB_EXPR = seal(/<%[\s\S]*|[\s\S]*%>/gm);
	  var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/); // eslint-disable-line no-useless-escape
	  var ARIA_ATTR = seal(/^aria-[\-\w]+$/); // eslint-disable-line no-useless-escape
	  var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i // eslint-disable-line no-useless-escape
	  );
	  var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
	  var ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g // eslint-disable-line no-control-regex
	  );

	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	  function _toConsumableArray$1(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	  var getGlobal = function getGlobal() {
	    return typeof window === 'undefined' ? null : window;
	  };

	  /**
	   * Creates a no-op policy for internal use only.
	   * Don't export this function outside this module!
	   * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.
	   * @param {Document} document The document object (to determine policy name suffix)
	   * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types
	   * are not supported).
	   */
	  var _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {
	    if ((typeof trustedTypes === 'undefined' ? 'undefined' : _typeof(trustedTypes)) !== 'object' || typeof trustedTypes.createPolicy !== 'function') {
	      return null;
	    }

	    // Allow the callers to control the unique policy name
	    // by adding a data-tt-policy-suffix to the script element with the DOMPurify.
	    // Policy creation with duplicate names throws in Trusted Types.
	    var suffix = null;
	    var ATTR_NAME = 'data-tt-policy-suffix';
	    if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) {
	      suffix = document.currentScript.getAttribute(ATTR_NAME);
	    }

	    var policyName = 'dompurify' + (suffix ? '#' + suffix : '');

	    try {
	      return trustedTypes.createPolicy(policyName, {
	        createHTML: function createHTML(html$$1) {
	          return html$$1;
	        }
	      });
	    } catch (_) {
	      // Policy creation failed (most likely another DOMPurify script has
	      // already run). Skip creating the policy, as this will only cause errors
	      // if TT are enforced.
	      console.warn('TrustedTypes policy ' + policyName + ' could not be created.');
	      return null;
	    }
	  };

	  function createDOMPurify() {
	    var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();

	    var DOMPurify = function DOMPurify(root) {
	      return createDOMPurify(root);
	    };

	    /**
	     * Version label, exposed for easier checks
	     * if DOMPurify is up to date or not
	     */
	    DOMPurify.version = '2.2.6';

	    /**
	     * Array of elements that DOMPurify removed during sanitation.
	     * Empty if nothing was removed.
	     */
	    DOMPurify.removed = [];

	    if (!window || !window.document || window.document.nodeType !== 9) {
	      // Not running in a browser, provide a factory function
	      // so that you can pass your own Window
	      DOMPurify.isSupported = false;

	      return DOMPurify;
	    }

	    var originalDocument = window.document;

	    var document = window.document;
	    var DocumentFragment = window.DocumentFragment,
	        HTMLTemplateElement = window.HTMLTemplateElement,
	        Node = window.Node,
	        Element = window.Element,
	        NodeFilter = window.NodeFilter,
	        _window$NamedNodeMap = window.NamedNodeMap,
	        NamedNodeMap = _window$NamedNodeMap === undefined ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap,
	        Text = window.Text,
	        Comment = window.Comment,
	        DOMParser = window.DOMParser,
	        trustedTypes = window.trustedTypes;


	    var ElementPrototype = Element.prototype;

	    var cloneNode = lookupGetter(ElementPrototype, 'cloneNode');
	    var getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');
	    var getChildNodes = lookupGetter(ElementPrototype, 'childNodes');
	    var getParentNode = lookupGetter(ElementPrototype, 'parentNode');

	    // As per issue #47, the web-components registry is inherited by a
	    // new document created via createHTMLDocument. As per the spec
	    // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)
	    // a new empty registry is used when creating a template contents owner
	    // document, so we use that as our parent document to ensure nothing
	    // is inherited.
	    if (typeof HTMLTemplateElement === 'function') {
	      var template = document.createElement('template');
	      if (template.content && template.content.ownerDocument) {
	        document = template.content.ownerDocument;
	      }
	    }

	    var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);
	    var emptyHTML = trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML('') : '';

	    var _document = document,
	        implementation = _document.implementation,
	        createNodeIterator = _document.createNodeIterator,
	        getElementsByTagName = _document.getElementsByTagName,
	        createDocumentFragment = _document.createDocumentFragment;
	    var importNode = originalDocument.importNode;


	    var documentMode = {};
	    try {
	      documentMode = clone(document).documentMode ? document.documentMode : {};
	    } catch (_) {}

	    var hooks = {};

	    /**
	     * Expose whether this browser supports running the full DOMPurify.
	     */
	    DOMPurify.isSupported = implementation && typeof implementation.createHTMLDocument !== 'undefined' && documentMode !== 9;

	    var MUSTACHE_EXPR$$1 = MUSTACHE_EXPR,
	        ERB_EXPR$$1 = ERB_EXPR,
	        DATA_ATTR$$1 = DATA_ATTR,
	        ARIA_ATTR$$1 = ARIA_ATTR,
	        IS_SCRIPT_OR_DATA$$1 = IS_SCRIPT_OR_DATA,
	        ATTR_WHITESPACE$$1 = ATTR_WHITESPACE;
	    var IS_ALLOWED_URI$$1 = IS_ALLOWED_URI;

	    /**
	     * We consider the elements and attributes below to be safe. Ideally
	     * don't add any new ones but feel free to remove unwanted ones.
	     */

	    /* allowed element names */

	    var ALLOWED_TAGS = null;
	    var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(html), _toConsumableArray$1(svg), _toConsumableArray$1(svgFilters), _toConsumableArray$1(mathMl), _toConsumableArray$1(text)));

	    /* Allowed attribute names */
	    var ALLOWED_ATTR = null;
	    var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray$1(html$1), _toConsumableArray$1(svg$1), _toConsumableArray$1(mathMl$1), _toConsumableArray$1(xml)));

	    /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */
	    var FORBID_TAGS = null;

	    /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */
	    var FORBID_ATTR = null;

	    /* Decide if ARIA attributes are okay */
	    var ALLOW_ARIA_ATTR = true;

	    /* Decide if custom data attributes are okay */
	    var ALLOW_DATA_ATTR = true;

	    /* Decide if unknown protocols are okay */
	    var ALLOW_UNKNOWN_PROTOCOLS = false;

	    /* Output should be safe for common template engines.
	     * This means, DOMPurify removes data attributes, mustaches and ERB
	     */
	    var SAFE_FOR_TEMPLATES = false;

	    /* Decide if document with <html>... should be returned */
	    var WHOLE_DOCUMENT = false;

	    /* Track whether config is already set on this instance of DOMPurify. */
	    var SET_CONFIG = false;

	    /* Decide if all elements (e.g. style, script) must be children of
	     * document.body. By default, browsers might move them to document.head */
	    var FORCE_BODY = false;

	    /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html
	     * string (or a TrustedHTML object if Trusted Types are supported).
	     * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead
	     */
	    var RETURN_DOM = false;

	    /* Decide if a DOM `DocumentFragment` should be returned, instead of a html
	     * string  (or a TrustedHTML object if Trusted Types are supported) */
	    var RETURN_DOM_FRAGMENT = false;

	    /* If `RETURN_DOM` or `RETURN_DOM_FRAGMENT` is enabled, decide if the returned DOM
	     * `Node` is imported into the current `Document`. If this flag is not enabled the
	     * `Node` will belong (its ownerDocument) to a fresh `HTMLDocument`, created by
	     * DOMPurify.
	     *
	     * This defaults to `true` starting DOMPurify 2.2.0. Note that setting it to `false`
	     * might cause XSS from attacks hidden in closed shadowroots in case the browser
	     * supports Declarative Shadow: DOM https://web.dev/declarative-shadow-dom/
	     */
	    var RETURN_DOM_IMPORT = true;

	    /* Try to return a Trusted Type object instead of a string, return a string in
	     * case Trusted Types are not supported  */
	    var RETURN_TRUSTED_TYPE = false;

	    /* Output should be free from DOM clobbering attacks? */
	    var SANITIZE_DOM = true;

	    /* Keep element content when removing element? */
	    var KEEP_CONTENT = true;

	    /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead
	     * of importing it into a new Document and returning a sanitized copy */
	    var IN_PLACE = false;

	    /* Allow usage of profiles like html, svg and mathMl */
	    var USE_PROFILES = {};

	    /* Tags to ignore content of when KEEP_CONTENT is true */
	    var FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);

	    /* Tags that are safe for data: URIs */
	    var DATA_URI_TAGS = null;
	    var DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);

	    /* Attributes safe for values like "javascript:" */
	    var URI_SAFE_ATTRIBUTES = null;
	    var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'summary', 'title', 'value', 'style', 'xmlns']);

	    /* Keep a reference to config to pass to hooks */
	    var CONFIG = null;

	    /* Ideally, do not touch anything below this line */
	    /* ______________________________________________ */

	    var formElement = document.createElement('form');

	    /**
	     * _parseConfig
	     *
	     * @param  {Object} cfg optional config literal
	     */
	    // eslint-disable-next-line complexity
	    var _parseConfig = function _parseConfig(cfg) {
	      if (CONFIG && CONFIG === cfg) {
	        return;
	      }

	      /* Shield configuration object from tampering */
	      if (!cfg || (typeof cfg === 'undefined' ? 'undefined' : _typeof(cfg)) !== 'object') {
	        cfg = {};
	      }

	      /* Shield configuration object from prototype pollution */
	      cfg = clone(cfg);

	      /* Set configuration parameters */
	      ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;
	      ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;
	      URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR) : DEFAULT_URI_SAFE_ATTRIBUTES;
	      DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS) : DEFAULT_DATA_URI_TAGS;
	      FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS) : {};
	      FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR) : {};
	      USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;
	      ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true
	      ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true
	      ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false
	      SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false
	      WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false
	      RETURN_DOM = cfg.RETURN_DOM || false; // Default false
	      RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false
	      RETURN_DOM_IMPORT = cfg.RETURN_DOM_IMPORT !== false; // Default true
	      RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false
	      FORCE_BODY = cfg.FORCE_BODY || false; // Default false
	      SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true
	      KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true
	      IN_PLACE = cfg.IN_PLACE || false; // Default false
	      IS_ALLOWED_URI$$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$$1;
	      if (SAFE_FOR_TEMPLATES) {
	        ALLOW_DATA_ATTR = false;
	      }

	      if (RETURN_DOM_FRAGMENT) {
	        RETURN_DOM = true;
	      }

	      /* Parse profile info */
	      if (USE_PROFILES) {
	        ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(text)));
	        ALLOWED_ATTR = [];
	        if (USE_PROFILES.html === true) {
	          addToSet(ALLOWED_TAGS, html);
	          addToSet(ALLOWED_ATTR, html$1);
	        }

	        if (USE_PROFILES.svg === true) {
	          addToSet(ALLOWED_TAGS, svg);
	          addToSet(ALLOWED_ATTR, svg$1);
	          addToSet(ALLOWED_ATTR, xml);
	        }

	        if (USE_PROFILES.svgFilters === true) {
	          addToSet(ALLOWED_TAGS, svgFilters);
	          addToSet(ALLOWED_ATTR, svg$1);
	          addToSet(ALLOWED_ATTR, xml);
	        }

	        if (USE_PROFILES.mathMl === true) {
	          addToSet(ALLOWED_TAGS, mathMl);
	          addToSet(ALLOWED_ATTR, mathMl$1);
	          addToSet(ALLOWED_ATTR, xml);
	        }
	      }

	      /* Merge configuration parameters */
	      if (cfg.ADD_TAGS) {
	        if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
	          ALLOWED_TAGS = clone(ALLOWED_TAGS);
	        }

	        addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);
	      }

	      if (cfg.ADD_ATTR) {
	        if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
	          ALLOWED_ATTR = clone(ALLOWED_ATTR);
	        }

	        addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);
	      }

	      if (cfg.ADD_URI_SAFE_ATTR) {
	        addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);
	      }

	      /* Add #text in case KEEP_CONTENT is set to true */
	      if (KEEP_CONTENT) {
	        ALLOWED_TAGS['#text'] = true;
	      }

	      /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */
	      if (WHOLE_DOCUMENT) {
	        addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);
	      }

	      /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */
	      if (ALLOWED_TAGS.table) {
	        addToSet(ALLOWED_TAGS, ['tbody']);
	        delete FORBID_TAGS.tbody;
	      }

	      // Prevent further manipulation of configuration.
	      // Not available in IE8, Safari 5, etc.
	      if (freeze) {
	        freeze(cfg);
	      }

	      CONFIG = cfg;
	    };

	    var MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);

	    var HTML_INTEGRATION_POINTS = addToSet({}, ['foreignobject', 'desc', 'title', 'annotation-xml']);

	    /* Keep track of all possible SVG and MathML tags
	     * so that we can perform the namespace checks
	     * correctly. */
	    var ALL_SVG_TAGS = addToSet({}, svg);
	    addToSet(ALL_SVG_TAGS, svgFilters);
	    addToSet(ALL_SVG_TAGS, svgDisallowed);

	    var ALL_MATHML_TAGS = addToSet({}, mathMl);
	    addToSet(ALL_MATHML_TAGS, mathMlDisallowed);

	    var MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
	    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
	    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';

	    /**
	     *
	     *
	     * @param  {Element} element a DOM element whose namespace is being checked
	     * @returns {boolean} Return false if the element has a
	     *  namespace that a spec-compliant parser would never
	     *  return. Return true otherwise.
	     */
	    var _checkValidNamespace = function _checkValidNamespace(element) {
	      var parent = getParentNode(element);

	      // In JSDOM, if we're inside shadow DOM, then parentNode
	      // can be null. We just simulate parent in this case.
	      if (!parent || !parent.tagName) {
	        parent = {
	          namespaceURI: HTML_NAMESPACE,
	          tagName: 'template'
	        };
	      }

	      var tagName = stringToLowerCase(element.tagName);
	      var parentTagName = stringToLowerCase(parent.tagName);

	      if (element.namespaceURI === SVG_NAMESPACE) {
	        // The only way to switch from HTML namespace to SVG
	        // is via <svg>. If it happens via any other tag, then
	        // it should be killed.
	        if (parent.namespaceURI === HTML_NAMESPACE) {
	          return tagName === 'svg';
	        }

	        // The only way to switch from MathML to SVG is via
	        // svg if parent is either <annotation-xml> or MathML
	        // text integration points.
	        if (parent.namespaceURI === MATHML_NAMESPACE) {
	          return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
	        }

	        // We only allow elements that are defined in SVG
	        // spec. All others are disallowed in SVG namespace.
	        return Boolean(ALL_SVG_TAGS[tagName]);
	      }

	      if (element.namespaceURI === MATHML_NAMESPACE) {
	        // The only way to switch from HTML namespace to MathML
	        // is via <math>. If it happens via any other tag, then
	        // it should be killed.
	        if (parent.namespaceURI === HTML_NAMESPACE) {
	          return tagName === 'math';
	        }

	        // The only way to switch from SVG to MathML is via
	        // <math> and HTML integration points
	        if (parent.namespaceURI === SVG_NAMESPACE) {
	          return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];
	        }

	        // We only allow elements that are defined in MathML
	        // spec. All others are disallowed in MathML namespace.
	        return Boolean(ALL_MATHML_TAGS[tagName]);
	      }

	      if (element.namespaceURI === HTML_NAMESPACE) {
	        // The only way to switch from SVG to HTML is via
	        // HTML integration points, and from MathML to HTML
	        // is via MathML text integration points
	        if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
	          return false;
	        }

	        if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
	          return false;
	        }

	        // Certain elements are allowed in both SVG and HTML
	        // namespace. We need to specify them explicitly
	        // so that they don't get erronously deleted from
	        // HTML namespace.
	        var commonSvgAndHTMLElements = addToSet({}, ['title', 'style', 'font', 'a', 'script']);

	        // We disallow tags that are specific for MathML
	        // or SVG and should never appear in HTML namespace
	        return !ALL_MATHML_TAGS[tagName] && (commonSvgAndHTMLElements[tagName] || !ALL_SVG_TAGS[tagName]);
	      }

	      // The code should never reach this place (this means
	      // that the element somehow got namespace that is not
	      // HTML, SVG or MathML). Return false just in case.
	      return false;
	    };

	    /**
	     * _forceRemove
	     *
	     * @param  {Node} node a DOM node
	     */
	    var _forceRemove = function _forceRemove(node) {
	      arrayPush(DOMPurify.removed, { element: node });
	      try {
	        node.parentNode.removeChild(node);
	      } catch (_) {
	        try {
	          node.outerHTML = emptyHTML;
	        } catch (_) {
	          node.remove();
	        }
	      }
	    };

	    /**
	     * _removeAttribute
	     *
	     * @param  {String} name an Attribute name
	     * @param  {Node} node a DOM node
	     */
	    var _removeAttribute = function _removeAttribute(name, node) {
	      try {
	        arrayPush(DOMPurify.removed, {
	          attribute: node.getAttributeNode(name),
	          from: node
	        });
	      } catch (_) {
	        arrayPush(DOMPurify.removed, {
	          attribute: null,
	          from: node
	        });
	      }

	      node.removeAttribute(name);
	    };

	    /**
	     * _initDocument
	     *
	     * @param  {String} dirty a string of dirty markup
	     * @return {Document} a DOM, filled with the dirty markup
	     */
	    var _initDocument = function _initDocument(dirty) {
	      /* Create a HTML document */
	      var doc = void 0;
	      var leadingWhitespace = void 0;

	      if (FORCE_BODY) {
	        dirty = '<remove></remove>' + dirty;
	      } else {
	        /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */
	        var matches = stringMatch(dirty, /^[\r\n\t ]+/);
	        leadingWhitespace = matches && matches[0];
	      }

	      var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
	      /* Use the DOMParser API by default, fallback later if needs be */
	      try {
	        doc = new DOMParser().parseFromString(dirtyPayload, 'text/html');
	      } catch (_) {}

	      /* Use createHTMLDocument in case DOMParser is not available */
	      if (!doc || !doc.documentElement) {
	        doc = implementation.createHTMLDocument('');
	        var _doc = doc,
	            body = _doc.body;

	        body.parentNode.removeChild(body.parentNode.firstElementChild);
	        body.outerHTML = dirtyPayload;
	      }

	      if (dirty && leadingWhitespace) {
	        doc.body.insertBefore(document.createTextNode(leadingWhitespace), doc.body.childNodes[0] || null);
	      }

	      /* Work on whole document or just its body */
	      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];
	    };

	    /**
	     * _createIterator
	     *
	     * @param  {Document} root document/fragment to create iterator for
	     * @return {Iterator} iterator instance
	     */
	    var _createIterator = function _createIterator(root) {
	      return createNodeIterator.call(root.ownerDocument || root, root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, function () {
	        return NodeFilter.FILTER_ACCEPT;
	      }, false);
	    };

	    /**
	     * _isClobbered
	     *
	     * @param  {Node} elm element to check for clobbering attacks
	     * @return {Boolean} true if clobbered, false if safe
	     */
	    var _isClobbered = function _isClobbered(elm) {
	      if (elm instanceof Text || elm instanceof Comment) {
	        return false;
	      }

	      if (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string' || typeof elm.insertBefore !== 'function') {
	        return true;
	      }

	      return false;
	    };

	    /**
	     * _isNode
	     *
	     * @param  {Node} obj object to check whether it's a DOM node
	     * @return {Boolean} true is object is a DOM node
	     */
	    var _isNode = function _isNode(object) {
	      return (typeof Node === 'undefined' ? 'undefined' : _typeof(Node)) === 'object' ? object instanceof Node : object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string';
	    };

	    /**
	     * _executeHook
	     * Execute user configurable hooks
	     *
	     * @param  {String} entryPoint  Name of the hook's entry point
	     * @param  {Node} currentNode node to work on with the hook
	     * @param  {Object} data additional hook parameters
	     */
	    var _executeHook = function _executeHook(entryPoint, currentNode, data) {
	      if (!hooks[entryPoint]) {
	        return;
	      }

	      arrayForEach(hooks[entryPoint], function (hook) {
	        hook.call(DOMPurify, currentNode, data, CONFIG);
	      });
	    };

	    /**
	     * _sanitizeElements
	     *
	     * @protect nodeName
	     * @protect textContent
	     * @protect removeChild
	     *
	     * @param   {Node} currentNode to check for permission to exist
	     * @return  {Boolean} true if node was killed, false if left alive
	     */
	    var _sanitizeElements = function _sanitizeElements(currentNode) {
	      var content = void 0;

	      /* Execute a hook if present */
	      _executeHook('beforeSanitizeElements', currentNode, null);

	      /* Check if element is clobbered or can clobber */
	      if (_isClobbered(currentNode)) {
	        _forceRemove(currentNode);
	        return true;
	      }

	      /* Check if tagname contains Unicode */
	      if (stringMatch(currentNode.nodeName, /[\u0080-\uFFFF]/)) {
	        _forceRemove(currentNode);
	        return true;
	      }

	      /* Now let's check the element's type and name */
	      var tagName = stringToLowerCase(currentNode.nodeName);

	      /* Execute a hook if present */
	      _executeHook('uponSanitizeElement', currentNode, {
	        tagName: tagName,
	        allowedTags: ALLOWED_TAGS
	      });

	      /* Detect mXSS attempts abusing namespace confusion */
	      if (!_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
	        _forceRemove(currentNode);
	        return true;
	      }

	      /* Remove element if anything forbids its presence */
	      if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
	        /* Keep content except for bad-listed elements */
	        if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
	          var parentNode = getParentNode(currentNode);
	          var childNodes = getChildNodes(currentNode);
	          var childCount = childNodes.length;
	          for (var i = childCount - 1; i >= 0; --i) {
	            parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));
	          }
	        }

	        _forceRemove(currentNode);
	        return true;
	      }

	      /* Check whether element has a valid namespace */
	      if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
	        _forceRemove(currentNode);
	        return true;
	      }

	      if ((tagName === 'noscript' || tagName === 'noembed') && regExpTest(/<\/no(script|embed)/i, currentNode.innerHTML)) {
	        _forceRemove(currentNode);
	        return true;
	      }

	      /* Sanitize element content to be template-safe */
	      if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {
	        /* Get the element's text content */
	        content = currentNode.textContent;
	        content = stringReplace(content, MUSTACHE_EXPR$$1, ' ');
	        content = stringReplace(content, ERB_EXPR$$1, ' ');
	        if (currentNode.textContent !== content) {
	          arrayPush(DOMPurify.removed, { element: currentNode.cloneNode() });
	          currentNode.textContent = content;
	        }
	      }

	      /* Execute a hook if present */
	      _executeHook('afterSanitizeElements', currentNode, null);

	      return false;
	    };

	    /**
	     * _isValidAttribute
	     *
	     * @param  {string} lcTag Lowercase tag name of containing element.
	     * @param  {string} lcName Lowercase attribute name.
	     * @param  {string} value Attribute value.
	     * @return {Boolean} Returns true if `value` is valid, otherwise false.
	     */
	    // eslint-disable-next-line complexity
	    var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {
	      /* Make sure attribute cannot clobber */
	      if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {
	        return false;
	      }

	      /* Allow valid data-* attributes: At least one character after "-"
	          (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)
	          XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)
	          We don't need to check the value; it's always URI safe. */
	      if (ALLOW_DATA_ATTR && regExpTest(DATA_ATTR$$1, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$$1, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
	        return false;

	        /* Check value is safe. First, is attr inert? If so, is safe */
	      } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ; else if (!value) ; else {
	        return false;
	      }

	      return true;
	    };

	    /**
	     * _sanitizeAttributes
	     *
	     * @protect attributes
	     * @protect nodeName
	     * @protect removeAttribute
	     * @protect setAttribute
	     *
	     * @param  {Node} currentNode to sanitize
	     */
	    var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {
	      var attr = void 0;
	      var value = void 0;
	      var lcName = void 0;
	      var l = void 0;
	      /* Execute a hook if present */
	      _executeHook('beforeSanitizeAttributes', currentNode, null);

	      var attributes = currentNode.attributes;

	      /* Check if we have attributes; if not we might have a text node */

	      if (!attributes) {
	        return;
	      }

	      var hookEvent = {
	        attrName: '',
	        attrValue: '',
	        keepAttr: true,
	        allowedAttributes: ALLOWED_ATTR
	      };
	      l = attributes.length;

	      /* Go backwards over all attributes; safely remove bad ones */
	      while (l--) {
	        attr = attributes[l];
	        var _attr = attr,
	            name = _attr.name,
	            namespaceURI = _attr.namespaceURI;

	        value = stringTrim(attr.value);
	        lcName = stringToLowerCase(name);

	        /* Execute a hook if present */
	        hookEvent.attrName = lcName;
	        hookEvent.attrValue = value;
	        hookEvent.keepAttr = true;
	        hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set
	        _executeHook('uponSanitizeAttribute', currentNode, hookEvent);
	        value = hookEvent.attrValue;
	        /* Did the hooks approve of the attribute? */
	        if (hookEvent.forceKeepAttr) {
	          continue;
	        }

	        /* Remove attribute */
	        _removeAttribute(name, currentNode);

	        /* Did the hooks approve of the attribute? */
	        if (!hookEvent.keepAttr) {
	          continue;
	        }

	        /* Work around a security issue in jQuery 3.0 */
	        if (regExpTest(/\/>/i, value)) {
	          _removeAttribute(name, currentNode);
	          continue;
	        }

	        /* Sanitize attribute content to be template-safe */
	        if (SAFE_FOR_TEMPLATES) {
	          value = stringReplace(value, MUSTACHE_EXPR$$1, ' ');
	          value = stringReplace(value, ERB_EXPR$$1, ' ');
	        }

	        /* Is `value` valid for this attribute? */
	        var lcTag = currentNode.nodeName.toLowerCase();
	        if (!_isValidAttribute(lcTag, lcName, value)) {
	          continue;
	        }

	        /* Handle invalid data-* attribute set by try-catching it */
	        try {
	          if (namespaceURI) {
	            currentNode.setAttributeNS(namespaceURI, name, value);
	          } else {
	            /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. "x-schema". */
	            currentNode.setAttribute(name, value);
	          }

	          arrayPop(DOMPurify.removed);
	        } catch (_) {}
	      }

	      /* Execute a hook if present */
	      _executeHook('afterSanitizeAttributes', currentNode, null);
	    };

	    /**
	     * _sanitizeShadowDOM
	     *
	     * @param  {DocumentFragment} fragment to iterate over recursively
	     */
	    var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {
	      var shadowNode = void 0;
	      var shadowIterator = _createIterator(fragment);

	      /* Execute a hook if present */
	      _executeHook('beforeSanitizeShadowDOM', fragment, null);

	      while (shadowNode = shadowIterator.nextNode()) {
	        /* Execute a hook if present */
	        _executeHook('uponSanitizeShadowNode', shadowNode, null);

	        /* Sanitize tags and elements */
	        if (_sanitizeElements(shadowNode)) {
	          continue;
	        }

	        /* Deep shadow DOM detected */
	        if (shadowNode.content instanceof DocumentFragment) {
	          _sanitizeShadowDOM(shadowNode.content);
	        }

	        /* Check attributes, sanitize if necessary */
	        _sanitizeAttributes(shadowNode);
	      }

	      /* Execute a hook if present */
	      _executeHook('afterSanitizeShadowDOM', fragment, null);
	    };

	    /**
	     * Sanitize
	     * Public method providing core sanitation functionality
	     *
	     * @param {String|Node} dirty string or DOM node
	     * @param {Object} configuration object
	     */
	    // eslint-disable-next-line complexity
	    DOMPurify.sanitize = function (dirty, cfg) {
	      var body = void 0;
	      var importedNode = void 0;
	      var currentNode = void 0;
	      var oldNode = void 0;
	      var returnNode = void 0;
	      /* Make sure we have a string to sanitize.
	        DO NOT return early, as this will return the wrong type if
	        the user has requested a DOM object rather than a string */
	      if (!dirty) {
	        dirty = '<!-->';
	      }

	      /* Stringify, in case dirty is an object */
	      if (typeof dirty !== 'string' && !_isNode(dirty)) {
	        // eslint-disable-next-line no-negated-condition
	        if (typeof dirty.toString !== 'function') {
	          throw typeErrorCreate('toString is not a function');
	        } else {
	          dirty = dirty.toString();
	          if (typeof dirty !== 'string') {
	            throw typeErrorCreate('dirty is not a string, aborting');
	          }
	        }
	      }

	      /* Check we can run. Otherwise fall back or ignore */
	      if (!DOMPurify.isSupported) {
	        if (_typeof(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {
	          if (typeof dirty === 'string') {
	            return window.toStaticHTML(dirty);
	          }

	          if (_isNode(dirty)) {
	            return window.toStaticHTML(dirty.outerHTML);
	          }
	        }

	        return dirty;
	      }

	      /* Assign config vars */
	      if (!SET_CONFIG) {
	        _parseConfig(cfg);
	      }

	      /* Clean up removed elements */
	      DOMPurify.removed = [];

	      /* Check if dirty is correctly typed for IN_PLACE */
	      if (typeof dirty === 'string') {
	        IN_PLACE = false;
	      }

	      if (IN_PLACE) ; else if (dirty instanceof Node) {
	        /* If dirty is a DOM element, append to an empty document to avoid
	           elements being stripped by the parser */
	        body = _initDocument('<!---->');
	        importedNode = body.ownerDocument.importNode(dirty, true);
	        if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {
	          /* Node is already a body, use as is */
	          body = importedNode;
	        } else if (importedNode.nodeName === 'HTML') {
	          body = importedNode;
	        } else {
	          // eslint-disable-next-line unicorn/prefer-node-append
	          body.appendChild(importedNode);
	        }
	      } else {
	        /* Exit directly if we have nothing to do */
	        if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT &&
	        // eslint-disable-next-line unicorn/prefer-includes
	        dirty.indexOf('<') === -1) {
	          return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
	        }

	        /* Initialize the document to work on */
	        body = _initDocument(dirty);

	        /* Check we have a DOM node from the data */
	        if (!body) {
	          return RETURN_DOM ? null : emptyHTML;
	        }
	      }

	      /* Remove first element node (ours) if FORCE_BODY is set */
	      if (body && FORCE_BODY) {
	        _forceRemove(body.firstChild);
	      }

	      /* Get node iterator */
	      var nodeIterator = _createIterator(IN_PLACE ? dirty : body);

	      /* Now start iterating over the created document */
	      while (currentNode = nodeIterator.nextNode()) {
	        /* Fix IE's strange behavior with manipulated textNodes #89 */
	        if (currentNode.nodeType === 3 && currentNode === oldNode) {
	          continue;
	        }

	        /* Sanitize tags and elements */
	        if (_sanitizeElements(currentNode)) {
	          continue;
	        }

	        /* Shadow DOM detected, sanitize it */
	        if (currentNode.content instanceof DocumentFragment) {
	          _sanitizeShadowDOM(currentNode.content);
	        }

	        /* Check attributes, sanitize if necessary */
	        _sanitizeAttributes(currentNode);

	        oldNode = currentNode;
	      }

	      oldNode = null;

	      /* If we sanitized `dirty` in-place, return it. */
	      if (IN_PLACE) {
	        return dirty;
	      }

	      /* Return sanitized string or DOM */
	      if (RETURN_DOM) {
	        if (RETURN_DOM_FRAGMENT) {
	          returnNode = createDocumentFragment.call(body.ownerDocument);

	          while (body.firstChild) {
	            // eslint-disable-next-line unicorn/prefer-node-append
	            returnNode.appendChild(body.firstChild);
	          }
	        } else {
	          returnNode = body;
	        }

	        if (RETURN_DOM_IMPORT) {
	          /*
	            AdoptNode() is not used because internal state is not reset
	            (e.g. the past names map of a HTMLFormElement), this is safe
	            in theory but we would rather not risk another attack vector.
	            The state that is cloned by importNode() is explicitly defined
	            by the specs.
	          */
	          returnNode = importNode.call(originalDocument, returnNode, true);
	        }

	        return returnNode;
	      }

	      var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;

	      /* Sanitize final string template-safe */
	      if (SAFE_FOR_TEMPLATES) {
	        serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$$1, ' ');
	        serializedHTML = stringReplace(serializedHTML, ERB_EXPR$$1, ' ');
	      }

	      return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
	    };

	    /**
	     * Public method to set the configuration once
	     * setConfig
	     *
	     * @param {Object} cfg configuration object
	     */
	    DOMPurify.setConfig = function (cfg) {
	      _parseConfig(cfg);
	      SET_CONFIG = true;
	    };

	    /**
	     * Public method to remove the configuration
	     * clearConfig
	     *
	     */
	    DOMPurify.clearConfig = function () {
	      CONFIG = null;
	      SET_CONFIG = false;
	    };

	    /**
	     * Public method to check if an attribute value is valid.
	     * Uses last set config, if any. Otherwise, uses config defaults.
	     * isValidAttribute
	     *
	     * @param  {string} tag Tag name of containing element.
	     * @param  {string} attr Attribute name.
	     * @param  {string} value Attribute value.
	     * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.
	     */
	    DOMPurify.isValidAttribute = function (tag, attr, value) {
	      /* Initialize shared config vars if necessary. */
	      if (!CONFIG) {
	        _parseConfig({});
	      }

	      var lcTag = stringToLowerCase(tag);
	      var lcName = stringToLowerCase(attr);
	      return _isValidAttribute(lcTag, lcName, value);
	    };

	    /**
	     * AddHook
	     * Public method to add DOMPurify hooks
	     *
	     * @param {String} entryPoint entry point for the hook to add
	     * @param {Function} hookFunction function to execute
	     */
	    DOMPurify.addHook = function (entryPoint, hookFunction) {
	      if (typeof hookFunction !== 'function') {
	        return;
	      }

	      hooks[entryPoint] = hooks[entryPoint] || [];
	      arrayPush(hooks[entryPoint], hookFunction);
	    };

	    /**
	     * RemoveHook
	     * Public method to remove a DOMPurify hook at a given entryPoint
	     * (pops it from the stack of hooks if more are present)
	     *
	     * @param {String} entryPoint entry point for the hook to remove
	     */
	    DOMPurify.removeHook = function (entryPoint) {
	      if (hooks[entryPoint]) {
	        arrayPop(hooks[entryPoint]);
	      }
	    };

	    /**
	     * RemoveHooks
	     * Public method to remove all DOMPurify hooks at a given entryPoint
	     *
	     * @param  {String} entryPoint entry point for the hooks to remove
	     */
	    DOMPurify.removeHooks = function (entryPoint) {
	      if (hooks[entryPoint]) {
	        hooks[entryPoint] = [];
	      }
	    };

	    /**
	     * RemoveAllHooks
	     * Public method to remove all DOMPurify hooks
	     *
	     */
	    DOMPurify.removeAllHooks = function () {
	      hooks = {};
	    };

	    return DOMPurify;
	  }

	  var purify = createDOMPurify();

	  return purify;

	}));

	});

	var minIndent = string => {
		const match = string.match(/^[ \t]*(?=\S)/gm);

		if (!match) {
			return 0;
		}

		return match.reduce((r, a) => Math.min(r, a.length), Infinity);
	};

	var stripIndent = string => {
		const indent = minIndent(string);

		if (indent === 0) {
			return string;
		}

		const regex = new RegExp(`^[ \\t]{${indent}}`, 'gm');

		return string.replace(regex, '');
	};

	function deepFreeze(obj) {
	    if (obj instanceof Map) {
	        obj.clear = obj.delete = obj.set = function () {
	            throw new Error('map is read-only');
	        };
	    } else if (obj instanceof Set) {
	        obj.add = obj.clear = obj.delete = function () {
	            throw new Error('set is read-only');
	        };
	    }

	    // Freeze self
	    Object.freeze(obj);

	    Object.getOwnPropertyNames(obj).forEach(function (name) {
	        var prop = obj[name];

	        // Freeze prop if it is an object
	        if (typeof prop == 'object' && !Object.isFrozen(prop)) {
	            deepFreeze(prop);
	        }
	    });

	    return obj;
	}

	var deepFreezeEs6 = deepFreeze;
	var _default = deepFreeze;
	deepFreezeEs6.default = _default;

	class Response {
	  /**
	   * @param {CompiledMode} mode
	   */
	  constructor(mode) {
	    // eslint-disable-next-line no-undefined
	    if (mode.data === undefined) mode.data = {};

	    this.data = mode.data;
	  }

	  ignoreMatch() {
	    this.ignore = true;
	  }
	}

	/**
	 * @param {string} value
	 * @returns {string}
	 */
	function escapeHTML(value) {
	  return value
	    .replace(/&/g, '&amp;')
	    .replace(/</g, '&lt;')
	    .replace(/>/g, '&gt;')
	    .replace(/"/g, '&quot;')
	    .replace(/'/g, '&#x27;');
	}

	/**
	 * performs a shallow merge of multiple objects into one
	 *
	 * @template T
	 * @param {T} original
	 * @param {Record<string,any>[]} objects
	 * @returns {T} a single new object
	 */
	function inherit(original, ...objects) {
	  /** @type Record<string,any> */
	  const result = Object.create(null);

	  for (const key in original) {
	    result[key] = original[key];
	  }
	  objects.forEach(function(obj) {
	    for (const key in obj) {
	      result[key] = obj[key];
	    }
	  });
	  return /** @type {T} */ (result);
	}

	/**
	 * @typedef {object} Renderer
	 * @property {(text: string) => void} addText
	 * @property {(node: Node) => void} openNode
	 * @property {(node: Node) => void} closeNode
	 * @property {() => string} value
	 */

	/** @typedef {{kind?: string, sublanguage?: boolean}} Node */
	/** @typedef {{walk: (r: Renderer) => void}} Tree */
	/** */

	const SPAN_CLOSE = '</span>';

	/**
	 * Determines if a node needs to be wrapped in <span>
	 *
	 * @param {Node} node */
	const emitsWrappingTags = (node) => {
	  return !!node.kind;
	};

	/** @type {Renderer} */
	class HTMLRenderer {
	  /**
	   * Creates a new HTMLRenderer
	   *
	   * @param {Tree} parseTree - the parse tree (must support `walk` API)
	   * @param {{classPrefix: string}} options
	   */
	  constructor(parseTree, options) {
	    this.buffer = "";
	    this.classPrefix = options.classPrefix;
	    parseTree.walk(this);
	  }

	  /**
	   * Adds texts to the output stream
	   *
	   * @param {string} text */
	  addText(text) {
	    this.buffer += escapeHTML(text);
	  }

	  /**
	   * Adds a node open to the output stream (if needed)
	   *
	   * @param {Node} node */
	  openNode(node) {
	    if (!emitsWrappingTags(node)) return;

	    let className = node.kind;
	    if (!node.sublanguage) {
	      className = `${this.classPrefix}${className}`;
	    }
	    this.span(className);
	  }

	  /**
	   * Adds a node close to the output stream (if needed)
	   *
	   * @param {Node} node */
	  closeNode(node) {
	    if (!emitsWrappingTags(node)) return;

	    this.buffer += SPAN_CLOSE;
	  }

	  /**
	   * returns the accumulated buffer
	  */
	  value() {
	    return this.buffer;
	  }

	  // helpers

	  /**
	   * Builds a span element
	   *
	   * @param {string} className */
	  span(className) {
	    this.buffer += `<span class="${className}">`;
	  }
	}

	/** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} | string} Node */
	/** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} } DataNode */
	/**  */

	class TokenTree {
	  constructor() {
	    /** @type DataNode */
	    this.rootNode = { children: [] };
	    this.stack = [this.rootNode];
	  }

	  get top() {
	    return this.stack[this.stack.length - 1];
	  }

	  get root() { return this.rootNode; }

	  /** @param {Node} node */
	  add(node) {
	    this.top.children.push(node);
	  }

	  /** @param {string} kind */
	  openNode(kind) {
	    /** @type Node */
	    const node = { kind, children: [] };
	    this.add(node);
	    this.stack.push(node);
	  }

	  closeNode() {
	    if (this.stack.length > 1) {
	      return this.stack.pop();
	    }
	    // eslint-disable-next-line no-undefined
	    return undefined;
	  }

	  closeAllNodes() {
	    while (this.closeNode());
	  }

	  toJSON() {
	    return JSON.stringify(this.rootNode, null, 4);
	  }

	  /**
	   * @typedef { import("./html_renderer").Renderer } Renderer
	   * @param {Renderer} builder
	   */
	  walk(builder) {
	    // this does not
	    return this.constructor._walk(builder, this.rootNode);
	    // this works
	    // return TokenTree._walk(builder, this.rootNode);
	  }

	  /**
	   * @param {Renderer} builder
	   * @param {Node} node
	   */
	  static _walk(builder, node) {
	    if (typeof node === "string") {
	      builder.addText(node);
	    } else if (node.children) {
	      builder.openNode(node);
	      node.children.forEach((child) => this._walk(builder, child));
	      builder.closeNode(node);
	    }
	    return builder;
	  }

	  /**
	   * @param {Node} node
	   */
	  static _collapse(node) {
	    if (typeof node === "string") return;
	    if (!node.children) return;

	    if (node.children.every(el => typeof el === "string")) {
	      // node.text = node.children.join("");
	      // delete node.children;
	      node.children = [node.children.join("")];
	    } else {
	      node.children.forEach((child) => {
	        TokenTree._collapse(child);
	      });
	    }
	  }
	}

	/**
	  Currently this is all private API, but this is the minimal API necessary
	  that an Emitter must implement to fully support the parser.

	  Minimal interface:

	  - addKeyword(text, kind)
	  - addText(text)
	  - addSublanguage(emitter, subLanguageName)
	  - finalize()
	  - openNode(kind)
	  - closeNode()
	  - closeAllNodes()
	  - toHTML()

	*/

	/**
	 * @implements {Emitter}
	 */
	class TokenTreeEmitter extends TokenTree {
	  /**
	   * @param {*} options
	   */
	  constructor(options) {
	    super();
	    this.options = options;
	  }

	  /**
	   * @param {string} text
	   * @param {string} kind
	   */
	  addKeyword(text, kind) {
	    if (text === "") { return; }

	    this.openNode(kind);
	    this.addText(text);
	    this.closeNode();
	  }

	  /**
	   * @param {string} text
	   */
	  addText(text) {
	    if (text === "") { return; }

	    this.add(text);
	  }

	  /**
	   * @param {Emitter & {root: DataNode}} emitter
	   * @param {string} name
	   */
	  addSublanguage(emitter, name) {
	    /** @type DataNode */
	    const node = emitter.root;
	    node.kind = name;
	    node.sublanguage = true;
	    this.add(node);
	  }

	  toHTML() {
	    const renderer = new HTMLRenderer(this, this.options);
	    return renderer.value();
	  }

	  finalize() {
	    return true;
	  }
	}

	/**
	 * @param {string} value
	 * @returns {RegExp}
	 * */
	function escape(value) {
	  return new RegExp(value.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&'), 'm');
	}

	/**
	 * @param {RegExp | string } re
	 * @returns {string}
	 */
	function source(re) {
	  if (!re) return null;
	  if (typeof re === "string") return re;

	  return re.source;
	}

	/**
	 * @param {...(RegExp | string) } args
	 * @returns {string}
	 */
	function concat(...args) {
	  const joined = args.map((x) => source(x)).join("");
	  return joined;
	}

	/**
	 * Any of the passed expresssions may match
	 *
	 * Creates a huge this | this | that | that match
	 * @param {(RegExp | string)[] } args
	 * @returns {string}
	 */
	function either(...args) {
	  const joined = '(' + args.map((x) => source(x)).join("|") + ")";
	  return joined;
	}

	/**
	 * @param {RegExp} re
	 * @returns {number}
	 */
	function countMatchGroups(re) {
	  return (new RegExp(re.toString() + '|')).exec('').length - 1;
	}

	/**
	 * Does lexeme start with a regular expression match at the beginning
	 * @param {RegExp} re
	 * @param {string} lexeme
	 */
	function startsWith(re, lexeme) {
	  const match = re && re.exec(lexeme);
	  return match && match.index === 0;
	}

	// join logically computes regexps.join(separator), but fixes the
	// backreferences so they continue to match.
	// it also places each individual regular expression into it's own
	// match group, keeping track of the sequencing of those match groups
	// is currently an exercise for the caller. :-)
	/**
	 * @param {(string | RegExp)[]} regexps
	 * @param {string} separator
	 * @returns {string}
	 */
	function join(regexps, separator = "|") {
	  // backreferenceRe matches an open parenthesis or backreference. To avoid
	  // an incorrect parse, it additionally matches the following:
	  // - [...] elements, where the meaning of parentheses and escapes change
	  // - other escape sequences, so we do not misparse escape sequences as
	  //   interesting elements
	  // - non-matching or lookahead parentheses, which do not capture. These
	  //   follow the '(' with a '?'.
	  const backreferenceRe = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;
	  let numCaptures = 0;
	  let ret = '';
	  for (let i = 0; i < regexps.length; i++) {
	    numCaptures += 1;
	    const offset = numCaptures;
	    let re = source(regexps[i]);
	    if (i > 0) {
	      ret += separator;
	    }
	    ret += "(";
	    while (re.length > 0) {
	      const match = backreferenceRe.exec(re);
	      if (match == null) {
	        ret += re;
	        break;
	      }
	      ret += re.substring(0, match.index);
	      re = re.substring(match.index + match[0].length);
	      if (match[0][0] === '\\' && match[1]) {
	        // Adjust the backreference.
	        ret += '\\' + String(Number(match[1]) + offset);
	      } else {
	        ret += match[0];
	        if (match[0] === '(') {
	          numCaptures++;
	        }
	      }
	    }
	    ret += ")";
	  }
	  return ret;
	}

	// Common regexps
	const MATCH_NOTHING_RE = /\b\B/;
	const IDENT_RE = '[a-zA-Z]\\w*';
	const UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\w*';
	const NUMBER_RE = '\\b\\d+(\\.\\d+)?';
	const C_NUMBER_RE = '(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)'; // 0x..., 0..., decimal, float
	const BINARY_NUMBER_RE = '\\b(0b[01]+)'; // 0b...
	const RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~';

	/**
	* @param { Partial<Mode> & {binary?: string | RegExp} } opts
	*/
	const SHEBANG = (opts = {}) => {
	  const beginShebang = /^#![ ]*\//;
	  if (opts.binary) {
	    opts.begin = concat(
	      beginShebang,
	      /.*\b/,
	      opts.binary,
	      /\b.*/);
	  }
	  return inherit({
	    className: 'meta',
	    begin: beginShebang,
	    end: /$/,
	    relevance: 0,
	    /** @type {ModeCallback} */
	    "on:begin": (m, resp) => {
	      if (m.index !== 0) resp.ignoreMatch();
	    }
	  }, opts);
	};

	// Common modes
	const BACKSLASH_ESCAPE = {
	  begin: '\\\\[\\s\\S]', relevance: 0
	};
	const APOS_STRING_MODE = {
	  className: 'string',
	  begin: '\'',
	  end: '\'',
	  illegal: '\\n',
	  contains: [BACKSLASH_ESCAPE]
	};
	const QUOTE_STRING_MODE = {
	  className: 'string',
	  begin: '"',
	  end: '"',
	  illegal: '\\n',
	  contains: [BACKSLASH_ESCAPE]
	};
	const PHRASAL_WORDS_MODE = {
	  begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
	};
	/**
	 * Creates a comment mode
	 *
	 * @param {string | RegExp} begin
	 * @param {string | RegExp} end
	 * @param {Mode | {}} [modeOptions]
	 * @returns {Partial<Mode>}
	 */
	const COMMENT = function(begin, end, modeOptions = {}) {
	  const mode = inherit(
	    {
	      className: 'comment',
	      begin,
	      end,
	      contains: []
	    },
	    modeOptions
	  );
	  mode.contains.push(PHRASAL_WORDS_MODE);
	  mode.contains.push({
	    className: 'doctag',
	    begin: '(?:TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):',
	    relevance: 0
	  });
	  return mode;
	};
	const C_LINE_COMMENT_MODE = COMMENT('//', '$');
	const C_BLOCK_COMMENT_MODE = COMMENT('/\\*', '\\*/');
	const HASH_COMMENT_MODE = COMMENT('#', '$');
	const NUMBER_MODE = {
	  className: 'number',
	  begin: NUMBER_RE,
	  relevance: 0
	};
	const C_NUMBER_MODE = {
	  className: 'number',
	  begin: C_NUMBER_RE,
	  relevance: 0
	};
	const BINARY_NUMBER_MODE = {
	  className: 'number',
	  begin: BINARY_NUMBER_RE,
	  relevance: 0
	};
	const CSS_NUMBER_MODE = {
	  className: 'number',
	  begin: NUMBER_RE + '(' +
	    '%|em|ex|ch|rem' +
	    '|vw|vh|vmin|vmax' +
	    '|cm|mm|in|pt|pc|px' +
	    '|deg|grad|rad|turn' +
	    '|s|ms' +
	    '|Hz|kHz' +
	    '|dpi|dpcm|dppx' +
	    ')?',
	  relevance: 0
	};
	const REGEXP_MODE = {
	  // this outer rule makes sure we actually have a WHOLE regex and not simply
	  // an expression such as:
	  //
	  //     3 / something
	  //
	  // (which will then blow up when regex's `illegal` sees the newline)
	  begin: /(?=\/[^/\n]*\/)/,
	  contains: [{
	    className: 'regexp',
	    begin: /\//,
	    end: /\/[gimuy]*/,
	    illegal: /\n/,
	    contains: [
	      BACKSLASH_ESCAPE,
	      {
	        begin: /\[/,
	        end: /\]/,
	        relevance: 0,
	        contains: [BACKSLASH_ESCAPE]
	      }
	    ]
	  }]
	};
	const TITLE_MODE = {
	  className: 'title',
	  begin: IDENT_RE,
	  relevance: 0
	};
	const UNDERSCORE_TITLE_MODE = {
	  className: 'title',
	  begin: UNDERSCORE_IDENT_RE,
	  relevance: 0
	};
	const METHOD_GUARD = {
	  // excludes method names from keyword processing
	  begin: '\\.\\s*' + UNDERSCORE_IDENT_RE,
	  relevance: 0
	};

	/**
	 * Adds end same as begin mechanics to a mode
	 *
	 * Your mode must include at least a single () match group as that first match
	 * group is what is used for comparison
	 * @param {Partial<Mode>} mode
	 */
	const END_SAME_AS_BEGIN = function(mode) {
	  return Object.assign(mode,
	    {
	      /** @type {ModeCallback} */
	      'on:begin': (m, resp) => { resp.data._beginMatch = m[1]; },
	      /** @type {ModeCallback} */
	      'on:end': (m, resp) => { if (resp.data._beginMatch !== m[1]) resp.ignoreMatch(); }
	    });
	};

	var MODES = /*#__PURE__*/Object.freeze({
	    __proto__: null,
	    MATCH_NOTHING_RE: MATCH_NOTHING_RE,
	    IDENT_RE: IDENT_RE,
	    UNDERSCORE_IDENT_RE: UNDERSCORE_IDENT_RE,
	    NUMBER_RE: NUMBER_RE,
	    C_NUMBER_RE: C_NUMBER_RE,
	    BINARY_NUMBER_RE: BINARY_NUMBER_RE,
	    RE_STARTERS_RE: RE_STARTERS_RE,
	    SHEBANG: SHEBANG,
	    BACKSLASH_ESCAPE: BACKSLASH_ESCAPE,
	    APOS_STRING_MODE: APOS_STRING_MODE,
	    QUOTE_STRING_MODE: QUOTE_STRING_MODE,
	    PHRASAL_WORDS_MODE: PHRASAL_WORDS_MODE,
	    COMMENT: COMMENT,
	    C_LINE_COMMENT_MODE: C_LINE_COMMENT_MODE,
	    C_BLOCK_COMMENT_MODE: C_BLOCK_COMMENT_MODE,
	    HASH_COMMENT_MODE: HASH_COMMENT_MODE,
	    NUMBER_MODE: NUMBER_MODE,
	    C_NUMBER_MODE: C_NUMBER_MODE,
	    BINARY_NUMBER_MODE: BINARY_NUMBER_MODE,
	    CSS_NUMBER_MODE: CSS_NUMBER_MODE,
	    REGEXP_MODE: REGEXP_MODE,
	    TITLE_MODE: TITLE_MODE,
	    UNDERSCORE_TITLE_MODE: UNDERSCORE_TITLE_MODE,
	    METHOD_GUARD: METHOD_GUARD,
	    END_SAME_AS_BEGIN: END_SAME_AS_BEGIN
	});

	// Grammar extensions / plugins
	// See: https://github.com/highlightjs/highlight.js/issues/2833

	// Grammar extensions allow "syntactic sugar" to be added to the grammar modes
	// without requiring any underlying changes to the compiler internals.

	// `compileMatch` being the perfect small example of now allowing a grammar
	// author to write `match` when they desire to match a single expression rather
	// than being forced to use `begin`.  The extension then just moves `match` into
	// `begin` when it runs.  Ie, no features have been added, but we've just made
	// the experience of writing (and reading grammars) a little bit nicer.

	// ------

	// TODO: We need negative look-behind support to do this properly
	/**
	 * Skip a match if it has a preceding dot
	 *
	 * This is used for `beginKeywords` to prevent matching expressions such as
	 * `bob.keyword.do()`. The mode compiler automatically wires this up as a
	 * special _internal_ 'on:begin' callback for modes with `beginKeywords`
	 * @param {RegExpMatchArray} match
	 * @param {CallbackResponse} response
	 */
	function skipIfhasPrecedingDot(match, response) {
	  const before = match.input[match.index - 1];
	  if (before === ".") {
	    response.ignoreMatch();
	  }
	}


	/**
	 * `beginKeywords` syntactic sugar
	 * @type {CompilerExt}
	 */
	function beginKeywords(mode, parent) {
	  if (!parent) return;
	  if (!mode.beginKeywords) return;

	  // for languages with keywords that include non-word characters checking for
	  // a word boundary is not sufficient, so instead we check for a word boundary
	  // or whitespace - this does no harm in any case since our keyword engine
	  // doesn't allow spaces in keywords anyways and we still check for the boundary
	  // first
	  mode.begin = '\\b(' + mode.beginKeywords.split(' ').join('|') + ')(?!\\.)(?=\\b|\\s)';
	  mode.__beforeBegin = skipIfhasPrecedingDot;
	  mode.keywords = mode.keywords || mode.beginKeywords;
	  delete mode.beginKeywords;

	  // prevents double relevance, the keywords themselves provide
	  // relevance, the mode doesn't need to double it
	  // eslint-disable-next-line no-undefined
	  if (mode.relevance === undefined) mode.relevance = 0;
	}

	/**
	 * Allow `illegal` to contain an array of illegal values
	 * @type {CompilerExt}
	 */
	function compileIllegal(mode, _parent) {
	  if (!Array.isArray(mode.illegal)) return;

	  mode.illegal = either(...mode.illegal);
	}

	/**
	 * `match` to match a single expression for readability
	 * @type {CompilerExt}
	 */
	function compileMatch(mode, _parent) {
	  if (!mode.match) return;
	  if (mode.begin || mode.end) throw new Error("begin & end are not supported with match");

	  mode.begin = mode.match;
	  delete mode.match;
	}

	/**
	 * provides the default 1 relevance to all modes
	 * @type {CompilerExt}
	 */
	function compileRelevance(mode, _parent) {
	  // eslint-disable-next-line no-undefined
	  if (mode.relevance === undefined) mode.relevance = 1;
	}

	// keywords that should have no default relevance value
	const COMMON_KEYWORDS = [
	  'of',
	  'and',
	  'for',
	  'in',
	  'not',
	  'or',
	  'if',
	  'then',
	  'parent', // common variable name
	  'list', // common variable name
	  'value' // common variable name
	];

	const DEFAULT_KEYWORD_CLASSNAME = "keyword";

	/**
	 * Given raw keywords from a language definition, compile them.
	 *
	 * @param {string | Record<string,string|string[]> | Array<string>} rawKeywords
	 * @param {boolean} caseInsensitive
	 */
	function compileKeywords(rawKeywords, caseInsensitive, className = DEFAULT_KEYWORD_CLASSNAME) {
	  /** @type KeywordDict */
	  const compiledKeywords = {};

	  // input can be a string of keywords, an array of keywords, or a object with
	  // named keys representing className (which can then point to a string or array)
	  if (typeof rawKeywords === 'string') {
	    compileList(className, rawKeywords.split(" "));
	  } else if (Array.isArray(rawKeywords)) {
	    compileList(className, rawKeywords);
	  } else {
	    Object.keys(rawKeywords).forEach(function(className) {
	      // collapse all our objects back into the parent object
	      Object.assign(
	        compiledKeywords,
	        compileKeywords(rawKeywords[className], caseInsensitive, className)
	      );
	    });
	  }
	  return compiledKeywords;

	  // ---

	  /**
	   * Compiles an individual list of keywords
	   *
	   * Ex: "for if when while|5"
	   *
	   * @param {string} className
	   * @param {Array<string>} keywordList
	   */
	  function compileList(className, keywordList) {
	    if (caseInsensitive) {
	      keywordList = keywordList.map(x => x.toLowerCase());
	    }
	    keywordList.forEach(function(keyword) {
	      const pair = keyword.split('|');
	      compiledKeywords[pair[0]] = [className, scoreForKeyword(pair[0], pair[1])];
	    });
	  }
	}

	/**
	 * Returns the proper score for a given keyword
	 *
	 * Also takes into account comment keywords, which will be scored 0 UNLESS
	 * another score has been manually assigned.
	 * @param {string} keyword
	 * @param {string} [providedScore]
	 */
	function scoreForKeyword(keyword, providedScore) {
	  // manual scores always win over common keywords
	  // so you can force a score of 1 if you really insist
	  if (providedScore) {
	    return Number(providedScore);
	  }

	  return commonKeyword(keyword) ? 0 : 1;
	}

	/**
	 * Determines if a given keyword is common or not
	 *
	 * @param {string} keyword */
	function commonKeyword(keyword) {
	  return COMMON_KEYWORDS.includes(keyword.toLowerCase());
	}

	// compilation

	/**
	 * Compiles a language definition result
	 *
	 * Given the raw result of a language definition (Language), compiles this so
	 * that it is ready for highlighting code.
	 * @param {Language} language
	 * @param {{plugins: HLJSPlugin[]}} opts
	 * @returns {CompiledLanguage}
	 */
	function compileLanguage(language, { plugins }) {
	  /**
	   * Builds a regex with the case sensativility of the current language
	   *
	   * @param {RegExp | string} value
	   * @param {boolean} [global]
	   */
	  function langRe(value, global) {
	    return new RegExp(
	      source(value),
	      'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : '')
	    );
	  }

	  /**
	    Stores multiple regular expressions and allows you to quickly search for
	    them all in a string simultaneously - returning the first match.  It does
	    this by creating a huge (a|b|c) regex - each individual item wrapped with ()
	    and joined by `|` - using match groups to track position.  When a match is
	    found checking which position in the array has content allows us to figure
	    out which of the original regexes / match groups triggered the match.

	    The match object itself (the result of `Regex.exec`) is returned but also
	    enhanced by merging in any meta-data that was registered with the regex.
	    This is how we keep track of which mode matched, and what type of rule
	    (`illegal`, `begin`, end, etc).
	  */
	  class MultiRegex {
	    constructor() {
	      this.matchIndexes = {};
	      // @ts-ignore
	      this.regexes = [];
	      this.matchAt = 1;
	      this.position = 0;
	    }

	    // @ts-ignore
	    addRule(re, opts) {
	      opts.position = this.position++;
	      // @ts-ignore
	      this.matchIndexes[this.matchAt] = opts;
	      this.regexes.push([opts, re]);
	      this.matchAt += countMatchGroups(re) + 1;
	    }

	    compile() {
	      if (this.regexes.length === 0) {
	        // avoids the need to check length every time exec is called
	        // @ts-ignore
	        this.exec = () => null;
	      }
	      const terminators = this.regexes.map(el => el[1]);
	      this.matcherRe = langRe(join(terminators), true);
	      this.lastIndex = 0;
	    }

	    /** @param {string} s */
	    exec(s) {
	      this.matcherRe.lastIndex = this.lastIndex;
	      const match = this.matcherRe.exec(s);
	      if (!match) { return null; }

	      // eslint-disable-next-line no-undefined
	      const i = match.findIndex((el, i) => i > 0 && el !== undefined);
	      // @ts-ignore
	      const matchData = this.matchIndexes[i];
	      // trim off any earlier non-relevant match groups (ie, the other regex
	      // match groups that make up the multi-matcher)
	      match.splice(0, i);

	      return Object.assign(match, matchData);
	    }
	  }

	  /*
	    Created to solve the key deficiently with MultiRegex - there is no way to
	    test for multiple matches at a single location.  Why would we need to do
	    that?  In the future a more dynamic engine will allow certain matches to be
	    ignored.  An example: if we matched say the 3rd regex in a large group but
	    decided to ignore it - we'd need to started testing again at the 4th
	    regex... but MultiRegex itself gives us no real way to do that.

	    So what this class creates MultiRegexs on the fly for whatever search
	    position they are needed.

	    NOTE: These additional MultiRegex objects are created dynamically.  For most
	    grammars most of the time we will never actually need anything more than the
	    first MultiRegex - so this shouldn't have too much overhead.

	    Say this is our search group, and we match regex3, but wish to ignore it.

	      regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0

	    What we need is a new MultiRegex that only includes the remaining
	    possibilities:

	      regex4 | regex5                               ' ie, startAt = 3

	    This class wraps all that complexity up in a simple API... `startAt` decides
	    where in the array of expressions to start doing the matching. It
	    auto-increments, so if a match is found at position 2, then startAt will be
	    set to 3.  If the end is reached startAt will return to 0.

	    MOST of the time the parser will be setting startAt manually to 0.
	  */
	  class ResumableMultiRegex {
	    constructor() {
	      // @ts-ignore
	      this.rules = [];
	      // @ts-ignore
	      this.multiRegexes = [];
	      this.count = 0;

	      this.lastIndex = 0;
	      this.regexIndex = 0;
	    }

	    // @ts-ignore
	    getMatcher(index) {
	      if (this.multiRegexes[index]) return this.multiRegexes[index];

	      const matcher = new MultiRegex();
	      this.rules.slice(index).forEach(([re, opts]) => matcher.addRule(re, opts));
	      matcher.compile();
	      this.multiRegexes[index] = matcher;
	      return matcher;
	    }

	    resumingScanAtSamePosition() {
	      return this.regexIndex !== 0;
	    }

	    considerAll() {
	      this.regexIndex = 0;
	    }

	    // @ts-ignore
	    addRule(re, opts) {
	      this.rules.push([re, opts]);
	      if (opts.type === "begin") this.count++;
	    }

	    /** @param {string} s */
	    exec(s) {
	      const m = this.getMatcher(this.regexIndex);
	      m.lastIndex = this.lastIndex;
	      let result = m.exec(s);

	      // The following is because we have no easy way to say "resume scanning at the
	      // existing position but also skip the current rule ONLY". What happens is
	      // all prior rules are also skipped which can result in matching the wrong
	      // thing. Example of matching "booger":

	      // our matcher is [string, "booger", number]
	      //
	      // ....booger....

	      // if "booger" is ignored then we'd really need a regex to scan from the
	      // SAME position for only: [string, number] but ignoring "booger" (if it
	      // was the first match), a simple resume would scan ahead who knows how
	      // far looking only for "number", ignoring potential string matches (or
	      // future "booger" matches that might be valid.)

	      // So what we do: We execute two matchers, one resuming at the same
	      // position, but the second full matcher starting at the position after:

	      //     /--- resume first regex match here (for [number])
	      //     |/---- full match here for [string, "booger", number]
	      //     vv
	      // ....booger....

	      // Which ever results in a match first is then used. So this 3-4 step
	      // process essentially allows us to say "match at this position, excluding
	      // a prior rule that was ignored".
	      //
	      // 1. Match "booger" first, ignore. Also proves that [string] does non match.
	      // 2. Resume matching for [number]
	      // 3. Match at index + 1 for [string, "booger", number]
	      // 4. If #2 and #3 result in matches, which came first?
	      if (this.resumingScanAtSamePosition()) {
	        if (result && result.index === this.lastIndex) ; else { // use the second matcher result
	          const m2 = this.getMatcher(0);
	          m2.lastIndex = this.lastIndex + 1;
	          result = m2.exec(s);
	        }
	      }

	      if (result) {
	        this.regexIndex += result.position + 1;
	        if (this.regexIndex === this.count) {
	          // wrap-around to considering all matches again
	          this.considerAll();
	        }
	      }

	      return result;
	    }
	  }

	  /**
	   * Given a mode, builds a huge ResumableMultiRegex that can be used to walk
	   * the content and find matches.
	   *
	   * @param {CompiledMode} mode
	   * @returns {ResumableMultiRegex}
	   */
	  function buildModeRegex(mode) {
	    const mm = new ResumableMultiRegex();

	    mode.contains.forEach(term => mm.addRule(term.begin, { rule: term, type: "begin" }));

	    if (mode.terminatorEnd) {
	      mm.addRule(mode.terminatorEnd, { type: "end" });
	    }
	    if (mode.illegal) {
	      mm.addRule(mode.illegal, { type: "illegal" });
	    }

	    return mm;
	  }

	  /** skip vs abort vs ignore
	   *
	   * @skip   - The mode is still entered and exited normally (and contains rules apply),
	   *           but all content is held and added to the parent buffer rather than being
	   *           output when the mode ends.  Mostly used with `sublanguage` to build up
	   *           a single large buffer than can be parsed by sublanguage.
	   *
	   *             - The mode begin ands ends normally.
	   *             - Content matched is added to the parent mode buffer.
	   *             - The parser cursor is moved forward normally.
	   *
	   * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it
	   *           never matched) but DOES NOT continue to match subsequent `contains`
	   *           modes.  Abort is bad/suboptimal because it can result in modes
	   *           farther down not getting applied because an earlier rule eats the
	   *           content but then aborts.
	   *
	   *             - The mode does not begin.
	   *             - Content matched by `begin` is added to the mode buffer.
	   *             - The parser cursor is moved forward accordingly.
	   *
	   * @ignore - Ignores the mode (as if it never matched) and continues to match any
	   *           subsequent `contains` modes.  Ignore isn't technically possible with
	   *           the current parser implementation.
	   *
	   *             - The mode does not begin.
	   *             - Content matched by `begin` is ignored.
	   *             - The parser cursor is not moved forward.
	   */

	  /**
	   * Compiles an individual mode
	   *
	   * This can raise an error if the mode contains certain detectable known logic
	   * issues.
	   * @param {Mode} mode
	   * @param {CompiledMode | null} [parent]
	   * @returns {CompiledMode | never}
	   */
	  function compileMode(mode, parent) {
	    const cmode = /** @type CompiledMode */ (mode);
	    if (mode.compiled) return cmode;

	    [
	      // do this early so compiler extensions generally don't have to worry about
	      // the distinction between match/begin
	      compileMatch
	    ].forEach(ext => ext(mode, parent));

	    language.compilerExtensions.forEach(ext => ext(mode, parent));

	    // __beforeBegin is considered private API, internal use only
	    mode.__beforeBegin = null;

	    [
	      beginKeywords,
	      // do this later so compiler extensions that come earlier have access to the
	      // raw array if they wanted to perhaps manipulate it, etc.
	      compileIllegal,
	      // default to 1 relevance if not specified
	      compileRelevance
	    ].forEach(ext => ext(mode, parent));

	    mode.compiled = true;

	    let keywordPattern = null;
	    if (typeof mode.keywords === "object") {
	      keywordPattern = mode.keywords.$pattern;
	      delete mode.keywords.$pattern;
	    }

	    if (mode.keywords) {
	      mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);
	    }

	    // both are not allowed
	    if (mode.lexemes && keywordPattern) {
	      throw new Error("ERR: Prefer `keywords.$pattern` to `mode.lexemes`, BOTH are not allowed. (see mode reference) ");
	    }

	    // `mode.lexemes` was the old standard before we added and now recommend
	    // using `keywords.$pattern` to pass the keyword pattern
	    keywordPattern = keywordPattern || mode.lexemes || /\w+/;
	    cmode.keywordPatternRe = langRe(keywordPattern, true);

	    if (parent) {
	      if (!mode.begin) mode.begin = /\B|\b/;
	      cmode.beginRe = langRe(mode.begin);
	      if (mode.endSameAsBegin) mode.end = mode.begin;
	      if (!mode.end && !mode.endsWithParent) mode.end = /\B|\b/;
	      if (mode.end) cmode.endRe = langRe(mode.end);
	      cmode.terminatorEnd = source(mode.end) || '';
	      if (mode.endsWithParent && parent.terminatorEnd) {
	        cmode.terminatorEnd += (mode.end ? '|' : '') + parent.terminatorEnd;
	      }
	    }
	    if (mode.illegal) cmode.illegalRe = langRe(/** @type {RegExp | string} */ (mode.illegal));
	    if (!mode.contains) mode.contains = [];

	    mode.contains = [].concat(...mode.contains.map(function(c) {
	      return expandOrCloneMode(c === 'self' ? mode : c);
	    }));
	    mode.contains.forEach(function(c) { compileMode(/** @type Mode */ (c), cmode); });

	    if (mode.starts) {
	      compileMode(mode.starts, parent);
	    }

	    cmode.matcher = buildModeRegex(cmode);
	    return cmode;
	  }

	  if (!language.compilerExtensions) language.compilerExtensions = [];

	  // self is not valid at the top-level
	  if (language.contains && language.contains.includes('self')) {
	    throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
	  }

	  // we need a null object, which inherit will guarantee
	  language.classNameAliases = inherit(language.classNameAliases || {});

	  return compileMode(/** @type Mode */ (language));
	}

	/**
	 * Determines if a mode has a dependency on it's parent or not
	 *
	 * If a mode does have a parent dependency then often we need to clone it if
	 * it's used in multiple places so that each copy points to the correct parent,
	 * where-as modes without a parent can often safely be re-used at the bottom of
	 * a mode chain.
	 *
	 * @param {Mode | null} mode
	 * @returns {boolean} - is there a dependency on the parent?
	 * */
	function dependencyOnParent(mode) {
	  if (!mode) return false;

	  return mode.endsWithParent || dependencyOnParent(mode.starts);
	}

	/**
	 * Expands a mode or clones it if necessary
	 *
	 * This is necessary for modes with parental dependenceis (see notes on
	 * `dependencyOnParent`) and for nodes that have `variants` - which must then be
	 * exploded into their own individual modes at compile time.
	 *
	 * @param {Mode} mode
	 * @returns {Mode | Mode[]}
	 * */
	function expandOrCloneMode(mode) {
	  if (mode.variants && !mode.cachedVariants) {
	    mode.cachedVariants = mode.variants.map(function(variant) {
	      return inherit(mode, { variants: null }, variant);
	    });
	  }

	  // EXPAND
	  // if we have variants then essentially "replace" the mode with the variants
	  // this happens in compileMode, where this function is called from
	  if (mode.cachedVariants) {
	    return mode.cachedVariants;
	  }

	  // CLONE
	  // if we have dependencies on parents then we need a unique
	  // instance of ourselves, so we can be reused with many
	  // different parents without issue
	  if (dependencyOnParent(mode)) {
	    return inherit(mode, { starts: mode.starts ? inherit(mode.starts) : null });
	  }

	  if (Object.isFrozen(mode)) {
	    return inherit(mode);
	  }

	  // no special dependency issues, just return ourselves
	  return mode;
	}

	var version = "10.6.0";

	// @ts-nocheck

	function hasValueOrEmptyAttribute(value) {
	  return Boolean(value || value === "");
	}

	function BuildVuePlugin(hljs) {
	  const Component = {
	    props: ["language", "code", "autodetect"],
	    data: function() {
	      return {
	        detectedLanguage: "",
	        unknownLanguage: false
	      };
	    },
	    computed: {
	      className() {
	        if (this.unknownLanguage) return "";

	        return "hljs " + this.detectedLanguage;
	      },
	      highlighted() {
	        // no idea what language to use, return raw code
	        if (!this.autoDetect && !hljs.getLanguage(this.language)) {
	          console.warn(`The language "${this.language}" you specified could not be found.`);
	          this.unknownLanguage = true;
	          return escapeHTML(this.code);
	        }

	        let result = {};
	        if (this.autoDetect) {
	          result = hljs.highlightAuto(this.code);
	          this.detectedLanguage = result.language;
	        } else {
	          result = hljs.highlight(this.language, this.code, this.ignoreIllegals);
	          this.detectedLanguage = this.language;
	        }
	        return result.value;
	      },
	      autoDetect() {
	        return !this.language || hasValueOrEmptyAttribute(this.autodetect);
	      },
	      ignoreIllegals() {
	        return true;
	      }
	    },
	    // this avoids needing to use a whole Vue compilation pipeline just
	    // to build Highlight.js
	    render(createElement) {
	      return createElement("pre", {}, [
	        createElement("code", {
	          class: this.className,
	          domProps: { innerHTML: this.highlighted }
	        })
	      ]);
	    }
	    // template: `<pre><code :class="className" v-html="highlighted"></code></pre>`
	  };

	  const VuePlugin = {
	    install(Vue) {
	      Vue.component('highlightjs', Component);
	    }
	  };

	  return { Component, VuePlugin };
	}

	/* plugin itself */

	/** @type {HLJSPlugin} */
	const mergeHTMLPlugin = {
	  "after:highlightBlock": ({ block, result, text }) => {
	    const originalStream = nodeStream(block);
	    if (!originalStream.length) return;

	    const resultNode = document.createElement('div');
	    resultNode.innerHTML = result.value;
	    result.value = mergeStreams(originalStream, nodeStream(resultNode), text);
	  }
	};

	/* Stream merging support functions */

	/**
	 * @typedef Event
	 * @property {'start'|'stop'} event
	 * @property {number} offset
	 * @property {Node} node
	 */

	/**
	 * @param {Node} node
	 */
	function tag(node) {
	  return node.nodeName.toLowerCase();
	}

	/**
	 * @param {Node} node
	 */
	function nodeStream(node) {
	  /** @type Event[] */
	  const result = [];
	  (function _nodeStream(node, offset) {
	    for (let child = node.firstChild; child; child = child.nextSibling) {
	      if (child.nodeType === 3) {
	        offset += child.nodeValue.length;
	      } else if (child.nodeType === 1) {
	        result.push({
	          event: 'start',
	          offset: offset,
	          node: child
	        });
	        offset = _nodeStream(child, offset);
	        // Prevent void elements from having an end tag that would actually
	        // double them in the output. There are more void elements in HTML
	        // but we list only those realistically expected in code display.
	        if (!tag(child).match(/br|hr|img|input/)) {
	          result.push({
	            event: 'stop',
	            offset: offset,
	            node: child
	          });
	        }
	      }
	    }
	    return offset;
	  })(node, 0);
	  return result;
	}

	/**
	 * @param {any} original - the original stream
	 * @param {any} highlighted - stream of the highlighted source
	 * @param {string} value - the original source itself
	 */
	function mergeStreams(original, highlighted, value) {
	  let processed = 0;
	  let result = '';
	  const nodeStack = [];

	  function selectStream() {
	    if (!original.length || !highlighted.length) {
	      return original.length ? original : highlighted;
	    }
	    if (original[0].offset !== highlighted[0].offset) {
	      return (original[0].offset < highlighted[0].offset) ? original : highlighted;
	    }

	    /*
	    To avoid starting the stream just before it should stop the order is
	    ensured that original always starts first and closes last:

	    if (event1 == 'start' && event2 == 'start')
	      return original;
	    if (event1 == 'start' && event2 == 'stop')
	      return highlighted;
	    if (event1 == 'stop' && event2 == 'start')
	      return original;
	    if (event1 == 'stop' && event2 == 'stop')
	      return highlighted;

	    ... which is collapsed to:
	    */
	    return highlighted[0].event === 'start' ? original : highlighted;
	  }

	  /**
	   * @param {Node} node
	   */
	  function open(node) {
	    /** @param {Attr} attr */
	    function attributeString(attr) {
	      return ' ' + attr.nodeName + '="' + escapeHTML(attr.value) + '"';
	    }
	    // @ts-ignore
	    result += '<' + tag(node) + [].map.call(node.attributes, attributeString).join('') + '>';
	  }

	  /**
	   * @param {Node} node
	   */
	  function close(node) {
	    result += '</' + tag(node) + '>';
	  }

	  /**
	   * @param {Event} event
	   */
	  function render(event) {
	    (event.event === 'start' ? open : close)(event.node);
	  }

	  while (original.length || highlighted.length) {
	    let stream = selectStream();
	    result += escapeHTML(value.substring(processed, stream[0].offset));
	    processed = stream[0].offset;
	    if (stream === original) {
	      /*
	      On any opening or closing tag of the original markup we first close
	      the entire highlighted node stack, then render the original tag along
	      with all the following original tags at the same offset and then
	      reopen all the tags on the highlighted stack.
	      */
	      nodeStack.reverse().forEach(close);
	      do {
	        render(stream.splice(0, 1)[0]);
	        stream = selectStream();
	      } while (stream === original && stream.length && stream[0].offset === processed);
	      nodeStack.reverse().forEach(open);
	    } else {
	      if (stream[0].event === 'start') {
	        nodeStack.push(stream[0].node);
	      } else {
	        nodeStack.pop();
	      }
	      render(stream.splice(0, 1)[0]);
	    }
	  }
	  return result + escapeHTML(value.substr(processed));
	}

	/*

	For the reasoning behind this please see:
	https://github.com/highlightjs/highlight.js/issues/2880#issuecomment-747275419

	*/

	/**
	 * @param {string} message
	 */
	const error = (message) => {
	  console.error(message);
	};

	/**
	 * @param {string} message
	 * @param {any} args
	 */
	const warn = (message, ...args) => {
	  console.log(`WARN: ${message}`, ...args);
	};

	/**
	 * @param {string} version
	 * @param {string} message
	 */
	const deprecated = (version, message) => {
	  console.log(`Deprecated as of ${version}. ${message}`);
	};

	/*
	Syntax highlighting with language autodetection.
	https://highlightjs.org/
	*/

	const escape$1 = escapeHTML;
	const inherit$1 = inherit;
	const NO_MATCH = Symbol("nomatch");

	/**
	 * @param {any} hljs - object that is extended (legacy)
	 * @returns {HLJSApi}
	 */
	const HLJS = function(hljs) {
	  // Global internal variables used within the highlight.js library.
	  /** @type {Record<string, Language>} */
	  const languages = Object.create(null);
	  /** @type {Record<string, string>} */
	  const aliases = Object.create(null);
	  /** @type {HLJSPlugin[]} */
	  const plugins = [];

	  // safe/production mode - swallows more errors, tries to keep running
	  // even if a single syntax or parse hits a fatal error
	  let SAFE_MODE = true;
	  const fixMarkupRe = /(^(<[^>]+>|\t|)+|\n)/gm;
	  const LANGUAGE_NOT_FOUND = "Could not find the language '{}', did you forget to load/include a language module?";
	  /** @type {Language} */
	  const PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: 'Plain text', contains: [] };

	  // Global options used when within external APIs. This is modified when
	  // calling the `hljs.configure` function.
	  /** @type HLJSOptions */
	  let options = {
	    noHighlightRe: /^(no-?highlight)$/i,
	    languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
	    classPrefix: 'hljs-',
	    tabReplace: null,
	    useBR: false,
	    languages: null,
	    // beta configuration options, subject to change, welcome to discuss
	    // https://github.com/highlightjs/highlight.js/issues/1086
	    __emitter: TokenTreeEmitter
	  };

	  /* Utility functions */

	  /**
	   * Tests a language name to see if highlighting should be skipped
	   * @param {string} languageName
	   */
	  function shouldNotHighlight(languageName) {
	    return options.noHighlightRe.test(languageName);
	  }

	  /**
	   * @param {HighlightedHTMLElement} block - the HTML element to determine language for
	   */
	  function blockLanguage(block) {
	    let classes = block.className + ' ';

	    classes += block.parentNode ? block.parentNode.className : '';

	    // language-* takes precedence over non-prefixed class names.
	    const match = options.languageDetectRe.exec(classes);
	    if (match) {
	      const language = getLanguage(match[1]);
	      if (!language) {
	        warn(LANGUAGE_NOT_FOUND.replace("{}", match[1]));
	        warn("Falling back to no-highlight mode for this block.", block);
	      }
	      return language ? match[1] : 'no-highlight';
	    }

	    return classes
	      .split(/\s+/)
	      .find((_class) => shouldNotHighlight(_class) || getLanguage(_class));
	  }

	  /**
	   * Core highlighting function.
	   *
	   * @param {string} languageName - the language to use for highlighting
	   * @param {string} code - the code to highlight
	   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail
	   * @param {CompiledMode} [continuation] - current continuation mode, if any
	   *
	   * @returns {HighlightResult} Result - an object that represents the result
	   * @property {string} language - the language name
	   * @property {number} relevance - the relevance score
	   * @property {string} value - the highlighted HTML code
	   * @property {string} code - the original raw code
	   * @property {CompiledMode} top - top of the current mode stack
	   * @property {boolean} illegal - indicates whether any illegal matches were found
	  */
	  function highlight(languageName, code, ignoreIllegals, continuation) {
	    /** @type {BeforeHighlightContext} */
	    const context = {
	      code,
	      language: languageName
	    };
	    // the plugin can change the desired language or the code to be highlighted
	    // just be changing the object it was passed
	    fire("before:highlight", context);

	    // a before plugin can usurp the result completely by providing it's own
	    // in which case we don't even need to call highlight
	    const result = context.result
	      ? context.result
	      : _highlight(context.language, context.code, ignoreIllegals, continuation);

	    result.code = context.code;
	    // the plugin can change anything in result to suite it
	    fire("after:highlight", result);

	    return result;
	  }

	  /**
	   * private highlight that's used internally and does not fire callbacks
	   *
	   * @param {string} languageName - the language to use for highlighting
	   * @param {string} code - the code to highlight
	   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail
	   * @param {CompiledMode} [continuation] - current continuation mode, if any
	   * @returns {HighlightResult} - result of the highlight operation
	  */
	  function _highlight(languageName, code, ignoreIllegals, continuation) {
	    const codeToHighlight = code;

	    /**
	     * Return keyword data if a match is a keyword
	     * @param {CompiledMode} mode - current mode
	     * @param {RegExpMatchArray} match - regexp match data
	     * @returns {KeywordData | false}
	     */
	    function keywordData(mode, match) {
	      const matchText = language.case_insensitive ? match[0].toLowerCase() : match[0];
	      return Object.prototype.hasOwnProperty.call(mode.keywords, matchText) && mode.keywords[matchText];
	    }

	    function processKeywords() {
	      if (!top.keywords) {
	        emitter.addText(modeBuffer);
	        return;
	      }

	      let lastIndex = 0;
	      top.keywordPatternRe.lastIndex = 0;
	      let match = top.keywordPatternRe.exec(modeBuffer);
	      let buf = "";

	      while (match) {
	        buf += modeBuffer.substring(lastIndex, match.index);
	        const data = keywordData(top, match);
	        if (data) {
	          const [kind, keywordRelevance] = data;
	          emitter.addText(buf);
	          buf = "";

	          relevance += keywordRelevance;
	          const cssClass = language.classNameAliases[kind] || kind;
	          emitter.addKeyword(match[0], cssClass);
	        } else {
	          buf += match[0];
	        }
	        lastIndex = top.keywordPatternRe.lastIndex;
	        match = top.keywordPatternRe.exec(modeBuffer);
	      }
	      buf += modeBuffer.substr(lastIndex);
	      emitter.addText(buf);
	    }

	    function processSubLanguage() {
	      if (modeBuffer === "") return;
	      /** @type HighlightResult */
	      let result = null;

	      if (typeof top.subLanguage === 'string') {
	        if (!languages[top.subLanguage]) {
	          emitter.addText(modeBuffer);
	          return;
	        }
	        result = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);
	        continuations[top.subLanguage] = /** @type {CompiledMode} */ (result.top);
	      } else {
	        result = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);
	      }

	      // Counting embedded language score towards the host language may be disabled
	      // with zeroing the containing mode relevance. Use case in point is Markdown that
	      // allows XML everywhere and makes every XML snippet to have a much larger Markdown
	      // score.
	      if (top.relevance > 0) {
	        relevance += result.relevance;
	      }
	      emitter.addSublanguage(result.emitter, result.language);
	    }

	    function processBuffer() {
	      if (top.subLanguage != null) {
	        processSubLanguage();
	      } else {
	        processKeywords();
	      }
	      modeBuffer = '';
	    }

	    /**
	     * @param {Mode} mode - new mode to start
	     */
	    function startNewMode(mode) {
	      if (mode.className) {
	        emitter.openNode(language.classNameAliases[mode.className] || mode.className);
	      }
	      top = Object.create(mode, { parent: { value: top } });
	      return top;
	    }

	    /**
	     * @param {CompiledMode } mode - the mode to potentially end
	     * @param {RegExpMatchArray} match - the latest match
	     * @param {string} matchPlusRemainder - match plus remainder of content
	     * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode
	     */
	    function endOfMode(mode, match, matchPlusRemainder) {
	      let matched = startsWith(mode.endRe, matchPlusRemainder);

	      if (matched) {
	        if (mode["on:end"]) {
	          const resp = new Response(mode);
	          mode["on:end"](match, resp);
	          if (resp.ignore) matched = false;
	        }

	        if (matched) {
	          while (mode.endsParent && mode.parent) {
	            mode = mode.parent;
	          }
	          return mode;
	        }
	      }
	      // even if on:end fires an `ignore` it's still possible
	      // that we might trigger the end node because of a parent mode
	      if (mode.endsWithParent) {
	        return endOfMode(mode.parent, match, matchPlusRemainder);
	      }
	    }

	    /**
	     * Handle matching but then ignoring a sequence of text
	     *
	     * @param {string} lexeme - string containing full match text
	     */
	    function doIgnore(lexeme) {
	      if (top.matcher.regexIndex === 0) {
	        // no more regexs to potentially match here, so we move the cursor forward one
	        // space
	        modeBuffer += lexeme[0];
	        return 1;
	      } else {
	        // no need to move the cursor, we still have additional regexes to try and
	        // match at this very spot
	        resumeScanAtSamePosition = true;
	        return 0;
	      }
	    }

	    /**
	     * Handle the start of a new potential mode match
	     *
	     * @param {EnhancedMatch} match - the current match
	     * @returns {number} how far to advance the parse cursor
	     */
	    function doBeginMatch(match) {
	      const lexeme = match[0];
	      const newMode = match.rule;

	      const resp = new Response(newMode);
	      // first internal before callbacks, then the public ones
	      const beforeCallbacks = [newMode.__beforeBegin, newMode["on:begin"]];
	      for (const cb of beforeCallbacks) {
	        if (!cb) continue;
	        cb(match, resp);
	        if (resp.ignore) return doIgnore(lexeme);
	      }

	      if (newMode && newMode.endSameAsBegin) {
	        newMode.endRe = escape(lexeme);
	      }

	      if (newMode.skip) {
	        modeBuffer += lexeme;
	      } else {
	        if (newMode.excludeBegin) {
	          modeBuffer += lexeme;
	        }
	        processBuffer();
	        if (!newMode.returnBegin && !newMode.excludeBegin) {
	          modeBuffer = lexeme;
	        }
	      }
	      startNewMode(newMode);
	      // if (mode["after:begin"]) {
	      //   let resp = new Response(mode);
	      //   mode["after:begin"](match, resp);
	      // }
	      return newMode.returnBegin ? 0 : lexeme.length;
	    }

	    /**
	     * Handle the potential end of mode
	     *
	     * @param {RegExpMatchArray} match - the current match
	     */
	    function doEndMatch(match) {
	      const lexeme = match[0];
	      const matchPlusRemainder = codeToHighlight.substr(match.index);

	      const endMode = endOfMode(top, match, matchPlusRemainder);
	      if (!endMode) { return NO_MATCH; }

	      const origin = top;
	      if (origin.skip) {
	        modeBuffer += lexeme;
	      } else {
	        if (!(origin.returnEnd || origin.excludeEnd)) {
	          modeBuffer += lexeme;
	        }
	        processBuffer();
	        if (origin.excludeEnd) {
	          modeBuffer = lexeme;
	        }
	      }
	      do {
	        if (top.className) {
	          emitter.closeNode();
	        }
	        if (!top.skip && !top.subLanguage) {
	          relevance += top.relevance;
	        }
	        top = top.parent;
	      } while (top !== endMode.parent);
	      if (endMode.starts) {
	        if (endMode.endSameAsBegin) {
	          endMode.starts.endRe = endMode.endRe;
	        }
	        startNewMode(endMode.starts);
	      }
	      return origin.returnEnd ? 0 : lexeme.length;
	    }

	    function processContinuations() {
	      const list = [];
	      for (let current = top; current !== language; current = current.parent) {
	        if (current.className) {
	          list.unshift(current.className);
	        }
	      }
	      list.forEach(item => emitter.openNode(item));
	    }

	    /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */
	    let lastMatch = {};

	    /**
	     *  Process an individual match
	     *
	     * @param {string} textBeforeMatch - text preceeding the match (since the last match)
	     * @param {EnhancedMatch} [match] - the match itself
	     */
	    function processLexeme(textBeforeMatch, match) {
	      const lexeme = match && match[0];

	      // add non-matched text to the current mode buffer
	      modeBuffer += textBeforeMatch;

	      if (lexeme == null) {
	        processBuffer();
	        return 0;
	      }

	      // we've found a 0 width match and we're stuck, so we need to advance
	      // this happens when we have badly behaved rules that have optional matchers to the degree that
	      // sometimes they can end up matching nothing at all
	      // Ref: https://github.com/highlightjs/highlight.js/issues/2140
	      if (lastMatch.type === "begin" && match.type === "end" && lastMatch.index === match.index && lexeme === "") {
	        // spit the "skipped" character that our regex choked on back into the output sequence
	        modeBuffer += codeToHighlight.slice(match.index, match.index + 1);
	        if (!SAFE_MODE) {
	          /** @type {AnnotatedError} */
	          const err = new Error('0 width match regex');
	          err.languageName = languageName;
	          err.badRule = lastMatch.rule;
	          throw err;
	        }
	        return 1;
	      }
	      lastMatch = match;

	      if (match.type === "begin") {
	        return doBeginMatch(match);
	      } else if (match.type === "illegal" && !ignoreIllegals) {
	        // illegal match, we do not continue processing
	        /** @type {AnnotatedError} */
	        const err = new Error('Illegal lexeme "' + lexeme + '" for mode "' + (top.className || '<unnamed>') + '"');
	        err.mode = top;
	        throw err;
	      } else if (match.type === "end") {
	        const processed = doEndMatch(match);
	        if (processed !== NO_MATCH) {
	          return processed;
	        }
	      }

	      // edge case for when illegal matches $ (end of line) which is technically
	      // a 0 width match but not a begin/end match so it's not caught by the
	      // first handler (when ignoreIllegals is true)
	      if (match.type === "illegal" && lexeme === "") {
	        // advance so we aren't stuck in an infinite loop
	        return 1;
	      }

	      // infinite loops are BAD, this is a last ditch catch all. if we have a
	      // decent number of iterations yet our index (cursor position in our
	      // parsing) still 3x behind our index then something is very wrong
	      // so we bail
	      if (iterations > 100000 && iterations > match.index * 3) {
	        const err = new Error('potential infinite loop, way more iterations than matches');
	        throw err;
	      }

	      /*
	      Why might be find ourselves here?  Only one occasion now.  An end match that was
	      triggered but could not be completed.  When might this happen?  When an `endSameasBegin`
	      rule sets the end rule to a specific match.  Since the overall mode termination rule that's
	      being used to scan the text isn't recompiled that means that any match that LOOKS like
	      the end (but is not, because it is not an exact match to the beginning) will
	      end up here.  A definite end match, but when `doEndMatch` tries to "reapply"
	      the end rule and fails to match, we wind up here, and just silently ignore the end.

	      This causes no real harm other than stopping a few times too many.
	      */

	      modeBuffer += lexeme;
	      return lexeme.length;
	    }

	    const language = getLanguage(languageName);
	    if (!language) {
	      error(LANGUAGE_NOT_FOUND.replace("{}", languageName));
	      throw new Error('Unknown language: "' + languageName + '"');
	    }

	    const md = compileLanguage(language, { plugins });
	    let result = '';
	    /** @type {CompiledMode} */
	    let top = continuation || md;
	    /** @type Record<string,CompiledMode> */
	    const continuations = {}; // keep continuations for sub-languages
	    const emitter = new options.__emitter(options);
	    processContinuations();
	    let modeBuffer = '';
	    let relevance = 0;
	    let index = 0;
	    let iterations = 0;
	    let resumeScanAtSamePosition = false;

	    try {
	      top.matcher.considerAll();

	      for (;;) {
	        iterations++;
	        if (resumeScanAtSamePosition) {
	          // only regexes not matched previously will now be
	          // considered for a potential match
	          resumeScanAtSamePosition = false;
	        } else {
	          top.matcher.considerAll();
	        }
	        top.matcher.lastIndex = index;

	        const match = top.matcher.exec(codeToHighlight);
	        // console.log("match", match[0], match.rule && match.rule.begin)

	        if (!match) break;

	        const beforeMatch = codeToHighlight.substring(index, match.index);
	        const processedCount = processLexeme(beforeMatch, match);
	        index = match.index + processedCount;
	      }
	      processLexeme(codeToHighlight.substr(index));
	      emitter.closeAllNodes();
	      emitter.finalize();
	      result = emitter.toHTML();

	      return {
	        // avoid possible breakage with v10 clients expecting
	        // this to always be an integer
	        relevance: Math.floor(relevance),
	        value: result,
	        language: languageName,
	        illegal: false,
	        emitter: emitter,
	        top: top
	      };
	    } catch (err) {
	      if (err.message && err.message.includes('Illegal')) {
	        return {
	          illegal: true,
	          illegalBy: {
	            msg: err.message,
	            context: codeToHighlight.slice(index - 100, index + 100),
	            mode: err.mode
	          },
	          sofar: result,
	          relevance: 0,
	          value: escape$1(codeToHighlight),
	          emitter: emitter
	        };
	      } else if (SAFE_MODE) {
	        return {
	          illegal: false,
	          relevance: 0,
	          value: escape$1(codeToHighlight),
	          emitter: emitter,
	          language: languageName,
	          top: top,
	          errorRaised: err
	        };
	      } else {
	        throw err;
	      }
	    }
	  }

	  /**
	   * returns a valid highlight result, without actually doing any actual work,
	   * auto highlight starts with this and it's possible for small snippets that
	   * auto-detection may not find a better match
	   * @param {string} code
	   * @returns {HighlightResult}
	   */
	  function justTextHighlightResult(code) {
	    const result = {
	      relevance: 0,
	      emitter: new options.__emitter(options),
	      value: escape$1(code),
	      illegal: false,
	      top: PLAINTEXT_LANGUAGE
	    };
	    result.emitter.addText(code);
	    return result;
	  }

	  /**
	  Highlighting with language detection. Accepts a string with the code to
	  highlight. Returns an object with the following properties:

	  - language (detected language)
	  - relevance (int)
	  - value (an HTML string with highlighting markup)
	  - second_best (object with the same structure for second-best heuristically
	    detected language, may be absent)

	    @param {string} code
	    @param {Array<string>} [languageSubset]
	    @returns {AutoHighlightResult}
	  */
	  function highlightAuto(code, languageSubset) {
	    languageSubset = languageSubset || options.languages || Object.keys(languages);
	    const plaintext = justTextHighlightResult(code);

	    const results = languageSubset.filter(getLanguage).filter(autoDetection).map(name =>
	      _highlight(name, code, false)
	    );
	    results.unshift(plaintext); // plaintext is always an option

	    const sorted = results.sort((a, b) => {
	      // sort base on relevance
	      if (a.relevance !== b.relevance) return b.relevance - a.relevance;

	      // always award the tie to the base language
	      // ie if C++ and Arduino are tied, it's more likely to be C++
	      if (a.language && b.language) {
	        if (getLanguage(a.language).supersetOf === b.language) {
	          return 1;
	        } else if (getLanguage(b.language).supersetOf === a.language) {
	          return -1;
	        }
	      }

	      // otherwise say they are equal, which has the effect of sorting on
	      // relevance while preserving the original ordering - which is how ties
	      // have historically been settled, ie the language that comes first always
	      // wins in the case of a tie
	      return 0;
	    });

	    const [best, secondBest] = sorted;

	    /** @type {AutoHighlightResult} */
	    const result = best;
	    result.second_best = secondBest;

	    return result;
	  }

	  /**
	  Post-processing of the highlighted markup:

	  - replace TABs with something more useful
	  - replace real line-breaks with '<br>' for non-pre containers

	    @param {string} html
	    @returns {string}
	  */
	  function fixMarkup(html) {
	    if (!(options.tabReplace || options.useBR)) {
	      return html;
	    }

	    return html.replace(fixMarkupRe, match => {
	      if (match === '\n') {
	        return options.useBR ? '<br>' : match;
	      } else if (options.tabReplace) {
	        return match.replace(/\t/g, options.tabReplace);
	      }
	      return match;
	    });
	  }

	  /**
	   * Builds new class name for block given the language name
	   *
	   * @param {HTMLElement} element
	   * @param {string} [currentLang]
	   * @param {string} [resultLang]
	   */
	  function updateClassName(element, currentLang, resultLang) {
	    const language = currentLang ? aliases[currentLang] : resultLang;

	    element.classList.add("hljs");
	    if (language) element.classList.add(language);
	  }

	  /** @type {HLJSPlugin} */
	  const brPlugin = {
	    "before:highlightBlock": ({ block }) => {
	      if (options.useBR) {
	        block.innerHTML = block.innerHTML.replace(/\n/g, '').replace(/<br[ /]*>/g, '\n');
	      }
	    },
	    "after:highlightBlock": ({ result }) => {
	      if (options.useBR) {
	        result.value = result.value.replace(/\n/g, "<br>");
	      }
	    }
	  };

	  const TAB_REPLACE_RE = /^(<[^>]+>|\t)+/gm;
	  /** @type {HLJSPlugin} */
	  const tabReplacePlugin = {
	    "after:highlightBlock": ({ result }) => {
	      if (options.tabReplace) {
	        result.value = result.value.replace(TAB_REPLACE_RE, (m) =>
	          m.replace(/\t/g, options.tabReplace)
	        );
	      }
	    }
	  };

	  /**
	   * Applies highlighting to a DOM node containing code. Accepts a DOM node and
	   * two optional parameters for fixMarkup.
	   *
	   * @param {HighlightedHTMLElement} element - the HTML element to highlight
	  */
	  function highlightBlock(element) {
	    /** @type HTMLElement */
	    let node = null;
	    const language = blockLanguage(element);

	    if (shouldNotHighlight(language)) return;

	    fire("before:highlightBlock",
	      { block: element, language: language });

	    node = element;
	    const text = node.textContent;
	    const result = language ? highlight(language, text, true) : highlightAuto(text);

	    fire("after:highlightBlock", { block: element, result, text });

	    element.innerHTML = result.value;
	    updateClassName(element, language, result.language);
	    element.result = {
	      language: result.language,
	      // TODO: remove with version 11.0
	      re: result.relevance,
	      relavance: result.relevance
	    };
	    if (result.second_best) {
	      element.second_best = {
	        language: result.second_best.language,
	        // TODO: remove with version 11.0
	        re: result.second_best.relevance,
	        relavance: result.second_best.relevance
	      };
	    }
	  }

	  /**
	   * Updates highlight.js global options with the passed options
	   *
	   * @param {Partial<HLJSOptions>} userOptions
	   */
	  function configure(userOptions) {
	    if (userOptions.useBR) {
	      deprecated("10.3.0", "'useBR' will be removed entirely in v11.0");
	      deprecated("10.3.0", "Please see https://github.com/highlightjs/highlight.js/issues/2559");
	    }
	    options = inherit$1(options, userOptions);
	  }

	  /**
	   * Highlights to all <pre><code> blocks on a page
	   *
	   * @type {Function & {called?: boolean}}
	   */
	  // TODO: remove v12, deprecated
	  const initHighlighting = () => {
	    if (initHighlighting.called) return;
	    initHighlighting.called = true;

	    deprecated("10.6.0", "initHighlighting() is deprecated.  Use highlightAll() instead.");

	    const blocks = document.querySelectorAll('pre code');
	    blocks.forEach(highlightBlock);
	  };

	  // Higlights all when DOMContentLoaded fires
	  // TODO: remove v12, deprecated
	  function initHighlightingOnLoad() {
	    deprecated("10.6.0", "initHighlightingOnLoad() is deprecated.  Use highlightAll() instead.");
	    wantsHighlight = true;
	  }

	  let wantsHighlight = false;
	  let domLoaded = false;

	  /**
	   * auto-highlights all pre>code elements on the page
	   */
	  function highlightAll() {
	    // if we are called too early in the loading process
	    if (!domLoaded) { wantsHighlight = true; return; }

	    const blocks = document.querySelectorAll('pre code');
	    blocks.forEach(highlightBlock);
	  }

	  function boot() {
	    domLoaded = true;
	    // if a highlight was requested before DOM was loaded, do now
	    if (wantsHighlight) highlightAll();
	  }

	  // make sure we are in the browser environment
	  if (typeof window !== 'undefined' && window.addEventListener) {
	    window.addEventListener('DOMContentLoaded', boot, false);
	  }

	  /**
	   * Register a language grammar module
	   *
	   * @param {string} languageName
	   * @param {LanguageFn} languageDefinition
	   */
	  function registerLanguage(languageName, languageDefinition) {
	    let lang = null;
	    try {
	      lang = languageDefinition(hljs);
	    } catch (error$1) {
	      error("Language definition for '{}' could not be registered.".replace("{}", languageName));
	      // hard or soft error
	      if (!SAFE_MODE) { throw error$1; } else { error(error$1); }
	      // languages that have serious errors are replaced with essentially a
	      // "plaintext" stand-in so that the code blocks will still get normal
	      // css classes applied to them - and one bad language won't break the
	      // entire highlighter
	      lang = PLAINTEXT_LANGUAGE;
	    }
	    // give it a temporary name if it doesn't have one in the meta-data
	    if (!lang.name) lang.name = languageName;
	    languages[languageName] = lang;
	    lang.rawDefinition = languageDefinition.bind(null, hljs);

	    if (lang.aliases) {
	      registerAliases(lang.aliases, { languageName });
	    }
	  }

	  /**
	   * @returns {string[]} List of language internal names
	   */
	  function listLanguages() {
	    return Object.keys(languages);
	  }

	  /**
	    intended usage: When one language truly requires another

	    Unlike `getLanguage`, this will throw when the requested language
	    is not available.

	    @param {string} name - name of the language to fetch/require
	    @returns {Language | never}
	  */
	  function requireLanguage(name) {
	    deprecated("10.4.0", "requireLanguage will be removed entirely in v11.");
	    deprecated("10.4.0", "Please see https://github.com/highlightjs/highlight.js/pull/2844");

	    const lang = getLanguage(name);
	    if (lang) { return lang; }

	    const err = new Error('The \'{}\' language is required, but not loaded.'.replace('{}', name));
	    throw err;
	  }

	  /**
	   * @param {string} name - name of the language to retrieve
	   * @returns {Language | undefined}
	   */
	  function getLanguage(name) {
	    name = (name || '').toLowerCase();
	    return languages[name] || languages[aliases[name]];
	  }

	  /**
	   *
	   * @param {string|string[]} aliasList - single alias or list of aliases
	   * @param {{languageName: string}} opts
	   */
	  function registerAliases(aliasList, { languageName }) {
	    if (typeof aliasList === 'string') {
	      aliasList = [aliasList];
	    }
	    aliasList.forEach(alias => { aliases[alias] = languageName; });
	  }

	  /**
	   * Determines if a given language has auto-detection enabled
	   * @param {string} name - name of the language
	   */
	  function autoDetection(name) {
	    const lang = getLanguage(name);
	    return lang && !lang.disableAutodetect;
	  }

	  /**
	   * @param {HLJSPlugin} plugin
	   */
	  function addPlugin(plugin) {
	    plugins.push(plugin);
	  }

	  /**
	   *
	   * @param {PluginEvent} event
	   * @param {any} args
	   */
	  function fire(event, args) {
	    const cb = event;
	    plugins.forEach(function(plugin) {
	      if (plugin[cb]) {
	        plugin[cb](args);
	      }
	    });
	  }

	  /**
	  Note: fixMarkup is deprecated and will be removed entirely in v11

	  @param {string} arg
	  @returns {string}
	  */
	  function deprecateFixMarkup(arg) {
	    deprecated("10.2.0", "fixMarkup will be removed entirely in v11.0");
	    deprecated("10.2.0", "Please see https://github.com/highlightjs/highlight.js/issues/2534");

	    return fixMarkup(arg);
	  }

	  /* Interface definition */
	  Object.assign(hljs, {
	    highlight,
	    highlightAuto,
	    highlightAll,
	    fixMarkup: deprecateFixMarkup,
	    highlightBlock,
	    configure,
	    initHighlighting,
	    initHighlightingOnLoad,
	    registerLanguage,
	    listLanguages,
	    getLanguage,
	    registerAliases,
	    requireLanguage,
	    autoDetection,
	    inherit: inherit$1,
	    addPlugin,
	    // plugins for frameworks
	    vuePlugin: BuildVuePlugin(hljs).VuePlugin
	  });

	  hljs.debugMode = function() { SAFE_MODE = false; };
	  hljs.safeMode = function() { SAFE_MODE = true; };
	  hljs.versionString = version;

	  for (const key in MODES) {
	    // @ts-ignore
	    if (typeof MODES[key] === "object") {
	      // @ts-ignore
	      deepFreezeEs6(MODES[key]);
	    }
	  }

	  // merge all the modes/regexs into our main object
	  Object.assign(hljs, MODES);

	  // built-in plugins, likely to be moved out of core in the future
	  hljs.addPlugin(brPlugin); // slated to be removed in v11
	  hljs.addPlugin(mergeHTMLPlugin);
	  hljs.addPlugin(tabReplacePlugin);
	  return hljs;
	};

	// export an "instance" of the highlighter
	var highlight = HLJS({});

	var core = highlight;

	/*
	Language: Python
	Description: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.
	Website: https://www.python.org
	Category: common
	*/
	function python(hljs) {
	  const RESERVED_WORDS = [
	    'and',
	    'as',
	    'assert',
	    'async',
	    'await',
	    'break',
	    'class',
	    'continue',
	    'def',
	    'del',
	    'elif',
	    'else',
	    'except',
	    'finally',
	    'for',
	    '',
	    'from',
	    'global',
	    'if',
	    'import',
	    'in',
	    'is',
	    'lambda',
	    'nonlocal|10',
	    'not',
	    'or',
	    'pass',
	    'raise',
	    'return',
	    'try',
	    'while',
	    'with',
	    'yield',
	  ];

	  const BUILT_INS = [
	    '__import__',
	    'abs',
	    'all',
	    'any',
	    'ascii',
	    'bin',
	    'bool',
	    'breakpoint',
	    'bytearray',
	    'bytes',
	    'callable',
	    'chr',
	    'classmethod',
	    'compile',
	    'complex',
	    'delattr',
	    'dict',
	    'dir',
	    'divmod',
	    'enumerate',
	    'eval',
	    'exec',
	    'filter',
	    'float',
	    'format',
	    'frozenset',
	    'getattr',
	    'globals',
	    'hasattr',
	    'hash',
	    'help',
	    'hex',
	    'id',
	    'input',
	    'int',
	    'isinstance',
	    'issubclass',
	    'iter',
	    'len',
	    'list',
	    'locals',
	    'map',
	    'max',
	    'memoryview',
	    'min',
	    'next',
	    'object',
	    'oct',
	    'open',
	    'ord',
	    'pow',
	    'print',
	    'property',
	    'range',
	    'repr',
	    'reversed',
	    'round',
	    'set',
	    'setattr',
	    'slice',
	    'sorted',
	    'staticmethod',
	    'str',
	    'sum',
	    'super',
	    'tuple',
	    'type',
	    'vars',
	    'zip',
	  ];

	  const LITERALS = [
	    '__debug__',
	    'Ellipsis',
	    'False',
	    'None',
	    'NotImplemented',
	    'True',
	  ];

	  const KEYWORDS = {
	    keyword: RESERVED_WORDS,
	    built_in: BUILT_INS,
	    literal: LITERALS
	  };

	  const PROMPT = {
	    className: 'meta',  begin: /^(>>>|\.\.\.) /
	  };

	  const SUBST = {
	    className: 'subst',
	    begin: /\{/, end: /\}/,
	    keywords: KEYWORDS,
	    illegal: /#/
	  };

	  const LITERAL_BRACKET = {
	    begin: /\{\{/,
	    relevance: 0
	  };

	  const STRING = {
	    className: 'string',
	    contains: [hljs.BACKSLASH_ESCAPE],
	    variants: [
	      {
	        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/, end: /'''/,
	        contains: [hljs.BACKSLASH_ESCAPE, PROMPT],
	        relevance: 10
	      },
	      {
	        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?"""/, end: /"""/,
	        contains: [hljs.BACKSLASH_ESCAPE, PROMPT],
	        relevance: 10
	      },
	      {
	        begin: /([fF][rR]|[rR][fF]|[fF])'''/, end: /'''/,
	        contains: [hljs.BACKSLASH_ESCAPE, PROMPT, LITERAL_BRACKET, SUBST]
	      },
	      {
	        begin: /([fF][rR]|[rR][fF]|[fF])"""/, end: /"""/,
	        contains: [hljs.BACKSLASH_ESCAPE, PROMPT, LITERAL_BRACKET, SUBST]
	      },
	      {
	        begin: /([uU]|[rR])'/, end: /'/,
	        relevance: 10
	      },
	      {
	        begin: /([uU]|[rR])"/, end: /"/,
	        relevance: 10
	      },
	      {
	        begin: /([bB]|[bB][rR]|[rR][bB])'/, end: /'/
	      },
	      {
	        begin: /([bB]|[bB][rR]|[rR][bB])"/, end: /"/
	      },
	      {
	        begin: /([fF][rR]|[rR][fF]|[fF])'/, end: /'/,
	        contains: [hljs.BACKSLASH_ESCAPE, LITERAL_BRACKET, SUBST]
	      },
	      {
	        begin: /([fF][rR]|[rR][fF]|[fF])"/, end: /"/,
	        contains: [hljs.BACKSLASH_ESCAPE, LITERAL_BRACKET, SUBST]
	      },
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE
	    ]
	  };

	  // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals
	  const digitpart = '[0-9](_?[0-9])*';
	  const pointfloat = `(\\b(${digitpart}))?\\.(${digitpart})|\\b(${digitpart})\\.`;
	  const NUMBER = {
	    className: 'number', relevance: 0,
	    variants: [
	      // exponentfloat, pointfloat
	      // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals
	      // optionally imaginary
	      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
	      // Note: no leading \b because floats can start with a decimal point
	      // and we don't want to mishandle e.g. `fn(.5)`,
	      // no trailing \b for pointfloat because it can end with a decimal point
	      // and we don't want to mishandle e.g. `0..hex()`; this should be safe
	      // because both MUST contain a decimal point and so cannot be confused with
	      // the interior part of an identifier
	      { begin: `(\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?\\b` },
	      { begin: `(${pointfloat})[jJ]?` },

	      // decinteger, bininteger, octinteger, hexinteger
	      // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals
	      // optionally "long" in Python 2
	      // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals
	      // decinteger is optionally imaginary
	      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
	      { begin: '\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?\\b' },
	      { begin: '\\b0[bB](_?[01])+[lL]?\\b' },
	      { begin: '\\b0[oO](_?[0-7])+[lL]?\\b' },
	      { begin: '\\b0[xX](_?[0-9a-fA-F])+[lL]?\\b' },

	      // imagnumber (digitpart-based)
	      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
	      { begin: `\\b(${digitpart})[jJ]\\b` },
	    ]
	  };

	  const PARAMS = {
	    className: 'params',
	    variants: [
	      // Exclude params at functions without params
	      {begin: /\(\s*\)/, skip: true, className: null },
	      {
	        begin: /\(/, end: /\)/, excludeBegin: true, excludeEnd: true,
	        keywords: KEYWORDS,
	        contains: ['self', PROMPT, NUMBER, STRING, hljs.HASH_COMMENT_MODE],
	      },
	    ],
	  };
	  SUBST.contains = [STRING, NUMBER, PROMPT];

	  return {
	    name: 'Python',
	    aliases: ['py', 'gyp', 'ipython'],
	    keywords: KEYWORDS,
	    illegal: /(<\/|->|\?)|=>/,
	    contains: [
	      PROMPT,
	      NUMBER,
	      // eat "if" prior to string so that it won't accidentally be
	      // labeled as an f-string as in:
	      { begin: /\bself\b/, }, // very common convention
	      { beginKeywords: "if", relevance: 0 },
	      STRING,
	      hljs.HASH_COMMENT_MODE,
	      {
	        variants: [
	          {className: 'function', beginKeywords: 'def'},
	          {className: 'class', beginKeywords: 'class'}
	        ],
	        end: /:/,
	        illegal: /[${=;\n,]/,
	        contains: [
	          hljs.UNDERSCORE_TITLE_MODE,
	          PARAMS,
	          {
	            begin: /->/, endsWithParent: true,
	            keywords: 'None'
	          }
	        ]
	      },
	      {
	        className: 'meta',
	        begin: /^[\t ]*@/, end: /(?=#)|$/,
	        contains: [NUMBER, PARAMS, STRING]
	      },
	      {
	        begin: /\b(print|exec)\(/ // don’t highlight keywords-turned-functions in Python 3
	      }
	    ]
	  };
	}

	var python_1 = python;

	/*
	Language: Plain text
	Author: Egor Rogov (e.rogov@postgrespro.ru)
	Description: Plain text without any highlighting.
	Category: common
	*/
	function plaintext(hljs) {
	  return {
	    name: 'Plain text',
	    aliases: [
	      'text',
	      'txt'
	    ],
	    disableAutodetect: true
	  };
	}

	var plaintext_1 = plaintext;

	core.registerLanguage('python', python_1);
	core.registerLanguage('plaintext', plaintext_1);
	// this does not work....
	// ['javascript', 'python', 'bash'].forEach(async (langName) => {
	//     const langModule = await import(`highlight.js/lib/languages/${langName}`);
	//     hljs.registerLanguage(langName, langModule);
	// });
	marked.setOptions({
	    highlight: function (code, language) {
	        const validLanguage = core.getLanguage(language)
	            ? language
	            : 'plaintext';
	        return core.highlight(validLanguage, code).value;
	    },
	});
	// customize renderer
	const renderer = {
	    // disable paragraph
	    paragraph(text) {
	        return text;
	    },
	    //disable blockquote
	    blockquote(text) {
	        return text;
	    },
	    //disable heading
	    heading(text) {
	        return text;
	    },
	};
	// @ts-ignore
	marked.use({ renderer });
	function parse_tokens(tokens) {
	    return purify.sanitize(marked.parser(tokens));
	}
	function htmlDecode(input) {
	    // https://stackoverflow.com/questions/1912501/unescape-html-entities-in-javascript
	    var doc = new DOMParser().parseFromString(input, 'text/html');
	    return doc.documentElement.textContent;
	}
	function parse_quizdown(raw_quizdown) {
	    let tokens = marked.lexer(raw_quizdown);
	    let questions = [];
	    let text = '';
	    let explanation = '';
	    let hint = '';
	    tokens.forEach(function (el, i) {
	        if (el['type'] == 'heading') {
	            // start a new question
	            explanation = '';
	            hint = '';
	            text = parse_tokens([el]);
	        }
	        if (el['type'] == 'paragraph' || el['type'] == 'code') {
	            explanation += parse_tokens([el]);
	        }
	        if (el['type'] == 'blockquote') {
	            hint += parse_tokens([el]);
	        }
	        if (el['type'] == 'list') {
	            let answers = [];
	            el['items'].forEach(function (item, i) {
	                let text = parse_tokens(item['tokens']);
	                answers.push(new Answer(i, text, item['checked']));
	            });
	            if (el['ordered']) {
	                // sequence list
	                questions.push(new Sequence(text, explanation, hint, answers));
	            }
	            else {
	                // multiple choice list
	                questions.push(new MultipleChoice(text, explanation, hint, answers));
	            }
	        }
	    });
	    return new Quiz(questions);
	}
	function create_app(raw_quizdown, node) {
	    node.innerHTML = '';
	    raw_quizdown = htmlDecode(stripIndent(raw_quizdown));
	    try {
	        let quiz = parse_quizdown(raw_quizdown);
	        new App$({
	            target: node,
	            intro: false,
	            props: {
	                quiz: quiz,
	            },
	        });
	    }
	    catch (e) {
	        node.innerHTML = `${e}. App could not render. Please check your quizdown syntax.`;
	    }
	}
	function init$1() {
	    let nodes = document.querySelectorAll('.quizdown');
	    for (let node of nodes) {
	        create_app(node.innerHTML, node);
	    }
	}
	window.onload = init$1;

	exports.create_app = create_app;
	exports.init = init$1;

	Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=quizdown.js.map
